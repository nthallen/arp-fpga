ATTR Key : DefTableKey;
ATTR ScopeKey : DefTableKey;

%-----------------------------------------------------------------------------
% The global scope is used for all entity and component names.
%-----------------------------------------------------------------------------
% SYMBOL design_file INHERITS RootScope END;

SYMBOL entity_decl_body INHERITS ExportRange
  COMPUTE INH.ScopeKey = INCLUDING entity_declaration.Key;
END;
SYMBOL EntityRef INHERITS InheritScope, ChkInherit END;
SYMBOL architecture_body INHERITS InhRange END;
SYMBOL component_decl_body INHERITS ExportRange END;

RULE: entity_declaration ::= 'entity' DefIdent entity_decl_body UseIdent ';'
COMPUTE
  entity_declaration.Key = DefIdent.Key;
  printf( "Entity %s bound to Key %d\n", StringTable(DefIdent.Sym),
    entity_declaration.Key );
END;

RULE: architecture_declaration ::=
  'architecture' DefIdent 'of' EntityRef architecture_body UseIdent ';'
COMPUTE
  EntityRef.InnerScope = architecture_body.Env;
  architecture_body.GotInh = EntityRef.InheritOk;
  IF(NE(DefIdent.Key,UseIdent.Key),
      message(ERROR, CatStrInd(CatStrStr(CatStrInd(
        "Architecture closing identifier does not match opening: ", 
        DefIdent.Sym ), " != " ), UseIdent.Sym),
        0, COORDREF));
END;

RULE: EntityRef ::= UseIdent COMPUTE
  EntityRef.ScopeKey = UseIdent.Key;
END;

RULE: component_declaration ::= 'component' DefIdent component_decl_body
COMPUTE
  component_decl_body.ScopeKey = DefIdent.Key;
END;
RULE: component_inst ::= DefIdent ':' UseIdent component_inst_body ';'
COMPUTE
  component_inst_body.Key = UseIdent.Key;
END;

RULE: DefIdent ::= ident COMPUTE DefIdent.Sym = ident; END;
SYMBOL DefIdent INHERITS IdDefScope END;
RULE: UseIdent ::= ident COMPUTE UseIdent.Sym = ident; END;
SYMBOL UseIdent INHERITS IdUseScope COMPUTE
END;

RULE: opt_is ::= 'is' END;
RULE: opt_is ::= END;

SYMBOL DefIdent INHERITS Unique COMPUTE
  IF (NOT (THIS.Unique),
  message(ERROR, 
    CatStrInd ("identifier is multiply defined: ", 
    THIS.Sym),
    0, COORDREF));
END;

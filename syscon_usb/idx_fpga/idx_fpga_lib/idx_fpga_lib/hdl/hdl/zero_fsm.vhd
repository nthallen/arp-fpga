-- VHDL Entity idx_fpga_lib.Zero.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:47:19 01/11/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY Zero IS
   PORT( 
      ArmZero  : IN     std_ulogic;
      DirOut   : IN     std_ulogic;
      F8M      : IN     std_ulogic;
      ZeroRef  : IN     std_logic;
      rst      : IN     std_logic;
      ResetPos : OUT    std_ulogic
   );

-- Declarations

END Zero ;

--
-- VHDL Architecture idx_fpga_lib.Zero.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:47:19 01/11/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF Zero IS

   TYPE STATE_TYPE IS (
      ArmWait,
      Armed,
      Resetting
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= ArmWait;
         ELSE
            current_state <= next_state;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ArmZero,
      DirOut,
      ZeroRef,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN ArmWait => 
            IF (ArmZero = '1') THEN 
               next_state <= Armed;
            ELSIF (ArmZero /= '1') THEN 
               next_state <= ArmWait;
            ELSE
               next_state <= ArmWait;
            END IF;
         WHEN Armed => 
            IF (ArmZero /= '1' AND
                DirOut = '1' AND ZeroRef = '1') THEN 
               next_state <= Resetting;
            ELSIF (ArmZero = '1' OR DirOut /= '1' 
                   OR ZeroRef /= '1') THEN 
               next_state <= Armed;
            ELSE
               next_state <= Armed;
            END IF;
         WHEN Resetting => 
            next_state <= ArmWait;
         WHEN OTHERS =>
            next_state <= ArmWait;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ResetPos <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN ArmWait => 
            ResetPos <= '0' ;
         WHEN Resetting => 
            ResetPos <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;

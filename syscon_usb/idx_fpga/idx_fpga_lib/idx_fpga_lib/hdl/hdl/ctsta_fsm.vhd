-- VHDL Entity idx_fpga_lib.CtStA.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 12:44:37 01/ 7/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY CtStA IS
   PORT( 
      F8M : IN     std_ulogic;
      W   : IN     std_ulogic;
      rst : IN     std_ulogic;
      Ld  : OUT    std_ulogic;
      Ldd : OUT    std_ulogic
   );

-- Declarations

END CtStA ;

--
-- VHDL Architecture idx_fpga_lib.CtStA.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 12:44:37 01/ 7/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF CtStA IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL Ldd_cld : std_ulogic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= s0;
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN s0 => 
                  Ldd_cld <= '0' ;
               WHEN s2 => 
                  Ldd_cld <= '1' ;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      W,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (W = '1') THEN 
               next_state <= s1;
            ELSIF (W /= '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (W /= '1') THEN 
               next_state <= s0;
            ELSIF (W = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (W /= '1') THEN 
               next_state <= s0;
            ELSIF (W = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s2;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            Ld <= '0' ;
         WHEN s1 => 
            Ld <= '1';
         WHEN s2 => 
            Ld <= '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   Ldd <= Ldd_cld;
END fsm;

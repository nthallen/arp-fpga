-- VHDL Entity idx_fpga_lib.CtStB.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 12:48:02 01/ 7/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY CtStB IS
   PORT( 
      F8M     : IN     std_ulogic;
      Ldd     : IN     std_ulogic;
      R       : IN     std_ulogic;
      StepClk : IN     std_ulogic;
      W       : IN     std_ulogic;
      rst     : IN     std_ulogic;
      ClkEn   : OUT    std_ulogic
   );

-- Declarations

END CtStB ;

--
-- VHDL Architecture idx_fpga_lib.CtStB.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 12:48:02 01/ 7/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF CtStB IS

   TYPE STATE_TYPE IS (
      s3,
      s4,
      s5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= s3;
         ELSE
            current_state <= next_state;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Ldd,
      R,
      StepClk,
      W,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s3 => 
            IF (StepClk = '1' AND R /= '1'  AND
                 ( W /= '1' OR Ldd = '1' )) THEN 
               next_state <= s4;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            IF (StepClk /= '1') THEN 
               next_state <= s3;
            ELSIF (StepClk = '1') THEN 
               next_state <= s5;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s5 => 
            IF (StepClk = '1') THEN 
               next_state <= s5;
            ELSIF (StepClk /= '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s5;
            END IF;
         WHEN OTHERS =>
            next_state <= s3;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s3 => 
            ClkEn <= '0' ;
         WHEN s4 => 
            ClkEn <= '1' ;
         WHEN s5 => 
            ClkEn <= '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;

-- VHDL Entity idx_fpga_lib.ao_sm.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 09:18:45 03/17/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ao_sm IS
   PORT( 
      Addr      : IN     std_logic_vector (15 DOWNTO 0);
      F66M      : IN     std_logic;
      WData     : IN     std_logic_vector (15 DOWNTO 0);
      WrEn      : IN     std_ulogic;
      rst       : IN     std_ulogic;
      DA_CLR_B  : OUT    std_logic;
      DA_CS_B   : OUT    std_logic_vector (1 DOWNTO 0);
      DA_LDAC_B : OUT    std_logic;
      DA_SCK    : OUT    std_logic;
      DA_SDI    : OUT    std_logic
   );

-- Declarations

END ao_sm ;

--
-- VHDL Architecture idx_fpga_lib.ao_sm.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 09:18:46 03/17/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF ao_sm IS

   -- Architecture Declarations
   SIGNAL BN : unsigned(4 DOWNTO 0);  
   SIGNAL SR : std_logic_vector(23 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      ao_0,
      ao_1,
      ao_2,
      ao_3,
      ao_5,
      ao_4
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL DA_CLR_B_cld : std_logic ;
   SIGNAL DA_CS_B_cld : std_logic_vector (1 DOWNTO 0);
   SIGNAL DA_LDAC_B_cld : std_logic ;
   SIGNAL DA_SCK_cld : std_logic ;
   SIGNAL DA_SDI_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F66M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F66M'EVENT AND F66M = '1') THEN
         IF (rst = '1') THEN
            current_state <= ao_0;
            -- Default Reset Values
            DA_CLR_B_cld <= '0';
            DA_CS_B_cld <= "11";
            DA_LDAC_B_cld <= '1';
            DA_SCK_cld <= '0';
            DA_SDI_cld <= '0';
            BN <= "00000";
            SR <= (others => '0');
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN ao_0 => 
                  IF (NOT(rst = '1')) THEN 
                     DA_CLR_B_cld <= '1' ;
                  END IF;
               WHEN ao_1 => 
                  SR <= "00110" &
                     Addr(3 DOWNTO 1) &
                     WData;
                  BN <= "00001";
                  DA_SDI_cld <= '0';
                  IF (WrEn /= '1') THEN 
                  ELSIF (WrEn = '1' AND Addr(4) = '1') THEN 
                     DA_CS_B_cld (1) <= '0';
                  ELSE
                     DA_CS_B_cld (0) <= '0';
                  END IF;
               WHEN ao_2 => 
                  DA_SDI_cld <= SR(23);
                  DA_SCK_cld <= '0';
                  BN <= BN + 1;
               WHEN ao_3 => 
                  DA_SCK_cld <= '1';
                  SR(23 DOWNTO 1) <=
                     SR(22 DOWNTO 0);
               WHEN ao_5 => 
                  DA_CS_B_cld <= "11" ;
               WHEN ao_4 => 
                  DA_SCK_cld <= '0';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Addr,
      BN,
      WrEn,
      current_state,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN ao_0 => 
            IF (rst = '1') THEN 
               next_state <= ao_0;
            ELSE
               next_state <= ao_1;
            END IF;
         WHEN ao_1 => 
            IF (WrEn /= '1') THEN 
               next_state <= ao_1;
            ELSIF (WrEn = '1' AND Addr(4) = '1') THEN 
               next_state <= ao_3;
            ELSE
               next_state <= ao_3;
            END IF;
         WHEN ao_2 => 
            next_state <= ao_3;
         WHEN ao_3 => 
            IF (BN = 24) THEN 
               next_state <= ao_4;
            ELSE
               next_state <= ao_2;
            END IF;
         WHEN ao_5 => 
            next_state <= ao_1;
         WHEN ao_4 => 
            next_state <= ao_5;
         WHEN OTHERS =>
            next_state <= ao_0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   DA_CLR_B <= DA_CLR_B_cld;
   DA_CS_B <= DA_CS_B_cld;
   DA_LDAC_B <= DA_LDAC_B_cld;
   DA_SCK <= DA_SCK_cld;
   DA_SDI <= DA_SDI_cld;
END fsm;

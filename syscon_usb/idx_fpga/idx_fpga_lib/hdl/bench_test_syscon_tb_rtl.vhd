--
-- VHDL Test Bench idx_fpga_lib.bench_test_syscon.test_syscon_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 22:18:02 02/27/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;


ENTITY bench_test_syscon IS
   GENERIC (
      N_INTERRUPTS : integer range 15 downto 0 := 1;
      N_BOARDS     : integer range 15 downto 0 := 3
   );
END bench_test_syscon;


LIBRARY idx_fpga_lib;


ARCHITECTURE rtl OF bench_test_syscon IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F8M           : std_logic;
   SIGNAL Ctrl          : std_logic_vector(6 DOWNTO 0);
   SIGNAL Addr          : std_logic_vector(15 DOWNTO 0);
   SIGNAL Data_i        : std_logic_vector(15 DOWNTO 0);
   SIGNAL Data_o        : std_logic_vector(15 DOWNTO 0);
   SIGNAL Status        : std_logic_vector(3 DOWNTO 0);
   SIGNAL ExpRd         : std_logic;
   SIGNAL ExpWr         : std_logic;
   SIGNAL WData         : std_logic_vector(15 DOWNTO 0);
   SIGNAL RData         : std_logic_vector(16*N_BOARDS-1 DOWNTO 0);
   SIGNAL ExpAddr       : std_logic_vector(15 DOWNTO 0);
   SIGNAL ExpAck        : std_logic_vector(N_BOARDS-1 DOWNTO 0);
   SIGNAL BdIntr        : std_ulogic_vector(N_INTERRUPTS-1 downto 0);
   SIGNAL Collision     : std_ulogic;
   SIGNAL INTA          : std_ulogic;
   SIGNAL CmdEnbl       : std_ulogic;
   SIGNAL CmdStrb       : std_ulogic;
   SIGNAL ExpReset      : std_ulogic;
   SIGNAL Fail_In       : std_ulogic;
   SIGNAL Fail_Out      : std_ulogic;
   SIGNAL Flt_CPU_Reset : std_ulogic;
   alias RdEn is Ctrl(0);
   alias WrEn is Ctrl(1);
   alias CS is Ctrl(2);
   alias CE is Ctrl(3);
   alias rst is Ctrl(4);
   alias arm is Ctrl(5);
   alias Done is Status(0);
   alias Ack is Status(1);
   alias ExpIntr is Status(2);
   
   SIGNAL SimDone : std_ulogic;


   -- Component declarations
   COMPONENT test_syscon
      GENERIC (
         N_INTERRUPTS : integer range 15 downto 0 := 1;
         N_BOARDS     : integer range 15 downto 0 := 1
      );
      PORT (
         F8M           : IN     std_logic;
         Ctrl          : IN     std_logic_vector(6 DOWNTO 0);
         Addr          : IN     std_logic_vector(15 DOWNTO 0);
         Data_i        : OUT    std_logic_vector(15 DOWNTO 0);
         Data_o        : IN     std_logic_vector(15 DOWNTO 0);
         Status        : OUT    std_logic_vector(3 DOWNTO 0);
         ExpRd         : OUT    std_logic;
         ExpWr         : OUT    std_logic;
         WData         : OUT    std_logic_vector(15 DOWNTO 0);
         RData         : IN     std_logic_vector(16*N_BOARDS-1 DOWNTO 0);
         ExpAddr       : OUT    std_logic_vector(15 DOWNTO 0);
         ExpAck        : IN     std_logic_vector(N_BOARDS-1 DOWNTO 0);
         BdIntr        : IN     std_ulogic_vector(N_INTERRUPTS-1 downto 0);
         Collision     : OUT    std_ulogic;
         INTA          : OUT    std_ulogic;
         CmdEnbl       : OUT    std_ulogic;
         CmdStrb       : OUT    std_ulogic;
         ExpReset      : OUT    std_ulogic;
         Fail_In       : IN     std_ulogic;
         Fail_Out      : OUT    std_ulogic;
         Flt_CPU_Reset : OUT    std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_test_syscon : test_syscon USE ENTITY idx_fpga_lib.test_syscon;
   -- pragma synthesis_on

BEGIN

  DUT_test_syscon : test_syscon
    GENERIC MAP (
       N_INTERRUPTS => N_INTERRUPTS,
       N_BOARDS     => N_BOARDS
    )
    PORT MAP (
       F8M           => F8M,
       Ctrl          => Ctrl,
       Addr          => Addr,
       Data_i        => Data_i,
       Data_o        => Data_o,
       Status        => Status,
       ExpRd         => ExpRd,
       ExpWr         => ExpWr,
       WData         => WData,
       RData         => RData,
       ExpAddr       => ExpAddr,
       ExpAck        => ExpAck,
       BdIntr        => BdIntr,
       Collision     => Collision,
       INTA          => INTA,
       CmdEnbl       => CmdEnbl,
       CmdStrb       => CmdStrb,
       ExpReset      => ExpReset,
       Fail_In       => Fail_In,
       Fail_Out      => Fail_Out,
       Flt_CPU_Reset => Flt_CPU_Reset
    );

  f8m_clk : Process
  Begin
    F8M <= '0';
    -- pragma synthesis_off
    wait for 20 ns;
    while SimDone = '0' loop
      F8M <= '1';
      wait for 62 ns;
      F8M <= '0';
      wait for 63 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;

  test_proc: Process
  Begin
    SimDone <= '0';
    Ctrl <= "0000000";
    Addr <= (others => '0');
    Data_o <= (others => '0');
    ExpAck <= "000";
    BdIntr <= ( others => '0' );
    RData <= X"222211110000";
    Fail_In <= '0';
    rst <= '1';
    -- pragma synthesis_off
    wait for 300 ns;
    rst <= '0';
    wait until F8M'Event and F8M = '1';
    RdEn <= '1';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '1' report "ExpRd expected" severity error;
    ExpAck <= "001";
    wait until Done = '1';
    assert Data_i = X"0000"
      report "Read data incorrect"
      severity error;
    ExpAck <= "000";
    wait for 1000 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    RdEn <= '0';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '0' report "Done should not be asserted" severity error;
    assert Ack = '0' report "Ack should not be asserted" severity error;
    assert Collision = '0' report "Collision should not be asserted" severity error;

    wait for 300 ns;
    rst <= '0';
    wait until F8M'Event and F8M = '1';
    RdEn <= '1';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '1' report "ExpRd expected" severity error;
    ExpAck <= "010";
    wait until Done = '1';
    assert Data_i = X"1111"
      report "Read data incorrect"
      severity error;
    ExpAck <= "000";
    wait for 1000 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    RdEn <= '0';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '0' report "Done should not be asserted" severity error;
    assert Ack = '0' report "Ack should not be asserted" severity error;
    assert Collision = '0' report "Collision should not be asserted" severity error;
    
    wait for 300 ns;
    rst <= '0';
    wait until F8M'Event and F8M = '1';
    RdEn <= '1';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '1' report "ExpRd expected" severity error;
    ExpAck <= "100";
    wait until Done = '1';
    assert Data_i = X"2222"
      report "Read data incorrect"
      severity error;
    ExpAck <= "000";
    wait for 1000 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    RdEn <= '0';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '0' report "Done should not be asserted" severity error;
    assert Ack = '0' report "Ack should not be asserted" severity error;
    assert Collision = '0' report "Collision should not be asserted" severity error;

    wait for 300 ns;
    rst <= '0';
    wait until F8M'Event and F8M = '1';
    RdEn <= '1';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '1' report "ExpRd expected" severity error;
    ExpAck <= "101";
    wait until Done = '1';
    assert Data_i = X"2222"
      report "Read data incorrect"
      severity error;
    ExpAck <= "000";
    wait for 1000 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    RdEn <= '0';
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 40 ns;
    assert ExpRd = '0' report "ExpRd should have cleared" severity error;
    assert Done = '0' report "Done should not be asserted" severity error;
    assert Ack = '0' report "Ack should not be asserted" severity error;
    assert Collision = '1' report "Collision should be asserted" severity error;
    
    Data_o <= X"1234";
    wait until F8M'Event AND F8M = '1';
    WrEn <= '1';
    wait until F8M'Event AND F8M = '1';
    wait until F8M'Event AND F8M = '1';
    wait for 40 ns;
    assert ExpWr = '1' report "ExpWr should be asserted" severity error;
    assert Done = '0' report "Done should not be asserted" severity error;
    assert To_X01(Ack) = '0' report "Ack should not be asserted" severity error;
    ExpAck <= "001";
    wait until F8M'Event AND F8M = '1';
    wait for 40 ns;
    assert Ack = '1' report "Ack should be asserted" severity error;
    for i in 1 to 8 loop
      wait until F8M'Event and F8M = '1';
    end loop;
    wait for 40 ns;
    assert ExpWr = '0' report "ExpWr should be cleared" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    WrEn <= '0';
    ExpAck <= "000";
    wait until F8M'Event and F8M = '1';
    wait until F8M'Event and F8M = '1';
    wait for 30 ns;
    assert Done = '0' report "Done should not be asserted" severity error;
    assert To_X01(Ack) = '0' report "Ack should not be asserted" severity error;

    -- Interrupt testing
    assert ExpIntr = '0' report "ExpIntr should not be asserted" severity error;
    BdIntr <= "1";
    Addr <= X"0040";
    wait for 150 ns;
    assert ExpIntr = '1' report "ExpInter should be asserted" severity error;
    RdEn <= '1';
    wait for 500 ns;
    assert INTA = '1' report "INTA not asserted" severity error;
    wait for 700 ns;
    assert INTA = '0' report "INTA asserted too long" severity error;
    assert Data_i = X"0001" report "Data value during INTA wrong" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    RdEn <= '0';
    wait for 200 ns;

    BdIntr <= "0";
    Addr <= X"0040";
    wait for 150 ns;
    assert ExpIntr = '0' report "ExpIntr should not be asserted" severity error;
    RdEn <= '1';
    wait for 500 ns;
    assert INTA = '1' report "INTA not asserted" severity error;
    wait for 700 ns;
    assert INTA = '0' report "INTA asserted too long" severity error;
    assert Data_i = X"0000" report "Data value during INTA wrong" severity error;
    assert Done = '1' report "Done should be asserted" severity error;
    assert Ack = '1' report "Ack should be asserted" severity error;
    RdEn <= '0';
    wait for 200 ns;
    SimDone <= '1';
    wait;
   -- pragma synthesis_on
  End Process;
  
 -- Status_o <= Status;
--  ExpRd_o <= ExpRd;
--  ExpWr_o <= ExpWr;
--  ExpAddr_o <= ExpAddr;
--  Data_i_o <= Data_i;
--  ExpReset_o <= ExpReset;
--  CmdEnbl_o <= CmdEnbl;
--  CmdStrb_o <= CmdStrb;

END rtl;
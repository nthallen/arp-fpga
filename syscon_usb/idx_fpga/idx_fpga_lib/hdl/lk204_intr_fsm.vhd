-- VHDL Entity idx_fpga_lib.lk204_intr.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:59:09 09/13/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;

ENTITY lk204_intr IS
   PORT( 
      F8M      : IN     std_ulogic;
      INTA     : IN     std_ulogic;
      KeyEmpty : IN     std_logic;
      Rst      : IN     std_logic;
      BdIntr   : OUT    std_ulogic
   );

-- Declarations

END lk204_intr ;

--
-- VHDL Architecture idx_fpga_lib.lk204_intr.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:59:09 09/13/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF lk204_intr IS

   TYPE STATE_TYPE IS (
      IR0,
      IR4,
      IR1,
      IR3,
      IR2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL BdIntr_cld : std_ulogic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (Rst = '1') THEN
            current_state <= IR0;
            -- Default Reset Values
            BdIntr_cld <= '0';
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN IR0 => 
                  BdIntr_cld <= '0';
               WHEN IR4 => 
                  BdIntr_cld <= '1';
               WHEN IR1 => 
                  BdIntr_cld <= '0';
               WHEN IR3 => 
                  BdIntr_cld <= '1';
               WHEN IR2 => 
                  BdIntr_cld <= '0';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      INTA,
      KeyEmpty,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN IR0 => 
            IF (KeyEmpty = '0') THEN 
               next_state <= IR0;
            ELSIF (KeyEmpty /= '0' and
                   INTA = '0') THEN 
               next_state <= IR1;
            ELSE
               next_state <= IR2;
            END IF;
         WHEN IR4 => 
            IF (INTA = '0' and
                KeyEmpty = '0') THEN 
               next_state <= IR0;
            ELSIF (INTA = '0' and
                   KeyEmpty /= '0') THEN 
               next_state <= IR1;
            ELSE
               next_state <= IR4;
            END IF;
         WHEN IR1 => 
            IF (INTA /= '0') THEN 
               next_state <= IR2;
            ELSIF (INTA = '0' and
                   KeyEmpty = '0') THEN 
               next_state <= IR3;
            ELSE
               next_state <= IR1;
            END IF;
         WHEN IR3 => 
            IF (INTA = '0' and
                KeyEmpty /= '0') THEN 
               next_state <= IR2;
            ELSIF (INTA /= '0') THEN 
               next_state <= IR4;
            ELSE
               next_state <= IR3;
            END IF;
         WHEN IR2 => 
            IF (INTA = '0' and
                KeyEmpty /= '0') THEN 
               next_state <= IR1;
            ELSIF (INTA = '0' and
                   KeyEmpty = '0') THEN 
               next_state <= IR3;
            ELSE
               next_state <= IR2;
            END IF;
         WHEN OTHERS =>
            next_state <= IR0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   BdIntr <= BdIntr_cld;
END fsm;

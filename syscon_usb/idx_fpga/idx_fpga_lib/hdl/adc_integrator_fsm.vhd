-- VHDL Entity idx_fpga_lib.adc_integrator.symbol
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 16:23:22 05/01/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY adc_integrator IS
   PORT( 
      IN_DATA_READY : IN     std_logic;
      READ_EN       : IN     std_logic;
      STATUS_EN     : IN     std_logic;
      clk           : IN     std_logic;
      rst           : IN     std_logic;
      ADD_EN        : OUT    std_logic;
      CLR           : OUT    std_logic;
      OUT_ACK       : OUT    std_logic;
      STATUS        : OUT    std_logic_vector (4 DOWNTO 0)
   );

-- Declarations

END adc_integrator ;

--
-- VHDL Architecture idx_fpga_lib.adc_integrator.fsm
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 16:57:36 05/01/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF adc_integrator IS

   -- Architecture Declarations
   SIGNAL NAVG : unsigned(4 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      init,
      s0,
      s3,
      s2,
      s1,
      s4,
      s5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL ADD_EN_cld : std_logic ;
   SIGNAL CLR_cld : std_logic ;
   SIGNAL OUT_ACK_cld : std_logic ;
   SIGNAL STATUS_cld : std_logic_vector (4 DOWNTO 0);

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk
   )
   -----------------------------------------------------------------
   BEGIN
      IF (clk'EVENT AND clk = '1') THEN
         IF (rst = '1') THEN
            current_state <= init;
            -- Default Reset Values
            ADD_EN_cld <= '0';
            CLR_cld <= '1';
            OUT_ACK_cld <= '0';
            STATUS_cld <= (others => '0');
            NAVG <= (others => '0');
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN s0 => 
                  IF (NOT(READ_EN = '1' AND 
                      STATUS_EN = '1')) THEN 
                     CLR_cld <= '1';
                     NAVG <= (others => '0');
                  END IF;
               WHEN s3 => 
                  ADD_EN_cld <= '0';
               WHEN s2 => 
                  ADD_EN_cld <= '1';
                  NAVG <= NAVG+1;
                  OUT_ACK_cld <= '1';
               WHEN s1 => 
                  OUT_ACK_cld <= '0';
                  CLR_cld <= '0';
               WHEN s4 => 
                  STATUS_cld <= std_logic_vector(NAVG);
               WHEN s5 => 
                  STATUS_cld<= std_logic_vector(NAVG);
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      IN_DATA_READY,
      READ_EN,
      STATUS_EN,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            next_state <= s4;
         WHEN s0 => 
            IF (NOT(READ_EN = '1' AND 
                STATUS_EN = '1')) THEN 
               next_state <= s1;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s3 => 
            IF (IN_DATA_READY = '0') THEN 
               next_state <= s1;
            ELSIF (READ_EN = '1' AND 
                   STATUS_EN = '1') THEN 
               next_state <= s5;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s2 => 
            next_state <= s3;
         WHEN s1 => 
            IF (NOT(READ_EN = '1' AND 
                STATUS_EN <= '1') AND 
                IN_DATA_READY = '1') THEN 
               next_state <= s2;
            ELSIF (READ_EN = '1' AND 
                   STATUS_EN = '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s4 => 
            next_state <= s0;
         WHEN s5 => 
            IF (IN_DATA_READY = '0') THEN 
               next_state <= s0;
            ELSE
               next_state <= s5;
            END IF;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   ADD_EN <= ADD_EN_cld;
   CLR <= CLR_cld;
   OUT_ACK <= OUT_ACK_cld;
   STATUS <= STATUS_cld;
END fsm;

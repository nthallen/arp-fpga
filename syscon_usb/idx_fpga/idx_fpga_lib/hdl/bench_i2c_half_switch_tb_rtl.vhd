--
-- VHDL Test Bench idx_fpga_lib.bench_i2c_half_switch.i2c_half_switch_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 10:12:02 11/ 1/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;


ENTITY bench_i2c_half_switch IS
   GENERIC (
      N_ISBITS : integer range 20 downto 2 := 4
   );
END bench_i2c_half_switch;


LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_i2c_half_switch IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL En       : std_ulogic_vector(N_ISBITS-1 DOWNTO 0);
   SIGNAL pad_o    : std_logic;
   SIGNAL padoen_o : std_logic;
   SIGNAL pad_i    : std_logic;
   SIGNAL pad      : std_logic_vector(N_ISBITS-1 DOWNTO 0);


   -- Component declarations
   COMPONENT i2c_half_switch
      GENERIC (
         N_ISBITS : integer range 20 downto 2 := 4
      );
      PORT (
         En       : IN     std_ulogic_vector(N_ISBITS-1 DOWNTO 0);
         pad_o    : IN     std_logic;
         padoen_o : IN     std_logic;
         pad_i    : OUT    std_logic;
         pad      : INOUT  std_logic_vector(N_ISBITS-1 DOWNTO 0)
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_i2c_half_switch : i2c_half_switch USE ENTITY idx_fpga_lib.i2c_half_switch;
   -- pragma synthesis_on

BEGIN

  DUT_i2c_half_switch : i2c_half_switch
    GENERIC MAP (
      N_ISBITS => N_ISBITS
    )
    PORT MAP (
      En       => En,
      pad_o    => pad_o,
      padoen_o => padoen_o,
      pad_i    => pad_i,
      pad      => pad
    );

  testproc : Process IS
    -- pragma synthesis_off
    Variable Pad_Low : std_ulogic_vector(N_ISBITS-1 DOWNTO 0);
    Variable Pad_Exp : std_ulogic;
    -- pragma synthesis_on
  Begin
    En <= (others => '0');
    pad_o <= '0';
    padoen_o <= '1';
    pad <= (others => 'H');
    -- pragma synthesis_off
    for i in 0 TO 2**N_ISBITS-1 loop
      En <= To_StdULogicVector(conv_std_logic_vector( i, N_ISBITS ));
      for j in 0 TO 2**N_ISBITS-1 loop
        Pad_Low := To_StdULogicVector(conv_std_logic_vector( j, N_ISBITS ));
        for k in 0 TO N_ISBITS-1 loop
          if Pad_Low(k) = '1' then
            pad(k) <= '0';
          else
            pad(k) <= 'H';
          end if;
        end loop;
        padoen_o <= '1';
        wait for 10 ns;
        Pad_Exp := '1';
        for k in 0 TO N_ISBITS-1 loop
          if En(k) = '1' AND pad(k) = '0' then
            Pad_Exp := '0';
          end if;
        end loop;
        assert pad_i = Pad_Exp
          report "pad_i value does not match"
          severity error;
        wait for 10 ns;
        padoen_o <= '0';
        wait for 10 ns;
        assert pad_i = '0'
          report "pad_i value should be zero"
          severity error;
      end loop;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;

END rtl;
-- VHDL Entity idx_fpga_lib.temp_acquire.symbol
--
-- Created:
--          by - Lord_Ivan.None (EASWHLPT3425080)
--          at - 14:00:49 05/04/15
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY temp_acquire IS
   PORT( 
      ack       : IN     std_logic;
      clk_8M    : IN     std_logic;
      rst       : IN     std_logic;
      brd_num   : OUT    std_logic_vector (2 DOWNTO 0);
      rd_data_o : OUT    std_logic_vector (31 DOWNTO 0);
      rdy       : OUT    std_logic;
      scl       : INOUT  std_logic;
      sda       : INOUT  std_logic
   );

-- Declarations

END temp_acquire ;

--
-- VHDL Architecture idx_fpga_lib.temp_acquire.struct
--
-- Created:
--          by - nort.Domain Users (EASWHLPT3425080)
--          at - 20:33:18 05/07/15
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;

LIBRARY idx_fpga_lib;

ARCHITECTURE struct OF temp_acquire IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL adc_addr     : std_logic_vector(6 DOWNTO 0);
   SIGNAL arst_i       : std_logic;
   SIGNAL done         : std_logic;
   SIGNAL err          : std_logic;
   SIGNAL rd_cmd       : std_logic;
   SIGNAL rd_data      : std_logic_vector(31 DOWNTO 0);
   SIGNAL scl_pad_i    : std_logic;
   SIGNAL scl_pad_o    : std_logic;
   SIGNAL scl_padoen_o : std_logic;
   SIGNAL sda_pad_i    : std_logic;
   SIGNAL sda_pad_o    : std_logic;
   SIGNAL sda_padoen_o : std_logic;
   SIGNAL wb_ack_o     : std_logic;
   SIGNAL wb_adr_i     : std_logic_vector(2 DOWNTO 0);
   SIGNAL wb_cyc_i     : std_logic;
   SIGNAL wb_dat_i     : std_logic_vector(7 DOWNTO 0);
   SIGNAL wb_dat_o     : std_logic_vector(7 DOWNTO 0);
   SIGNAL wb_inta_o    : std_logic;
   SIGNAL wb_stb_i     : std_logic;
   SIGNAL wb_we_i      : std_logic;
   SIGNAL wr_cmd       : std_logic;
   SIGNAL wr_data      : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT i2c_master_top
   GENERIC (
      ARST_LVL : std_logic := '0'      -- asynchronous reset level
   );
   PORT (
      -- wishbone signals
      wb_clk_i     : IN     std_logic ;                    -- master clock input
      wb_rst_i     : IN     std_logic  := '0';             -- synchronous active high reset
      arst_i       : IN     std_logic  := not ARST_LVL;    -- asynchronous reset
      wb_adr_i     : IN     std_logic_vector (2 DOWNTO 0); -- lower address bits
      wb_dat_i     : IN     std_logic_vector (7 DOWNTO 0); -- Databus input
      wb_dat_o     : OUT    std_logic_vector (7 DOWNTO 0); -- Databus output
      wb_we_i      : IN     std_logic ;                    -- Write enable input
      wb_stb_i     : IN     std_logic ;                    -- Strobe signals / core select signal
      wb_cyc_i     : IN     std_logic ;                    -- Valid bus cycle input
      wb_ack_o     : OUT    std_logic ;                    -- Bus cycle acknowledge output
      wb_inta_o    : OUT    std_logic ;                    -- interrupt request output signal
      -- i2c lines
      scl_pad_i    : IN     std_logic ;                    -- i2c clock line input
      scl_pad_o    : OUT    std_logic ;                    -- i2c clock line output
      scl_padoen_o : OUT    std_logic ;                    -- i2c clock line output enable, active low
      sda_pad_i    : IN     std_logic ;                    -- i2c data line input
      sda_pad_o    : OUT    std_logic ;                    -- i2c data line output
      sda_padoen_o : OUT    std_logic                      -- i2c data line output enable, active low
   );
   END COMPONENT;
   COMPONENT temp_i2c
   PORT (
      scl_pad_o    : IN     std_logic ;
      scl_padoen_o : IN     std_logic ;
      sda_pad_o    : IN     std_logic ;
      sda_padoen_o : IN     std_logic ;
      scl_pad_i    : OUT    std_logic ;
      sda_pad_i    : OUT    std_logic ;
      scl          : INOUT  std_logic ;
      sda          : INOUT  std_logic 
   );
   END COMPONENT;
   COMPONENT temp_i2c_mid
   PORT (
      adc_addr  : IN     std_logic_vector (6 DOWNTO 0);
      clk_8M    : IN     std_logic ;
      rd_cmd    : IN     std_logic ;
      rst       : IN     std_logic ;
      wb_ack_o  : IN     std_logic ;
      wb_dat_o  : IN     std_logic_vector (7 DOWNTO 0);
      wb_inta_o : IN     std_logic ;
      wr_cmd    : IN     std_logic ;
      wr_data   : IN     std_logic_vector (7 DOWNTO 0);
      arst_i    : OUT    std_logic ;
      done      : OUT    std_logic ;
      err       : OUT    std_logic ;
      rd_data   : OUT    std_logic_vector (31 DOWNTO 0);
      wb_adr_i  : OUT    std_logic_vector (2 DOWNTO 0);
      wb_cyc_i  : OUT    std_logic ;
      wb_dat_i  : OUT    std_logic_vector (7 DOWNTO 0);
      wb_stb_i  : OUT    std_logic ;
      wb_we_i   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT temp_i2c_top
   PORT (
      ack       : IN     std_logic ;
      clk_8M    : IN     std_logic ;
      done      : IN     std_logic ;
      err       : IN     std_logic ;
      rd_data   : IN     std_logic_vector (31 DOWNTO 0);
      rst       : IN     std_logic ;
      adc_addr  : OUT    std_logic_vector (6 DOWNTO 0);
      brd_num   : OUT    std_logic_vector (2 DOWNTO 0);
      rd_cmd    : OUT    std_logic ;
      rd_data_o : OUT    std_logic_vector (31 DOWNTO 0);
      rdy       : OUT    std_logic ;
      wr_cmd    : OUT    std_logic ;
      wr_data   : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : i2c_master_top USE ENTITY idx_fpga_lib.i2c_master_top;
   FOR ALL : temp_i2c USE ENTITY idx_fpga_lib.temp_i2c;
   FOR ALL : temp_i2c_mid USE ENTITY idx_fpga_lib.temp_i2c_mid;
   FOR ALL : temp_i2c_top USE ENTITY idx_fpga_lib.temp_i2c_top;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   i2c_master : i2c_master_top
      GENERIC MAP (
         ARST_LVL => '1'         -- asynchronous reset level
      )
      PORT MAP (
         wb_clk_i     => clk_8M,
         wb_rst_i     => rst,
         arst_i       => arst_i,
         wb_adr_i     => wb_adr_i,
         wb_dat_i     => wb_dat_i,
         wb_dat_o     => wb_dat_o,
         wb_we_i      => wb_we_i,
         wb_stb_i     => wb_stb_i,
         wb_cyc_i     => wb_cyc_i,
         wb_ack_o     => wb_ack_o,
         wb_inta_o    => wb_inta_o,
         scl_pad_i    => scl_pad_i,
         scl_pad_o    => scl_pad_o,
         scl_padoen_o => scl_padoen_o,
         sda_pad_i    => sda_pad_i,
         sda_pad_o    => sda_pad_o,
         sda_padoen_o => sda_padoen_o
      );
   i2c_iface : temp_i2c
      PORT MAP (
         scl_pad_o    => scl_pad_o,
         scl_padoen_o => scl_padoen_o,
         sda_pad_o    => sda_pad_o,
         sda_padoen_o => sda_padoen_o,
         scl_pad_i    => scl_pad_i,
         sda_pad_i    => sda_pad_i,
         scl          => scl,
         sda          => sda
      );
   temp_midlvl : temp_i2c_mid
      PORT MAP (
         adc_addr  => adc_addr,
         clk_8M    => clk_8M,
         rd_cmd    => rd_cmd,
         rst       => rst,
         wb_ack_o  => wb_ack_o,
         wb_dat_o  => wb_dat_o,
         wb_inta_o => wb_inta_o,
         wr_cmd    => wr_cmd,
         wr_data   => wr_data,
         arst_i    => arst_i,
         done      => done,
         err       => err,
         rd_data   => rd_data,
         wb_adr_i  => wb_adr_i,
         wb_cyc_i  => wb_cyc_i,
         wb_dat_i  => wb_dat_i,
         wb_stb_i  => wb_stb_i,
         wb_we_i   => wb_we_i
      );
   temp_top : temp_i2c_top
      PORT MAP (
         ack       => ack,
         clk_8M    => clk_8M,
         done      => done,
         err       => err,
         rd_data   => rd_data,
         rst       => rst,
         adc_addr  => adc_addr,
         brd_num   => brd_num,
         rd_cmd    => rd_cmd,
         rd_data_o => rd_data_o,
         rdy       => rdy,
         wr_cmd    => wr_cmd,
         wr_data   => wr_data
      );

END struct;

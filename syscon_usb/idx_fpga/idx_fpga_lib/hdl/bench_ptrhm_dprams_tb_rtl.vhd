--
-- VHDL Test Bench idx_fpga_lib.bench_ptrhm_dprams.ptrhm_dprams_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 14:03:31 10/31/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_ptrhm_dprams IS
   GENERIC (
      N_PTRH : integer range 20 downto 1 := 2
   );
END bench_ptrhm_dprams;


LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_ptrhm_dprams IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F8M      : std_ulogic;
   SIGNAL rst      : std_ulogic;
   SIGNAL RdEn     : std_ulogic;
   SIGNAL RegEn    : std_ulogic_vector(12 DOWNTO 0);
   SIGNAL PTRHEn   : std_ulogic_vector(N_PTRH-1 DOWNTO 0);
   SIGNAL WrEn     : std_ulogic_vector(12 DOWNTO 0);
   SIGNAL WrPTRHEn : std_ulogic_vector(N_PTRH-1 DOWNTO 0);
   SIGNAL wData    : std_logic_vector(23 DOWNTO 0);
   SIGNAL rData    : std_logic_vector(15 DOWNTO 0);
   SIGNAL Done     : std_ulogic;


   -- Component declarations
   COMPONENT ptrhm_dprams
      GENERIC (
         N_PTRH : integer range 20 downto 1 := 2
      );
      PORT (
         F8M      : IN     std_ulogic;
         rst      : IN     std_ulogic;
         RdEn     : IN     std_ulogic;
         RegEn    : IN     std_ulogic_vector(12 DOWNTO 0);
         PTRHEn   : IN     std_ulogic_vector(N_PTRH-1 DOWNTO 0);
         WrEn     : IN     std_ulogic_vector(12 DOWNTO 0);
         WrPTRHEn : IN     std_ulogic_vector(N_PTRH-1 DOWNTO 0);
         wData    : IN     std_logic_vector(23 DOWNTO 0);
         rData    : OUT    std_logic_vector(15 DOWNTO 0)
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_ptrhm_dprams : ptrhm_dprams USE ENTITY idx_fpga_lib.ptrhm_dprams;
   -- pragma synthesis_on

BEGIN
  DUT_ptrhm_dprams : ptrhm_dprams
    GENERIC MAP (
      N_PTRH => N_PTRH
    )
    PORT MAP (
       F8M      => F8M,
       rst      => rst,
       RdEn     => RdEn,
       RegEn    => RegEn,
       PTRHEn   => PTRHEn,
       WrEn     => WrEn,
       WrPTRHEn => WrPTRHEn,
       wData    => wData,
       rData    => rData
    );


  clock : Process
  Begin
    F8M <= '0';
    -- pragma synthesis_off
    wait for 40 ns;
    while Done = '0' loop
      F8M <= '0';
      wait for 62 ns;
      F8M <= '1';
      wait for 63 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;

  wproc : Process IS
    Variable PatWord : std_logic_vector(7 DOWNTO 0);
    Variable PatWord2 : std_logic_vector(7 DOWNTO 0);
  Begin
    Done <= '0';
    wData <= (others => '0');
    WrEn <= (others => '0');
    WrPTRHEn <= (others => '0');
    RegEn <= (others => '0');
    PTRHEn <= (others => '0');
    RdEn <= '0';
    rst  <= '1';
    
    -- pragma synthesis_off
    wait until F8M'event AND F8M = '1';
    wait until F8M'event AND F8M = '1';
    
    -- Things to test:
    --   Write a pattern to all registers, then read
    --   Test hold mechanism
    for k in 0 to 1 loop
      for i in 0 to N_PTRH-1 loop
        for j in 0 to 12 loop
          PatWord := conv_std_logic_vector( i, 4) & conv_std_logic_vector( j, 4);
          wait until F8M'event AND F8M = '1';
          wData <= PatWord & PatWord & PatWord;
          WrEn(j) <= '1';
          WrPTRHEn(i) <= '1';
          wait until F8M'event AND F8M = '1';
          WrEn(j) <= '0';
          WrPTRHEn(i) <= '0';
        end loop;
      end loop;
    end loop;
    
    for i in 0 to N_PTRH-1 loop
      for j in 0 to 12 loop
        PatWord := conv_std_logic_vector( i, 4) & conv_std_logic_vector( j, 4);
        wait until F8M'event AND F8M = '1';
        RegEn(j) <= '1';
        PTRHEn(i) <= '1';
        RdEn <= '1';
        wait until F8M'event AND F8M = '1';
        -- wait for 10 ns;
        if j /= 10 AND j /= 12 then
          assert rData = PatWord & PatWord
            report "Incorrect readback"
            severity error;
        else
          assert rData = X"00" & PatWord
            report "Incorrect readback on high byte"
            severity error;
        end if;
        RegEn(j) <= '0';
        PTRHEn(i) <= '0';
        RdEn <= '0';
      end loop;
    end loop;
    
    -- Test hold
    for i in 0 to N_PTRH-1 loop
      PatWord := conv_std_logic_vector( i+1, 4) & conv_std_logic_vector( i+1, 4);
      wData <= PatWord & PatWord & PatWord;
      WrEn(9) <= '1';
      WrEn(10) <= '1';
      WrPTRHEn(i) <= '1';
      wait until F8M'event AND F8M = '1';
      WrEn(9) <= '0';
      WrEn(10) <= '0';
      WrPTRHEn(i) <= '0';
      PatWord := conv_std_logic_vector( i+3, 4) & conv_std_logic_vector( i+3, 4);
      wData <= PatWord & PatWord & PatWord;
      WrEn(11) <= '1';
      WrEn(12) <= '1';
      WrPTRHEn(i) <= '1';
      wait until F8M'event AND F8M = '1';
      WrEn(11) <= '0';
      WrEn(12) <= '0';
      WrPTRHEn(i) <= '0';
    end loop;
    for i in 0 to N_PTRH-1 loop
      for j in 0 to 1 loop -- this is for reg 9/10 and 11/12
        PatWord := conv_std_logic_vector( i+1+2*j, 4) & conv_std_logic_vector( i+1+2*j, 4);
        PatWord2 := conv_std_logic_vector( i+5+2*j, 4) & conv_std_logic_vector( i+5+2*j, 4);
        RegEn(9+2*j) <= '1';
        PTRHEn(i) <= '1';
        RdEn <= '1';
        wait until F8M'event AND F8M = '1';
        assert rData = PatWord & PatWord
          report "Readback in hold test 1 failed"
          severity error;
        RegEn(9+2*j) <= '0';
        PTRHEn(i) <= '0';
        RdEn <= '0';
        wData <= PatWord2 & PatWord2 & PatWord2;
        WrEn(9+2*j) <= '1';
        WrEn(10+2*j) <= '1';
        WrPTRHEn(i) <= '1';
        wait until F8M'event AND F8M = '1';
        WrEn(9+2*j) <= '0';
        WrEn(10+2*j) <= '0';
        WrPTRHEn(i) <= '0';
        RegEn(10+2*j) <= '1';
        PTRHEn(i) <= '1';
        RdEn <= '1';
        wait until F8M'event AND F8M = '1';
        assert rData = X"00" & PatWord
          report "Readback in hold test 2 failed"
          severity error;
        wait until F8M'event AND F8M = '1';
        assert rData = X"00" & PatWord
          report "Readback in hold test 3 failed"
          severity error;
        RdEn <= '0';
        wait until F8M'event AND F8M = '1';
        RdEn <= '1';
        wait until F8M'event AND F8M = '1';
        assert rData = X"00" & PatWord2
          report "Readback in hold test 4 failed"
          severity error;
        RegEn(10+2*j) <= '0';
        PTRHEn(i) <= '0';
      end loop;
    end loop;
    
    Done <= '1';
    wait;
    -- pragma synthesis_on
  End Process;
   
END rtl;
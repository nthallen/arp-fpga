-- VHDL Entity idx_fpga_lib.lk204_i2c_tb.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 14:32:10 11/20/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY lk204_i2c_tb IS
   GENERIC( 
      I2C_CLK_PRESCALE : std_logic_vector(15 DOWNTO 0) := X"000E";
      N_ISBITS         : integer range 20 downto 1     := 1
   );
-- Declarations

END lk204_i2c_tb ;

--
-- VHDL Architecture idx_fpga_lib.lk204_i2c_tb.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 14:32:10 11/20/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
--  Copyright 2011 President and Fellows of Harvard College
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;
USE ieee.std_logic_arith.ALL;

LIBRARY idx_fpga_lib;

ARCHITECTURE struct OF lk204_i2c_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Done         : std_logic;
   SIGNAL En           : std_ulogic_vector(N_ISBITS-1 DOWNTO 0);
   SIGNAL Err          : std_logic;
   SIGNAL F8M          : std_ulogic;
   SIGNAL I2Crdata     : std_logic_vector(7 DOWNTO 0);
   SIGNAL I2Cwdata     : std_logic_vector(7 DOWNTO 0);
   SIGNAL RdI2C        : std_logic;
   SIGNAL Rst          : std_logic;
   SIGNAL WrI2C        : std_logic;
   SIGNAL WrStart      : std_logic;
   SIGNAL WrStop       : std_logic;
   SIGNAL arst_i       : std_logic;                                 -- asynchronous reset
   SIGNAL pad_i        : std_logic;
   SIGNAL rdata        : std_logic_vector(7 DOWNTO 0) := X"00";
   SIGNAL rdata1       : std_logic_vector(7 DOWNTO 0) := X"00";
   SIGNAL scl          : std_logic_vector(N_ISBITS-1 DOWNTO 0);
   SIGNAL scl_pad_o    : std_logic;                                 -- i2c clock line output
   SIGNAL scl_padoen_o : std_logic;                                 -- i2c clock line output enable, active low
   SIGNAL sda          : std_logic_vector(N_ISBITS-1 DOWNTO 0);
   SIGNAL sda_pad_i    : std_logic;                                 -- i2c data line input
   SIGNAL sda_pad_o    : std_logic;                                 -- i2c data line output
   SIGNAL sda_padoen_o : std_logic;                                 -- i2c data line output enable, active low
   SIGNAL wb_ack_o     : std_logic;                                 -- Bus cycle acknowledge output
   SIGNAL wb_adr_i     : std_logic_vector(2 DOWNTO 0);              -- lower address bits
   SIGNAL wb_cyc_i     : std_logic;                                 -- Valid bus cycle input
   SIGNAL wb_dat_i     : std_logic_vector(7 DOWNTO 0);              -- Databus input
   SIGNAL wb_dat_o     : std_logic_vector(7 DOWNTO 0);              -- Databus output
   SIGNAL wb_inta_o    : std_logic;                                 -- interrupt request output signal
   SIGNAL wb_stb_i     : std_logic;                                 -- Strobe signals / core select signal
   SIGNAL wb_we_i      : std_logic;                                 -- Write enable input
   SIGNAL wdata        : std_ulogic_vector(7 DOWNTO 0);
   SIGNAL wdata2       : std_ulogic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT i2c_half_switch
   GENERIC (
      N_ISBITS : integer range 20 downto 1 := 4
   );
   PORT (
      En       : IN     std_ulogic_vector (N_ISBITS-1 DOWNTO 0);
      pad_o    : IN     std_logic ;
      padoen_o : IN     std_logic ;
      pad_i    : OUT    std_logic ;
      pad      : INOUT  std_logic_vector (N_ISBITS-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT i2c_master_top
   GENERIC (
      ARST_LVL : std_logic := '0'      -- asynchronous reset level
   );
   PORT (
      -- wishbone signals
      wb_clk_i     : IN     std_logic ;                    -- master clock input
      wb_rst_i     : IN     std_logic  := '0';             -- synchronous active high reset
      arst_i       : IN     std_logic  := not ARST_LVL;    -- asynchronous reset
      wb_adr_i     : IN     std_logic_vector (2 DOWNTO 0); -- lower address bits
      wb_dat_i     : IN     std_logic_vector (7 DOWNTO 0); -- Databus input
      wb_dat_o     : OUT    std_logic_vector (7 DOWNTO 0); -- Databus output
      wb_we_i      : IN     std_logic ;                    -- Write enable input
      wb_stb_i     : IN     std_logic ;                    -- Strobe signals / core select signal
      wb_cyc_i     : IN     std_logic ;                    -- Valid bus cycle input
      wb_ack_o     : OUT    std_logic ;                    -- Bus cycle acknowledge output
      wb_inta_o    : OUT    std_logic ;                    -- interrupt request output signal
      -- i2c lines
      scl_pad_i    : IN     std_logic ;                    -- i2c clock line input
      scl_pad_o    : OUT    std_logic ;                    -- i2c clock line output
      scl_padoen_o : OUT    std_logic ;                    -- i2c clock line output enable, active low
      sda_pad_i    : IN     std_logic ;                    -- i2c data line input
      sda_pad_o    : OUT    std_logic ;                    -- i2c data line output
      sda_padoen_o : OUT    std_logic                      -- i2c data line output enable, active low
   );
   END COMPONENT;
   COMPONENT i2c_slave
   GENERIC (
      I2C_ADDR : std_logic_vector(6 DOWNTO 0) := "1000000"
   );
   PORT (
      clk   : IN     std_ulogic ;
      rdata : IN     std_logic_vector (7 DOWNTO 0);
      rst   : IN     std_ulogic ;
      scl   : IN     std_logic ;
      WE    : OUT    std_logic ;
      start : OUT    std_ulogic ;
      wdata : OUT    std_ulogic_vector (7 DOWNTO 0);
      RE    : INOUT  std_logic ;
      sda   : INOUT  std_logic 
   );
   END COMPONENT;
   COMPONENT lk204_i2c
   GENERIC (
      I2C_CLK_PRESCALE : std_logic_vector(15 DOWNTO 0) := X"000E"
   );
   PORT (
      F8M       : IN     std_ulogic ;
      I2Cwdata  : IN     std_logic_vector (7 DOWNTO 0);
      RdI2C     : IN     std_logic ;
      Rst       : IN     std_logic ;
      WrI2C     : IN     std_logic ;
      WrStart   : IN     std_logic ;
      WrStop    : IN     std_logic ;
      wb_ack_o  : IN     std_logic ;                    -- Bus cycle acknowledge output
      wb_dat_o  : IN     std_logic_vector (7 DOWNTO 0); -- Databus output
      wb_inta_o : IN     std_logic ;                    -- interrupt request output signal
      Done      : OUT    std_logic ;
      Err       : OUT    std_logic ;
      I2Crdata  : OUT    std_logic_vector (7 DOWNTO 0);
      arst_i    : OUT    std_logic ;                    -- asynchronous reset
      wb_adr_i  : OUT    std_logic_vector (2 DOWNTO 0); -- lower address bits
      wb_cyc_i  : OUT    std_logic ;                    -- Valid bus cycle input
      wb_dat_i  : OUT    std_logic_vector (7 DOWNTO 0); -- Databus input
      wb_stb_i  : OUT    std_logic ;                    -- Strobe signals / core select signal
      wb_we_i   : OUT    std_logic                      -- Write enable input
   );
   END COMPONENT;
   COMPONENT lk204_i2c_tester
   GENERIC (
      N_ISBITS : integer range 8 downto 1 := 1
   );
   PORT (
      Done     : IN     std_logic ;
      Err      : IN     std_logic ;
      I2Crdata : IN     std_logic_vector (7 DOWNTO 0);
      wdata    : IN     std_ulogic_vector (7 DOWNTO 0);
      wdata2   : IN     std_ulogic_vector (7 DOWNTO 0);
      En       : OUT    std_ulogic_vector (N_ISBITS-1 DOWNTO 0);
      F8M      : OUT    std_ulogic ;
      I2Cwdata : OUT    std_logic_vector (7 DOWNTO 0);
      RdI2C    : OUT    std_logic ;
      Rst      : OUT    std_logic ;
      WrI2C    : OUT    std_logic ;
      WrStart  : OUT    std_logic ;
      WrStop   : OUT    std_logic ;
      scl      : INOUT  std_logic_vector (N_ISBITS-1 DOWNTO 0);
      sda      : INOUT  std_logic_vector (N_ISBITS-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : i2c_half_switch USE ENTITY idx_fpga_lib.i2c_half_switch;
   FOR ALL : i2c_master_top USE ENTITY idx_fpga_lib.i2c_master_top;
   FOR ALL : i2c_slave USE ENTITY idx_fpga_lib.i2c_slave;
   FOR ALL : lk204_i2c USE ENTITY idx_fpga_lib.lk204_i2c;
   FOR ALL : lk204_i2c_tester USE ENTITY idx_fpga_lib.lk204_i2c_tester;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_4 : i2c_half_switch
      GENERIC MAP (
         N_ISBITS => N_ISBITS
      )
      PORT MAP (
         En       => En,
         pad_o    => scl_pad_o,
         padoen_o => scl_padoen_o,
         pad_i    => pad_i,
         pad      => scl
      );
   U_5 : i2c_half_switch
      GENERIC MAP (
         N_ISBITS => N_ISBITS
      )
      PORT MAP (
         En       => En,
         pad_o    => sda_pad_o,
         padoen_o => sda_padoen_o,
         pad_i    => sda_pad_i,
         pad      => sda
      );
   U_2 : i2c_master_top
      GENERIC MAP (
         ARST_LVL => '0'         -- asynchronous reset level
      )
      PORT MAP (
         wb_clk_i     => F8M,
         wb_rst_i     => Rst,
         arst_i       => arst_i,
         wb_adr_i     => wb_adr_i,
         wb_dat_i     => wb_dat_i,
         wb_dat_o     => wb_dat_o,
         wb_we_i      => wb_we_i,
         wb_stb_i     => wb_stb_i,
         wb_cyc_i     => wb_cyc_i,
         wb_ack_o     => wb_ack_o,
         wb_inta_o    => wb_inta_o,
         scl_pad_i    => pad_i,
         scl_pad_o    => scl_pad_o,
         scl_padoen_o => scl_padoen_o,
         sda_pad_i    => sda_pad_i,
         sda_pad_o    => sda_pad_o,
         sda_padoen_o => sda_padoen_o
      );
   U_3 : i2c_slave
      GENERIC MAP (
         I2C_ADDR => "1000000"
      )
      PORT MAP (
         clk   => F8M,
         rdata => rdata1,
         rst   => Rst,
         scl   => scl(0),
         WE    => OPEN,
         start => OPEN,
         wdata => wdata,
         RE    => OPEN,
         sda   => sda(0)
      );
   U_6 : i2c_slave
      GENERIC MAP (
         I2C_ADDR => "0100000"
      )
      PORT MAP (
         clk   => F8M,
         rdata => rdata,
         rst   => Rst,
         scl   => scl(0),
         WE    => OPEN,
         start => OPEN,
         wdata => wdata2,
         RE    => OPEN,
         sda   => sda(0)
      );
   DUT : lk204_i2c
      GENERIC MAP (
         I2C_CLK_PRESCALE => X"000E"
      )
      PORT MAP (
         F8M       => F8M,
         I2Cwdata  => I2Cwdata,
         RdI2C     => RdI2C,
         Rst       => Rst,
         WrI2C     => WrI2C,
         WrStart   => WrStart,
         WrStop    => WrStop,
         wb_ack_o  => wb_ack_o,
         wb_dat_o  => wb_dat_o,
         wb_inta_o => wb_inta_o,
         Done      => Done,
         Err       => Err,
         I2Crdata  => I2Crdata,
         arst_i    => arst_i,
         wb_adr_i  => wb_adr_i,
         wb_cyc_i  => wb_cyc_i,
         wb_dat_i  => wb_dat_i,
         wb_stb_i  => wb_stb_i,
         wb_we_i   => wb_we_i
      );
   U_1 : lk204_i2c_tester
      GENERIC MAP (
         N_ISBITS => 1
      )
      PORT MAP (
         Done     => Done,
         Err      => Err,
         I2Crdata => I2Crdata,
         wdata    => wdata,
         wdata2   => wdata2,
         En       => En,
         F8M      => F8M,
         I2Cwdata => I2Cwdata,
         RdI2C    => RdI2C,
         Rst      => Rst,
         WrI2C    => WrI2C,
         WrStart  => WrStart,
         WrStop   => WrStop,
         scl      => scl,
         sda      => sda
      );

END struct;

-- VHDL Entity idx_fpga_lib.ana_s16.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:58:10 04/ 1/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ana_s16 IS
   PORT( 
      CLK     : IN     std_ulogic;
      RST     : IN     std_ulogic;
      Restart : IN     std_ulogic;
      SDI     : IN     std_ulogic;
      Start   : IN     std_ulogic;
      DO      : OUT    std_ulogic_vector (15 DOWNTO 0);
      RDY     : OUT    std_ulogic;
      SCK     : OUT    std_ulogic
   );

-- Declarations

END ana_s16 ;

--
-- VHDL Architecture idx_fpga_lib.ana_s16.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:58:10 04/ 1/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF ana_s16 IS

   -- Architecture Declarations
   SIGNAL N_Bits : unsigned(3 DOWNTO 0);  
   SIGNAL SR : std_ulogic_vector(15 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      s16_init,
      s16_idle,
      s16_lo,
      s16_hi,
      s16_st,
      s16_st2,
      s16_b0,
      s15_hi2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL DO_cld : std_ulogic_vector (15 DOWNTO 0);
   SIGNAL RDY_cld : std_ulogic ;
   SIGNAL SCK_cld : std_ulogic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK
   )
   -----------------------------------------------------------------
   BEGIN
      IF (CLK'EVENT AND CLK = '1') THEN
         IF (RST = '1') THEN
            current_state <= s16_init;
            -- Default Reset Values
            DO_cld <= (others => '0');
            RDY_cld <= '0';
            SCK_cld <= '1';
            N_Bits <= (others => '0');
            SR <= (others => '0');
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN s16_init => 
                  SCK_cld <= '1';
                  RDY_cld <= '0';
                  DO_cld <=
                   (others => '0');
               WHEN s16_idle => 
                  SCK_cld <= '1';
                  RDY_cld <= '1';
               WHEN s16_lo => 
                  SCK_cld <= '0';
                  SR(15 DOWNTO 1) <=
                        SR(14 DOWNTO 0);
                  SR(0) <= SDI;
                  N_Bits <= N_Bits-1;
               WHEN s16_hi => 
                  SCK_cld <= '1';
               WHEN s16_st => 
                  SCK_cld <= '0';
                  RDY_cld <= '0';
               WHEN s16_st2 => 
                  SCK_cld <= '1';
                  RDY_cld <= '0';
                  N_Bits <= X"F";
               WHEN s16_b0 => 
                  N_Bits <= X"F";
                  SCK_cld <= '0';
                  DO_cld(15 DOWNTO 1) <=
                        SR(14 DOWNTO 0);
                  DO_cld(0) <= SDI;
                  RDY_cld <= '1';
               WHEN s15_hi2 => 
                  SCK_cld <= '1';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      N_Bits,
      Restart,
      Start,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s16_init => 
            next_state <= s16_idle;
         WHEN s16_idle => 
            IF (Start = '1') THEN 
               next_state <= s16_st;
            ELSIF (Restart = '1') THEN 
               next_state <= s16_st2;
            ELSE
               next_state <= s16_idle;
            END IF;
         WHEN s16_lo => 
            IF (N_Bits = 13) THEN 
               next_state <= s15_hi2;
            ELSE
               next_state <= s16_hi;
            END IF;
         WHEN s16_hi => 
            IF (N_Bits = 0) THEN 
               next_state <= s16_b0;
            ELSE
               next_state <= s16_lo;
            END IF;
         WHEN s16_st => 
            next_state <= s16_st2;
         WHEN s16_st2 => 
            next_state <= s16_lo;
         WHEN s16_b0 => 
            next_state <= s16_idle;
         WHEN s15_hi2 => 
            IF (Start = '0' AND
                Restart = '0') THEN 
               next_state <= s16_lo;
            ELSE
               next_state <= s15_hi2;
            END IF;
         WHEN OTHERS =>
            next_state <= s16_init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   DO <= DO_cld;
   RDY <= RDY_cld;
   SCK <= SCK_cld;
END fsm;

-- VHDL Entity idx_fpga_lib.mock_sht21_sm.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:14:26 03/ 3/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY mock_sht21_sm IS
   GENERIC( 
      I2C_Addr : std_logic_vector(6 DOWNTO 0) := "1000000"
   );
   PORT( 
      CLK : IN     std_logic;
      SCL : IN     std_logic;
      rst : IN     std_logic;
      SDA : INOUT  std_logic
   );

-- Declarations

END mock_sht21_sm ;

--
-- VHDL Architecture idx_fpga_lib.mock_sht21_sm.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:14:26 03/ 3/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF mock_sht21_sm IS

   -- Architecture Declarations
   SIGNAL NB : unsigned(3 DOWNTO 0);  
   SIGNAL SR : std_logic_vector(7 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      i2c_0,
      i2c_1,
      i2c_2,
      i2c_3,
      i2c_ng,
      i2c_4,
      i2c_5,
      i2c_6,
      i2c_w0,
      i2c_r1,
      i2c_r2,
      i2c_r3,
      i2c_r4,
      i2c_r5,
      i2c_w1,
      i2c_w2,
      i2c_w3,
      i2c_w4,
      i2c_7,
      i2c_8
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '1') THEN
         current_state <= i2c_0;
         -- Default Reset Values
         NB <= (others => '0');
         SR <= (others => '0');
      ELSIF (CLK'EVENT AND CLK = '1') THEN
         current_state <= next_state;

         -- Combined Actions
         CASE current_state IS
            WHEN i2c_1 => 
               IF (To_X01(SCL) = '0') THEN 
                  NB <= "0000";
               END IF;
            WHEN i2c_2 => 
               IF (To_X01(SCL) = '1') THEN 
                  SR <= SR(6 DOWNTO 0) & To_X01(SDA);
                  NB <= NB + 1;
               END IF;
            WHEN i2c_6 => 
               IF (To_X01(SCL) = '0' AND SR(0) = '0') THEN 
               ELSIF (To_X01(SCL) = '0' AND
                      SR(0) = '1') THEN 
                  SR <= X"55";
                  NB <= "0000";
               END IF;
            WHEN i2c_w0 => 
               IF (To_X01(SCL) = '1') THEN 
                  SR <= SR(6 DOWNTO 0) & To_X01(SDA);
                  NB <= NB + 1;
               END IF;
            WHEN i2c_r1 => 
               IF (To_X01(SCL) = '1') THEN 
                  NB <= NB+1;
               END IF;
            WHEN i2c_r2 => 
               IF (To_X01(SCL) = '0' AND
                    NB /= 8) THEN 
                  SR <= SR(6 DOWNTO 0) & '0';
               END IF;
            WHEN i2c_r4 => 
               IF (To_X01(SCL) = '0') THEN 
                  NB <= "0000";
                  SR <= X"AA";
               END IF;
            WHEN i2c_8 => 
               IF (To_X01(SCL) = '0') THEN 
                  NB <= "0000";
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      NB,
      SCL,
      SDA,
      SR,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN i2c_0 => 
            IF (To_X01(SCL) = '1' AND To_X01(SDA) = '0') THEN 
               next_state <= i2c_1;
            ELSE
               next_state <= i2c_0;
            END IF;
         WHEN i2c_1 => 
            IF (To_X01(SCL) = '0') THEN 
               next_state <= i2c_2;
            ELSE
               next_state <= i2c_1;
            END IF;
         WHEN i2c_2 => 
            IF (To_X01(SCL) = '1') THEN 
               next_state <= i2c_3;
            ELSE
               next_state <= i2c_2;
            END IF;
         WHEN i2c_3 => 
            IF (To_X01(SCL) = '0' AND
                 NB /= 8) THEN 
               next_state <= i2c_2;
            ELSIF (To_X01(SCL) = '0' AND NB = 8) THEN 
               next_state <= i2c_4;
            ELSE
               next_state <= i2c_3;
            END IF;
         WHEN i2c_ng => 
            IF (To_X01(SCL) = '1' AND To_X01(SDA) = '1') THEN 
               next_state <= i2c_0;
            ELSE
               next_state <= i2c_ng;
            END IF;
         WHEN i2c_4 => 
            IF (SR(7 DOWNTO 1) /=
                 "1000000") THEN 
               next_state <= i2c_ng;
            ELSIF (SR(7 DOWNTO 1)
                    = I2C_Addr) THEN 
               next_state <= i2c_5;
            ELSE
               next_state <= i2c_4;
            END IF;
         WHEN i2c_5 => 
            IF (To_X01(SCL) = '1') THEN 
               next_state <= i2c_6;
            ELSE
               next_state <= i2c_5;
            END IF;
         WHEN i2c_6 => 
            IF (To_X01(SCL) = '0' AND SR(0) = '0') THEN 
               next_state <= i2c_7;
            ELSIF (To_X01(SCL) = '0' AND
                   SR(0) = '1') THEN 
               next_state <= i2c_r1;
            ELSE
               next_state <= i2c_6;
            END IF;
         WHEN i2c_w0 => 
            IF (To_X01(SCL) = '1') THEN 
               next_state <= i2c_w1;
            ELSE
               next_state <= i2c_w0;
            END IF;
         WHEN i2c_r1 => 
            IF (To_X01(SCL) = '1') THEN 
               next_state <= i2c_r2;
            ELSE
               next_state <= i2c_r1;
            END IF;
         WHEN i2c_r2 => 
            IF (To_X01(SCL) = '0' AND
                 NB /= 8) THEN 
               next_state <= i2c_r1;
            ELSIF (To_X01(SCL) = '0' AND
                   NB = 8) THEN 
               next_state <= i2c_r3;
            ELSE
               next_state <= i2c_r2;
            END IF;
         WHEN i2c_r3 => 
            IF (To_X01(SCL) = '1' AND To_X01(SDA) = '0') THEN 
               next_state <= i2c_r4;
            ELSIF (To_X01(SCL) = '1' AND To_X01(SDA) /= '0') THEN 
               next_state <= i2c_r5;
            ELSE
               next_state <= i2c_r3;
            END IF;
         WHEN i2c_r4 => 
            IF (To_X01(SCL) = '0') THEN 
               next_state <= i2c_r1;
            ELSE
               next_state <= i2c_r4;
            END IF;
         WHEN i2c_r5 => 
            IF (To_X01(SCL) = '0') THEN 
               next_state <= i2c_ng;
            ELSE
               next_state <= i2c_r5;
            END IF;
         WHEN i2c_w1 => 
            IF (To_X01(SCL) = '0' AND
                 NB /= 8) THEN 
               next_state <= i2c_w0;
            ELSIF (To_X01(SCL) = '0' AND
                   NB = 8) THEN 
               next_state <= i2c_w2;
            ELSE
               next_state <= i2c_w1;
            END IF;
         WHEN i2c_w2 => 
            IF (To_X01(SCL) = '1') THEN 
               next_state <= i2c_w3;
            ELSE
               next_state <= i2c_w2;
            END IF;
         WHEN i2c_w3 => 
            IF (To_X01(SCL) = '0') THEN 
               next_state <= i2c_w4;
            ELSE
               next_state <= i2c_w3;
            END IF;
         WHEN i2c_w4 => 
            IF (To_X01(SCL) = '1' AND To_X01(SDA) = '1') THEN 
               next_state <= i2c_1;
            ELSIF (To_X01(SCL) = '1' AND To_X01(SDA) /= '1') THEN 
               next_state <= i2c_ng;
            ELSE
               next_state <= i2c_w4;
            END IF;
         WHEN i2c_7 => 
            IF (To_X01(SCL) = '1' AND To_X01(SDA) = '0') THEN 
               next_state <= i2c_ng;
            ELSIF (To_X01(SCL) = '1' AND To_X01(SDA) = '1') THEN 
               next_state <= i2c_8;
            ELSE
               next_state <= i2c_7;
            END IF;
         WHEN i2c_8 => 
            IF (To_X01(SCL) = '0') THEN 
               next_state <= i2c_w0;
            ELSE
               next_state <= i2c_8;
            END IF;
         WHEN OTHERS =>
            next_state <= i2c_0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      NB,
      SCL,
      SR,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      SDA <= 'Z';

      -- Combined Actions
      CASE current_state IS
         WHEN i2c_0 => 
            SDA <= 'Z';
         WHEN i2c_4 => 
            IF (SR(7 DOWNTO 1) /=
                 "1000000") THEN 
            ELSIF (SR(7 DOWNTO 1)
                    = I2C_Addr) THEN 
               SDA <= '0';
            END IF;
         WHEN i2c_5 => 
            SDA <= '0';
         WHEN i2c_6 => 
            SDA <= '0';
            IF (To_X01(SCL) = '0' AND SR(0) = '0') THEN 
               SDA <= 'Z';
            END IF;
         WHEN i2c_r1 => 
            SDA <= SR(7);
         WHEN i2c_r2 => 
            SDA <= SR(7);
            IF (To_X01(SCL) = '0' AND
                 NB /= 8) THEN 
            ELSIF (To_X01(SCL) = '0' AND
                   NB = 8) THEN 
               SDA <= 'Z';
            END IF;
         WHEN i2c_w1 => 
            IF (To_X01(SCL) = '0' AND
                 NB /= 8) THEN 
            ELSIF (To_X01(SCL) = '0' AND
                   NB = 8) THEN 
               SDA <= '0';
            END IF;
         WHEN i2c_w2 => 
            SDA <= '0';
         WHEN i2c_w3 => 
            SDA <= '0';
            IF (To_X01(SCL) = '0') THEN 
               SDA <= 'Z';
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;

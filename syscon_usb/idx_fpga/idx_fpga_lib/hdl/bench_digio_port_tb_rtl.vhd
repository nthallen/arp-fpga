--
-- VHDL Test Bench idx_fpga_lib.bench_DigIO_Port.DigIO_Port_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 11:50:05 09/22/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_DigIO_Port IS
END bench_DigIO_Port;


LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_DigIO_Port IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL D      : std_logic_vector(7 DOWNTO 0);
   SIGNAL IO     : std_logic_vector(7 DOWNTO 0);
   SIGNAL ConnEn : std_ulogic;
   SIGNAL PortEn : std_ulogic;
   SIGNAL RS     : std_ulogic;
   SIGNAL RA     : std_ulogic;
   SIGNAL Dir_In : std_logic;
   SIGNAL Dir_Out : std_logic;
   SIGNAL CfgEn  : std_ulogic;
   SIGNAL WrEn   : std_ulogic;
   SIGNAL RdEn   : std_ulogic;
   SIGNAL Clk    : std_ulogic;


   -- Component declarations
   COMPONENT DigIO_Port
      PORT (
         D      : INOUT  std_logic_vector(7 DOWNTO 0);
         IO     : INOUT  std_logic_vector(7 DOWNTO 0);
         ConnEn : IN     std_ulogic;
         PortEn : IN     std_ulogic;
         RS     : IN     std_ulogic;
         RA     : IN     std_ulogic;
         Dir_In : IN     std_logic;
         Dir_Out : OUT   std_logic;
         CfgEn  : IN     std_ulogic;
         WrEn   : IN     std_ulogic;
         RdEn   : IN     std_ulogic;
         Clk    : IN     std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUTDigIO_Port : DigIO_Port USE ENTITY idx_fpga_lib.DigIO_Port;
   -- pragma synthesis_on

BEGIN

   DUTDigIO_Port : DigIO_Port
      PORT MAP (
         D      => D,
         IO     => IO,
         ConnEn => ConnEn,
         PortEn => PortEn,
         RS     => RS,
         RA     => RA,
         Dir_In => Dir_In,
         Dir_Out => Dir_Out,
         CfgEn  => CfgEn,
         WrEn   => WrEn,
         RdEn   => RdEn,
         Clk    => Clk
      );

  clock : Process
  Begin
    for i in 0 to 40 loop
      Clk <= '0';
      -- pragma synthesis_off
      wait for 62.5 ns;
      Clk <= '1';
      wait for 62.5 ns;
      -- pragma synthesis_on
    end loop;
    -- pragma synthesis_off
    wait;
    -- pragma synthesis_on
  End Process;
  
  testproc : Process
  Begin
    D <= (others => 'Z');
    IO <= (others => 'Z');
    ConnEn <= '0';
    PortEn <= '0';
    RS <= '0';
    RA <= '0';
    Dir_In <= '1';
    CfgEn <= '0';
    WrEn <= '0';
    RdEn <= '0';
    
    -- pragma synthesis_off
    -- test synch reset
    RS <= '1';
    ConnEn <= '1';
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    WrEn <= '1';
    wait until Clk'Event AND Clk = '1';
    wait for 10 ns;
    WrEn <= '0';
    RS <= '0';
    wait until Clk'Event AND Clk = '1';
    
    -- configure for output
    CfgEn <= '1';
    Dir_in <= '0';
    wait until Clk'Event AND Clk = '1';
    wait for 10 ns;
    WrEn <= '1';
    wait until Clk'Event AND Clk = '1';
    wait for 10 ns;
    assert IO = X"00" report "IO not driven" severity error;
    WrEn <= '0';
    CfgEn <= '0';
    wait until Clk'Event AND Clk = '1';
    
    -- write and read
    D <= X"55";
    PortEn <= '1';
    wait until Clk'Event AND Clk = '1';
    WrEn <= '1';
    wait until Clk'Event AND Clk = '1';
    wait for 10 ns;
    assert IO = X"55" report "IO not updated" severity error;
    WrEn <= '0';
    D <= (others => 'Z');
    wait until Clk'Event AND Clk = '1';
    RdEn <= '1';
    wait for 20 ns;
    assert D = X"55" report "D not updated" severity error;
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    RdEn <= '0';
    PortEn <= '0';
    wait until Clk'Event AND Clk = '1';
    for i in 0 to 7 loop
      assert D(i) = 'Z' report "D not floating" severity error;
    end loop;
   
    -- configure for input
    Dir_in <= '1';
    CfgEn <= '1';
    wait until Clk'Event AND Clk = '1';
    WrEn <= '1';
    wait until Clk'Event AND Clk = '1';
    wait for 40 ns;
    for i in 0 to 7 loop
      assert IO(i) = 'Z' report "IO not floating" severity error;
    end loop;
    WrEn <= '0';
    CfgEn <= '0';
    wait until Clk'Event AND Clk = '1';
    
    IO <= X"AA";
    PortEn <= '1';
    RdEn <= '1';
    wait for 40 ns;
    assert D = X"AA" report "D not reading IO" severity error;
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    RdEn <= '0';
    wait for 40 ns;
    for i in 0 to 7 loop
      assert D(i) = 'Z' report "D not floating" severity error;
    end loop;
    PortEn <= '0';
    
    -- test asynch reset
    IO <= (others => 'Z');
    Dir_in <= '0';
    CfgEn <= '1';
    wait until Clk'Event AND Clk = '1';
    WrEn <= '1';
    wait until Clk'Event AND Clk = '1';
    WrEn <= '0';
    CfgEn <= '0';
    wait for 40 ns;
    assert IO = X"55" report "IO not driven" severity error;
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    RA <= '1';
    wait until Clk'Event AND Clk = '1';
    wait for 40 ns;
    for i in 0 to 7 loop
      assert IO(i) = 'Z' report "IO not floating" severity error;
    end loop;

    wait;
    -- pragma synthesis_on
  End Process;

END rtl;
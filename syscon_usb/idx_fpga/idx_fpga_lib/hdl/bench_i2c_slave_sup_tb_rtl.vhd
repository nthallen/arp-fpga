--
-- VHDL Test Bench idx_fpga_lib.bench_i2c_slave_sup.i2c_slave_sup_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 09:58:16 03/ 4/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_i2c_slave_sup IS
END bench_i2c_slave_sup;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;


ARCHITECTURE rtl OF bench_i2c_slave_sup IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL clk    : std_logic;
   SIGNAL err    : std_ulogic;
   SIGNAL rst    : std_logic;
   SIGNAL scl_in : std_logic;
   SIGNAL sda_in : std_logic;
   SIGNAL start  : std_ulogic;
   SIGNAL stop   : std_ulogic;
   SIGNAL Done   : std_ulogic;


   -- Component declarations
   COMPONENT i2c_slave_sup
      PORT (
         clk    : IN     std_logic;
         err    : OUT    std_ulogic;
         rst    : IN     std_logic;
         scl_in : IN     std_logic;
         sda_in : IN     std_logic;
         start  : OUT    std_ulogic;
         stop   : OUT    std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR dut_i2c_slave_sup : i2c_slave_sup USE ENTITY idx_fpga_lib.i2c_slave_sup;
   -- pragma synthesis_on

BEGIN

         dut_i2c_slave_sup : i2c_slave_sup
            PORT MAP (
               clk    => clk,
               err    => err,
               rst    => rst,
               scl_in => scl_in,
               sda_in => sda_in,
               start  => start,
               stop   => stop
            );


  clock : Process
  Begin
    clk <= '0';
    -- pragma synthesis_off
    wait for 40 ns;
    while Done = '0' loop
      clk <= '0';
      wait for 62 ns;
      clk <= '1';
      wait for 63 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;


  test_proc : Process Is
  Begin
    scl_in <= 'H';
    sda_in <= 'H';
    Done <= '0';
    rst <= '1';
    -- pragma synthesis_off
    wait until clk'Event AND clk = '1';
    rst <= '0';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    wait until clk'Event AND clk = '1';
    sda_in <= '0';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    scl_in <= '0';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '1' report "Start not set" severity error;
    assert stop = '0' report "Stop set" severity error;
    wait until clk'Event AND clk = '1';
    sda_in <= 'H';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    scl_in <= 'H';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    scl_in <= '0';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    sda_in <= '0';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    scl_in <= 'H';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    scl_in <= '0';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    scl_in <= 'H';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '0' report "Stop set" severity error;
    sda_in <= 'H';
    wait until clk'Event AND clk = '1';
    wait until clk'Event AND clk = '1';
    assert start = '0' report "Start set" severity error;
    assert stop = '1' report "Stop not set" severity error;
    Done <= '1';
    wait;
    -- pragma synthesis_on
  End Process;

END rtl;
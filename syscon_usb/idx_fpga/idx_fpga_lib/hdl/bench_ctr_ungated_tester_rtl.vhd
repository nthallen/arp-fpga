--
-- VHDL Test Bench idx_fpga_lib.bench_ctr_ungated_tester.bench_ctr_ungated_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:33:48 10/ 4/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
-- USE ieee.numeric_std.all; -- for division


ENTITY bench_ctr_ungated_tester IS
   GENERIC (
      BASE_ADDRESS : std_logic_vector (15 DOWNTO 0) := X"0600";
      N_COUNTERS   : integer range 4 DOWNTO 4       := 4;
      N_BITS       : integer range 32 DOWNTO 16     := 20
   );
   PORT (
      Addr   : OUT    std_logic_vector(15 DOWNTO 0);
      Data   : INOUT  std_logic_vector(15 DOWNTO 0);
      ExpRd  : OUT    std_ulogic;
      ExpWr  : OUT    std_ulogic;
      ExpAck : IN     std_ulogic;
      F8M    : OUT    std_ulogic;
      rst    : OUT    std_ulogic;
      PMT    : OUT    std_logic_vector(N_COUNTERS-1 DOWNTO 0)
   );
END bench_ctr_ungated_tester;


LIBRARY idx_fpga_lib;

ARCHITECTURE rtl OF bench_ctr_ungated_tester IS
   -- Architecture declarations
   type iarray is array(natural range <>) of integer;
   SIGNAL Period : iarray(N_COUNTERS-1 DOWNTO 0);
   SIGNAL Done : std_ulogic;
   SIGNAL Read_Result : std_logic_vector(15 DOWNTO 0);
   type iarray32 is array(natural range <>) of unsigned(31 downto 0);
   SIGNAL Read_Count : iarray32(N_COUNTERS-1 DOWNTO 0);
BEGIN

    clock : Process
    Begin
      F8M <= '0';
      -- pragma synthesis_off
      wait for 40 ns;
      while Done = '0' loop
        F8M <= '0';
        wait for 62 ns;
        F8M <= '1';
        wait for 63 ns;
      end loop;
      wait;
      -- pragma synthesis_on
    End Process;
    
    PMTs : for i in N_COUNTERS-1 DOWNTO 0 generate
      pmt_pulses : Process
        -- pragma synthesis_off
        Variable cumdelay : integer; -- unsigned(19 DOWNTO 0);
        -- pragma synthesis_on
      Begin
        PMT(i) <= '0';
        -- pragma synthesis_off
        wait for 400 ns;
        while Done = '0' loop
          PMT(i) <= '1';
          wait for 5 ns;
          PMT(i) <= '0';
          
          -- Now a kluge to wait for a programmed amount of
          -- time. Extra code to break out of these loops
          -- when RegEn goes high so the next integration
          -- period will start cleanly.
          cumdelay := 5;
          while cumdelay+500 <= Period(i) loop
            wait for 500 ns;
            cumdelay := cumdelay+500;
          end loop;
          while cumdelay+50 <= Period(i) loop
            wait for 50 ns;
            cumdelay := cumdelay+50;
          end loop;
          while cumdelay+5 <= Period(i) loop
            wait for 5 ns;
            cumdelay := cumdelay+5;
          end loop;
        end loop;
        wait;
        -- pragma synthesis_on
      End Process;
    End Generate;
   
    test_proc : Process
    
      procedure sbrd( addr_in : std_logic_vector (15 DOWNTO 0) ) is
      begin
        Addr <= addr_in;
        -- pragma synthesis_off
        wait for 125 ns;
        ExpRd <= '1';
        wait for 1 us;
        assert ExpAck = '1' report "No Acknowledge on read" severity error;
        Read_Result <= Data;
        ExpRd <= '0';
        wait for 125 ns;
        -- pragma synthesis_on
        return;
      end procedure sbrd;

      procedure sbwr( Addr_In : IN std_logic_vector (15 downto 0);
                      Data_In : IN std_logic_vector (15 downto 0) ) is
      begin
        Addr <= Addr_In;
        Data <= Data_in;
        -- pragma synthesis_off
        wait for 40 ns;
        ExpWr <= '1';
        wait for 1 us;
        assert ExpAck = '1' report "No acknowledge on write" severity error;
        ExpWr <= '0';
        wait for 250 ns;
        Data <= (others => 'Z');
        -- pragma synthesis_on
        return;
      end procedure sbwr;
    
      procedure sbrd_check(
          addr_in : std_logic_vector (15 DOWNTO 0);
          expected : std_logic_vector(15 DOWNTO 0);
          Tstr : IN string ) is
      begin
        Addr <= addr_in;
        -- pragma synthesis_off
        wait for 125 ns;
        ExpRd <= '1';
        wait for 1 us;
        assert ExpAck = '1' report Tstr & ": No Acknowledge on read" severity error;
        assert Data = expected report Tstr & ": Read did not match expected"
            severity error;
        ExpRd <= '0';
        wait for 125 ns;
        -- pragma synthesis_on
        return;
      end procedure sbrd_check;
      
      Procedure set_periods( p0 : integer; p1 : integer;
            p2 : integer; p3 : integer ) is
      Begin
        Period(0) <= p0;
        Period(1) <= p1;
        Period(2) <= p2;
        Period(3) <= p3;
        return;
      End Procedure;

      Procedure confirm(
          L2exp : std_ulogic;
          ReSynchExp : std_ulogic;
          PerMul : integer ) is
        -- pragma synthesis_off
        type uarray is array(natural range <>) of natural;
        Variable exp_stat : std_logic_vector(15 DOWNTO 0);
        Variable rate : uarray(N_COUNTERS DOWNTO 0);
        Variable full_cnt : natural;
        Variable read_cnt : unsigned (31 downto 0);
        Variable low_word : integer;
        Variable high_word : integer;
        Variable AddrU : unsigned(15 DOWNTO 0);
        -- pragma synthesis_on
      Begin
        -- pragma synthesis_off
        exp_stat := (others => '0');
        exp_stat(11 DOWNTO 8) := X"F"; -- one second integeration
        if PerMul /= 0 then
          for i in N_COUNTERS-1 DOWNTO 0 loop
            rate(i) := ((125*10**6)*PerMul)/Period(i);
            if rate(i) >= 2**N_BITS then
              exp_stat(i) := '1';
            end if;
            if rate(i) >= 2**16 then
              exp_stat(i+N_COUNTERS) := '1';
            end if;
          end loop;
        end if;
        exp_stat(14) := L2exp;
        exp_stat(15) := ReSynchExp;
        sbrd( BASE_ADDRESS );
        if PerMul = 0 then
          exp_stat(7 downto 0) := Read_Result(7 downto 0);
        end if;
        assert Read_Result = exp_stat report "Status value incorrect"
          severity error;
        for i in N_COUNTERS-1 DOWNTO 0 loop
          full_cnt := rate(i) mod (2**N_BITS);
          for j in 0 to 15 loop
            AddrU(j) := BASE_ADDRESS(j);
          end loop;
          sbrd(conv_std_logic_vector(AddrU+16+i*4,16));
          for j in 0 to 15 loop
            read_cnt(j) := Read_Result(j);
          end loop;
          sbrd(conv_std_logic_vector(AddrU+18+i*4,16));
          for j in 0 to 15 loop
            read_cnt(j+16) := Read_Result(j);
          end loop;
          Read_Count(i) <= read_cnt;
          -- high_word := to_integer(full_cnt / (2**16));
          -- low_word := to_integer(full_cnt mod (2**16));
          -- sbrd_check(std_logic_vector(unsigned(BASE_ADDRESS) + 16 + i*4),
          --   std_logic_vector(to_unsigned(low_word,16)), "Low Word");
          -- sbrd_check(std_logic_vector(unsigned(BASE_ADDRESS) + 18 + i*4),
          --   std_logic_vector(to_unsigned(high_word,16)), "High Word");
          if PerMul /= 0 then
            assert conv_integer(read_cnt) = full_cnt
              OR conv_integer(read_cnt) = full_cnt+1
              OR conv_integer(read_cnt+1) = full_cnt
              report "Count value incorrect"
              severity error;
          end if;
        end loop;
        -- pragma synthesis_on
        return;
      End Procedure confirm;
      
      Procedure noconfirm is
        Variable AddrU : unsigned(15 DOWNTO 0);
      Begin
        sbrd(BASE_ADDRESS);
        for i in N_COUNTERS-1 DOWNTO 0 loop
          for j in 0 to 15 loop
            AddrU(j) := BASE_ADDRESS(j);
          end loop;
          sbrd(conv_std_logic_vector(AddrU+16+i*4,16));
          sbrd(conv_std_logic_vector(AddrU+18+i*4,16));
        end loop;
        return;
      End Procedure noconfirm;
    Begin
      Done <= '0';
      Addr <= (others => '0');
      Data <= (others => 'Z');
      ExpRd <= '0';
      ExpWr <= '0';
      rst <= '1';
      -- pragma synthesis_off
      wait for 300 ns;
      rst <= '0';
      -- program the integration period
      set_periods(100000,50000,33330,25000);
      sbwr(BASE_ADDRESS, X"0F00");
      wait for 1750 ms;
      confirm('0','0',0);
      wait for 1 sec;
      confirm('1','1',8);
      wait for 1 sec;
      confirm('0', '0', 8);
      set_periods(15250, 8000, 4000, 2000);
      wait for 1 sec;
      confirm('0', '0', 0);
      wait for 1 sec;
      confirm('0', '0', 8);
      set_periods(2000, 1000, 800, 700);
      wait for 1 sec;
      confirm('0', '0', 0);
      wait for 1 sec;
      confirm('0', '0', 8);
      set_periods(100000,50000,33330,25000);
      wait for 500 ms;
      confirm('0', '0', 0);
      wait for 1 sec;
      confirm('0', '1', 0);
      wait for 1 sec;
      confirm('0', '0', 8);
      Done <= '1';
      wait;
      -- pragma synthesis_on
    End Process;

END rtl;

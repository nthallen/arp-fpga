--
-- VHDL Test Bench idx_fpga_lib.bench_fifo.fifo_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:20:45 08/22/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;


ENTITY bench_fifo IS
   GENERIC (
      FIFO_WIDTH  : integer range 16 downto 1  := 8;
      FIFO_LENGTH : integer range 255 downto 1 := 5
   );
END bench_fifo;


LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_fifo IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL WData : std_logic_vector(FIFO_WIDTH-1 DOWNTO 0);
   SIGNAL WE    : std_logic;
   SIGNAL RE    : std_logic;
   SIGNAL Clk   : std_ulogic;
   SIGNAL Rst   : std_logic;
   SIGNAL RData : std_logic_vector(FIFO_WIDTH-1 DOWNTO 0);
   SIGNAL Empty : std_logic;
   SIGNAL Full  : std_logic;
   SIGNAL Done  : std_ulogic;


   -- Component declarations
   COMPONENT fifo
      GENERIC (
         FIFO_WIDTH  : integer range 16 downto 1  := 1;
         FIFO_LENGTH : integer range 255 downto 1 := 1
      );
      PORT (
         WData : IN     std_logic_vector(FIFO_WIDTH-1 DOWNTO 0);
         WE    : IN     std_logic;
         RE    : IN     std_logic;
         Clk   : IN     std_ulogic;
         Rst   : IN     std_logic;
         RData : OUT    std_logic_vector(FIFO_WIDTH-1 DOWNTO 0);
         Empty : OUT    std_logic;
         Full  : OUT    std_logic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR U_0 : fifo USE ENTITY idx_fpga_lib.fifo(beh);
   -- pragma synthesis_on

BEGIN

   U_0 : fifo
      GENERIC MAP (
         FIFO_WIDTH  => FIFO_WIDTH,
         FIFO_LENGTH => FIFO_LENGTH
      )
      PORT MAP (
         WData => WData,
         WE    => WE,
         RE    => RE,
         Clk   => Clk,
         Rst   => Rst,
         RData => RData,
         Empty => Empty,
         Full  => Full
      );


  clock : Process
  Begin
    Clk <= '0';
    -- pragma synthesis_off
    wait for 40 ns;
    while Done = '0' loop
      Clk <= '0';
      wait for 62 ns;
      Clk <= '1';
      wait for 63 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;
  
  wproc : Process
  Begin
    Done <= '0';
    WE <= '0';
    RE <= '0';
    WData <= X"00";
    Rst <= '1';
    -- pragma synthesis_off
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    Rst <= '0';
    wait until Clk'Event AND Clk = '1';
    assert Empty = '1' AND Full = '0'
      report "Empty or Full did correct on init"
      severity error;

    for i in 1 to FIFO_LENGTH loop
      WData <= conv_std_logic_vector(i,8);
      WE <= '1';
      assert Full = '0'
        report "Full should be 0 before write"
        severity error;
      wait until Clk'Event AND Clk = '1';
      WE <= '0';
      -- wait until Clk'Event AND Clk = '1';
      wait for 10 ns;
      assert RData = X"01"
        report "Initial readback incorrect"
        severity error;
      assert Empty = '0'
        report "Empty should be 0 after write"
        severity error;
    end loop;
    assert Full = '1'
      report "Full should be asserted after write loop"
      severity error;

    for i in 1 to FIFO_LENGTH loop
      assert RData = conv_std_logic_vector(i,8)
        report "RData value incorrect"
        -- report "RData expected: " & to_hstring(conv_std_ulogic_vector(i,8)) &
        --   " Observerd; " & to_hstring(std_ulogic_vector(RData))
        severity error;
      assert Empty = '0'
        report "Empty should be 0 before read"
        severity error;
      RE <= '1';
      wait until Clk'Event AND Clk = '1';
      RE <= '0';
      wait for 1 ns;
      assert Full = '0'
        report "Full should be 0 after read"
        severity error;
      -- wait until Clk'Event AND Clk = '1';
    end loop;
    assert Empty = '1' AND Full = '0'
      report "Empty or Full incorrect after read loop"
      severity error;

    for i in 1 to FIFO_LENGTH loop
      WData <= conv_std_logic_vector(i,8);
      WE <= '1';
      assert Full = '0'
        report "Full should be 0 before write"
        severity error;
      wait until Clk'Event AND Clk = '1';
      WE <= '0';
      -- wait until Clk'Event AND Clk = '1';
      wait for 10 ns;
      assert RData = X"01"
        report "Initial readback incorrect"
        severity error;
      assert Empty = '0'
        report "Empty should be 0 after write"
        severity error;
    end loop;
    assert Full = '1'
      report "Full should be asserted after write loop"
      severity error;

    WE <= '1';
    WData <= X"06";
    RE <= '1';
    wait until Clk'Event AND Clk = '1';
    wait for 1 ns;
    assert Full = '1' AND Empty = '0'
      report "Empty or not Full after RW on Full"
      severity error;
    assert RData = X"02"
      report "RData not 02 after one read"
      severity error;
    WE <= '0';
    wait until Clk'Event AND Clk = '1';
    wait for 1 ns;
    assert Full = '0' AND Empty = '0'
      report "Empty or Full after R on Full"
      severity error;
    assert RData = X"03"
      report "RData not 03 after two reads"
      severity error;
    WE <= '1';
    WData <= X"07";
    wait until Clk'Event AND Clk = '1';
    wait for 1 ns;
    assert Full = '0' AND Empty = '0'
      report "Empty or Full after R"
      severity error;
    assert RData = X"04"
      report "RData not 04 after three reads"
      severity error;
    WE <= '0';
    wait until Clk'Event AND Clk = '1';
    WE <= '1';
    WData <= X"08";
    wait until Clk'Event AND Clk = '1';
    WE <= '0';
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    wait until Clk'Event AND Clk = '1';
    -- Throw in a read on empty
    wait until Clk'Event AND Clk = '1';
    RE <= '0';
    wait until Clk'Event AND Clk = '1';

    -- Now fill up once more, then attempt to overfill    
    for i in 1 to FIFO_LENGTH loop
      WData <= conv_std_logic_vector(i,8);
      WE <= '1';
      assert Full = '0'
        report "Full should be 0 before write"
        severity error;
      wait until Clk'Event AND Clk = '1';
      WE <= '0';
      -- wait until Clk'Event AND Clk = '1';
      wait for 1 ns;
      assert RData = X"01"
        report "Initial readback incorrect"
        severity error;
      assert Empty = '0'
        report "Empty should be 0 after write"
        severity error;
    end loop;
    assert Full = '1'
      report "Full should be asserted after write loop"
      severity error;
    WE <= '1';
    WData <= conv_std_logic_vector(FIFO_LENGTH+1,8);
    wait until Clk'Event AND Clk = '1';
    WE <= '0';
    
    -- and drain it again.
    for i in 1 to FIFO_LENGTH loop
      assert RData = conv_std_logic_vector(i,8)
        report "RData value incorrect"
        -- report "RData expected: " & to_hstring(conv_std_ulogic_vector(i,8)) &
        --   " Observerd; " & to_hstring(std_ulogic_vector(RData))
        severity error;
      assert Empty = '0'
        report "Empty should be 0 before read"
        severity error;
      RE <= '1';
      wait until Clk'Event AND Clk = '1';
      RE <= '0';
      wait for 1 ns;
      assert Full = '0'
        report "Full should be 0 after read"
        severity error;
      -- wait until Clk'Event AND Clk = '1';
    end loop;
    assert Empty = '1' AND Full = '0'
      report "Empty or Full incorrect after read loop"
      severity error;
   
  
    Done <= '1';
    wait;
    -- pragma synthesis_on
  End Process;

END rtl;
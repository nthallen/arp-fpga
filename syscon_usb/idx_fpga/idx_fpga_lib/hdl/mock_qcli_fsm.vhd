-- VHDL Entity idx_fpga_lib.mock_qcli.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 16:06:03 01/ 3/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;

ENTITY mock_qcli IS
   PORT( 
      F8M    : IN     std_logic;
      QSync  : IN     std_ulogic;
      rst    : IN     std_logic;
      QSClk  : INOUT  std_logic;
      QSData : INOUT  std_logic
   );

-- Declarations

END mock_qcli ;

--
-- VHDL Architecture idx_fpga_lib.mock_qcli.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 16:06:03 01/ 3/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF mock_qcli IS

   -- Architecture Declarations
   SIGNAL BitCnt : std_logic_vector(4 DOWNTO 0);  
   SIGNAL OBit : std_logic;  
   SIGNAL Sreg : std_logic_vector(15 DOWNTO 0);  
   SIGNAL WordCnt : std_logic_vector(7 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      mq0,
      mq1,
      mq2,
      mq3,
      mq4,
      mq5,
      mq6,
      mq7,
      mq8
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(6 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(6 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_mq5 : std_logic;
   SIGNAL csm_to_mq6 : std_logic;
   SIGNAL csm_to_mq7 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= mq0;
            csm_timer <= (OTHERS => '0');
            -- Default Reset Values
            BitCnt <= (others => '0');
            OBit <= '0';
            Sreg <= (others => '0');
            WordCnt <= (others => '0');
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;

            -- Combined Actions
            CASE current_state IS
               WHEN mq2 => 
                  Sreg(14 downto 0) <=
                     Sreg(15 downto 1);
                  if QSData = '1' then
                     Sreg(15) <= '1';
                  else
                     Sreg(15) <= '0';
                  end if;
               WHEN mq4 => 
                  BitCnt <= "10000";
                  Sreg(15 downto 8) <= WordCnt;
                  Sreg(7 downto 0) <= WordCnt;
                  WordCnt <= WordCnt + 1;
               WHEN mq8 => 
                  OBit <= Sreg(15);
                  Sreg(15 downto 1) <=
                    Sreg(14 downto 0);
                  Sreg(0) <= '0';
                  BitCnt <= BitCnt - 1;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      BitCnt,
      QSClk,
      QSync,
      csm_timeout,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_mq5 <= '0';
      csm_to_mq6 <= '0';
      csm_to_mq7 <= '0';
      CASE current_state IS
         WHEN mq0 => 
            IF (QSync = '0' AND
                QSClk /= '1') THEN 
               next_state <= mq1;
            ELSE
               next_state <= mq0;
            END IF;
         WHEN mq1 => 
            IF (QSClk = '1') THEN 
               next_state <= mq2;
            ELSIF (QSync = '1') THEN 
               next_state <= mq4;
            ELSE
               next_state <= mq1;
            END IF;
         WHEN mq2 => 
            IF (QSClk /= '1') THEN 
               next_state <= mq3;
            ELSE
               next_state <= mq2;
            END IF;
         WHEN mq3 => 
            IF (QSync = '1') THEN 
               next_state <= mq0;
            ELSIF (QSClk = '1') THEN 
               next_state <= mq2;
            ELSE
               next_state <= mq3;
            END IF;
         WHEN mq4 => 
            next_state <= mq8;
         WHEN mq5 => 
            IF (csm_timeout = '1') THEN 
               next_state <= mq6;
               csm_to_mq6 <= '1';
            ELSE
               next_state <= mq5;
            END IF;
         WHEN mq6 => 
            IF (csm_timeout = '1') THEN 
               next_state <= mq7;
               csm_to_mq7 <= '1';
            ELSE
               next_state <= mq6;
            END IF;
         WHEN mq7 => 
            IF (csm_timeout = '1' AND (BitCnt = "00000")) THEN 
               next_state <= mq0;
            ELSIF (csm_timeout = '1') THEN 
               next_state <= mq8;
            ELSE
               next_state <= mq7;
            END IF;
         WHEN mq8 => 
            next_state <= mq5;
            csm_to_mq5 <= '1';
         WHEN OTHERS =>
            next_state <= mq0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      OBit,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      QSClk <= 'Z';
      QSData <= 'Z';

      -- Combined Actions
      CASE current_state IS
         WHEN mq0 => 
            QSData <= 'Z';
            QSClk <= 'Z';
         WHEN mq5 => 
            QSData <= OBit;
         WHEN mq6 => 
            QSClk <= '1';
            QSData <= OBit;
         WHEN mq7 => 
            QSData <= OBit;
         WHEN mq8 => 
            QSData <= OBit;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_mq5,
      csm_to_mq6,
      csm_to_mq7
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_mq5 = '1') THEN
         csm_next_timer <= "0011110"; -- no cycles(31)-1=30
      ELSIF (csm_to_mq6 = '1') THEN
         csm_next_timer <= "0111111"; -- no cycles(64)-1=63
      ELSIF (csm_to_mq7 = '1') THEN
         csm_next_timer <= "0011111"; -- no cycles(32)-1=31
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;

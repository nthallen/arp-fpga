-- VHDL Entity idx_fpga_lib.qclic_wbuf.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:53:41 12/20/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;

ENTITY qclic_wbuf IS
   PORT( 
      F8M    : IN     std_logic;
      WData  : IN     std_logic_vector (15 DOWNTO 0);
      WrAck  : IN     std_logic;
      WrEn   : IN     std_ulogic;
      cmd    : IN     std_logic_vector (2 DOWNTO 0);
      rst    : IN     std_logic;
      WDataB : OUT    std_logic_vector (15 DOWNTO 0);
      WrEnB  : OUT    std_logic;
      cmdB   : OUT    std_logic_vector (2 DOWNTO 0)
   );

-- Declarations

END qclic_wbuf ;

--
-- VHDL Architecture idx_fpga_lib.qclic_wbuf.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:53:42 12/20/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF qclic_wbuf IS

   TYPE STATE_TYPE IS (
      wb0,
      wb1,
      wb2,
      wb3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL WDataB_cld : std_logic_vector (15 DOWNTO 0);
   SIGNAL WrEnB_cld : std_logic ;
   SIGNAL cmdB_cld : std_logic_vector (2 DOWNTO 0);

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= wb0;
            -- Default Reset Values
            WDataB_cld <= (others => '0');
            WrEnB_cld <= '0';
            cmdB_cld <= (others => '0');
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN wb0 => 
                  WrEnB_cld <= '0';
               WHEN wb1 => 
                  WDataB_cld <= WData;
                  cmdB_cld <= cmd;
                  WrEnB_cld <= '1';
               WHEN wb3 => 
                  WrEnB_cld <= '0';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      WrAck,
      WrEn,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN wb0 => 
            IF (WrEn = '1') THEN 
               next_state <= wb1;
            ELSE
               next_state <= wb0;
            END IF;
         WHEN wb1 => 
            next_state <= wb2;
         WHEN wb2 => 
            IF (WrAck = '1') THEN 
               next_state <= wb3;
            ELSE
               next_state <= wb2;
            END IF;
         WHEN wb3 => 
            IF (WrAck = '0') THEN 
               next_state <= wb0;
            ELSE
               next_state <= wb3;
            END IF;
         WHEN OTHERS =>
            next_state <= wb0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   WDataB <= WDataB_cld;
   WrEnB <= WrEnB_cld;
   cmdB <= cmdB_cld;
END fsm;

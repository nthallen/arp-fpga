--
-- VHDL Test Bench idx_fpga_lib.bench_ctr_synch.ctr_synch_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:32:54 09/30/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_ctr_synch IS
END bench_ctr_synch;


LIBRARY idx_fpga_lib;
-- USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_ctr_synch IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL RdEn        : std_ulogic;
   SIGNAL StatEn      : std_ulogic;
   SIGNAL BdEn        : std_ulogic;
   SIGNAL Lx4En       : std_ulogic;
   SIGNAL Clk         : std_ulogic;
   SIGNAL rst         : std_ulogic;
   SIGNAL CntEn       : std_ulogic;
   SIGNAL RegEn       : std_ulogic;
   SIGNAL CntClr      : std_ulogic;
   SIGNAL L2Stat      : std_ulogic;
   SIGNAL ResynchStat : std_ulogic;
   SIGNAL Done  : std_logic;
   SIGNAL LX4Done : std_logic;


   -- Component declarations
   COMPONENT ctr_synch
      PORT (
         RdEn        : IN     std_ulogic;
         StatEn      : IN     std_ulogic;
         BdEn        : IN     std_ulogic;
         Lx4En       : IN     std_ulogic;
         Clk         : IN     std_ulogic;
         rst         : IN     std_ulogic;
         CntEn       : OUT    std_ulogic;
         RegEn       : OUT    std_ulogic;
         CntClr      : OUT    std_ulogic;
         L2Stat      : OUT    std_ulogic;
         ResynchStat : OUT    std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_ctr_synch : ctr_synch USE ENTITY idx_fpga_lib.ctr_synch;
   -- pragma synthesis_on

BEGIN

   DUT_ctr_synch : ctr_synch
      PORT MAP (
         RdEn        => RdEn,
         StatEn      => StatEn,
         BdEn        => BdEn,
         Lx4En       => Lx4En,
         Clk         => Clk,
         rst         => rst,
         CntEn       => CntEn,
         RegEn       => RegEn,
         CntClr      => CntClr,
         L2Stat      => L2Stat,
         ResynchStat => ResynchStat
      );

  clock : Process
  Begin
    clk <= '0';
    -- pragma synthesis_off
    wait for 40 ns;
    while LX4Done = '0' loop
      clk <= '0';
      wait for 62.5 ns;
      clk <= '1';
      wait for 62.5 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;
  
  lx4 : Process is
  Begin
    LX4Done <= '0';
    Lx4En <= '0';
    -- pragma synthesis_off
    wait for 100 ns;
    while Done = '0' loop
      Lx4En <= '0';
      wait until clk'Event AND clk = '1';
      wait until clk'Event AND clk = '1';
      wait until clk'Event AND clk = '1';
      wait until clk'Event AND clk = '1';
      wait until clk'Event AND clk = '1';
      wait until clk'Event AND clk = '1';
      wait until clk'Event AND clk = '1';
      Lx4En <= '1';
      wait until clk'Event AND clk = '1';
    end loop;
    LX4Done <= '1';
    wait;
    -- pragma synthesis_on
  End Process;
  
  test_proc : Process

      procedure RdStat is
      begin
        -- pragma synthesis_off
        wait until clk'event and clk = '1';
        RdEn <= '1';
        StatEn <= '1';
        BdEn <= '1';
        wait until clk'event and clk = '1';
        wait until clk'event and clk = '1';
        wait until clk'event and clk = '1';
        -- pragma synthesis_on
        RdEn <= '0';
        StatEn <= '0';
        BdEn <= '0';
        return;
      end;
      
      procedure RdCtr is
      begin
        -- pragma synthesis_off
        wait until clk'event and clk = '1';
        RdEn <= '1';
        BdEn <= '1';
        wait until clk'event and clk = '1';
        wait until clk'event and clk = '1';
        wait until clk'event and clk = '1';
        -- pragma synthesis_on
        RdEn <= '0';
        BdEn <= '0';
        return;
      end;
  Begin
    Done <= '0';
    RdEn <= '0';
    StatEn  <= '0';
    BdEn    <= '0';
    rst     <= '1';
    -- pragma synthesis_off
    wait for 300 ns;
    rst <= '0';
    wait for 4000 ns;
    RdCtr;
    RdCtr;
    RdCtr;
    RdStat;
    RdCtr;
    RdCtr;
    wait for 3000 ns;
    RdStat;
    RdCtr;
    RdCtr;
    wait for 2000 ns;
    RdStat;
    RdCtr;
    RdCtr;
    RdStat;
    wait for 2000 ns;
    RdStat;
    RdCtr;
    RdCtr;
    wait for 4000 ns;
    Done <= '1';
    wait;
    -- pragma synthesis_on
  End Process;


END rtl;
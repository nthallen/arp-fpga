-- VHDL Entity idx_fpga_lib.adc_sim.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 21:07:52 05/01/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_arith.ALL;

ENTITY adc_sim IS
   PORT( 
      CS_B : IN     std_logic;
      En   : IN     std_logic;
      F8M  : IN     std_ulogic;
      MOSI : IN     std_logic;
      SCLK : IN     std_logic;
      rst  : IN     std_logic;
      MISO : OUT    std_logic
   );

-- Declarations

END adc_sim ;

--
-- VHDL Architecture idx_fpga_lib.adc_sim.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 22:09:11 05/01/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.STD_LOGIC_UNSIGNED.all;
 
ARCHITECTURE fsm OF adc_sim IS

   -- Architecture Declarations
   SIGNAL NB : unsigned(4 DOWNTO 0);  
   SIGNAL N_Reports : unsigned(31 DOWNTO 0);  
   SIGNAL OSR : std_logic_vector(31 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(9 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(9 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s1 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL MISO_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= s0;
            csm_timer <= (OTHERS => '0');
            -- Default Reset Values
            MISO_cld <= '1';
            NB <= (others => '0');
            N_Reports <= (others => '0');
            OSR <= (others => '0');
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;

            -- Combined Actions
            CASE current_state IS
               WHEN s1 => 
                  MISO_cld <= '1';
               WHEN s2 => 
                  OSR <= std_logic_vector(N_Reports);
                  N_Reports <= N_Reports + 1;
                  MISO_cld <= '0';
                  NB <= (others => '0');
               WHEN s3 => 
                  MISO_cld <= OSR(31);
               WHEN s4 => 
                  NB <= NB + 1;
                  OSR <= OSR(30 DOWNTO 0) & '0';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CS_B,
      En,
      NB,
      SCLK,
      csm_timeout,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s1 <= '0';
      CASE current_state IS
         WHEN s0 => 
            next_state <= s1;
            csm_to_s1 <= '1';
         WHEN s1 => 
            IF (csm_timeout = '1' AND (SCLK = '0'
                AND CS_B = '0'
                AND En = '1')) THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            next_state <= s3;
         WHEN s3 => 
            IF (SCLK = '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            next_state <= s5;
         WHEN s5 => 
            IF (SCLK = '0' AND
                std_logic_vector(NB) = "00000") THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSIF (SCLK = '0' AND
                   std_logic_vector(NB)
                     /= "00000") THEN 
               next_state <= s3;
            ELSE
               next_state <= s5;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s1
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s1 = '1') THEN
         csm_next_timer <= "1100011111"; -- no cycles(800)-1=799
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   MISO <= MISO_cld;
END fsm;

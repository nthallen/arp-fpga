-- VHDL Entity idx_fpga_lib.mock_9554_out.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:56:58 11/20/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;
USE ieee.std_logic_arith.all;

ENTITY mock_9554_out IS
   PORT( 
      F8M    : IN     std_ulogic;
      Rst    : IN     std_logic;
      WE     : IN     std_logic;
      start  : IN     std_ulogic;
      wdata2 : IN     std_ulogic_vector (7 DOWNTO 0);
      LEDs   : OUT    std_ulogic_vector (7 DOWNTO 0)
   );

-- Declarations

END mock_9554_out ;

--
-- VHDL Architecture idx_fpga_lib.mock_9554_out.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:56:58 11/20/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF mock_9554_out IS

   TYPE STATE_TYPE IS (
      s0,
      s2,
      s3,
      s4
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL LEDs_cld : std_ulogic_vector (7 DOWNTO 0);

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (Rst = '1') THEN
            current_state <= s0;
            -- Default Reset Values
            LEDs_cld <= X"FF";
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN s3 => 
                  LEDs_cld <= wdata2;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      WE,
      current_state,
      start,
      wdata2
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (WE = '1'
                and
                wdata2 /= X"01") THEN 
               next_state <= s4;
            ELSIF (WE = '1'
                   and
                   wdata2 = X"01") THEN 
               next_state <= s2;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s2 => 
            IF (start = '1') THEN 
               next_state <= s0;
            ELSIF (WE = '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            IF (start = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s4 => 
            IF (start = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s4;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   LEDs <= LEDs_cld;
END fsm;

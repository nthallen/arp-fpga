--
-- VHDL Test Bench idx_fpga_lib.bench_ctr_latchx4.ctr_latchx4_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 10:54:46 09/30/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_ctr_latchx4 IS
END bench_ctr_latchx4;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_ctr_latchx4 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL clk     : std_logic;
   SIGNAL Latch   : std_logic;
   SIGNAL LatchX4 : std_logic;
   SIGNAL RS      : std_logic;
   SIGNAL Done    : std_logic;
   SIGNAL LX4Done : std_logic;


   -- Component declarations
   COMPONENT ctr_latchx4
      PORT (
         clk     : IN     std_logic;
         Latch   : OUT    std_logic;
         LatchX4 : IN     std_logic;
         RS      : IN     std_logic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_ctr_latchx4 : ctr_latchx4 USE ENTITY idx_fpga_lib.ctr_latchx4(fsm);
   -- pragma synthesis_on

BEGIN

   DUT_ctr_latchx4 : ctr_latchx4
      PORT MAP (
         clk     => clk,
         Latch   => Latch,
         LatchX4 => LatchX4,
         RS      => RS
      );

    clock : Process
    Begin
      clk <= '0';
      -- pragma synthesis_off
      wait for 40 ns;
      while LX4Done = '0' loop
        clk <= '0';
        wait for 62.5 ns;
        clk <= '1';
        wait for 62.5 ns;
      end loop;
      wait;
      -- pragma synthesis_on
    End Process;
    
    lx4 : Process is
    Begin
      LX4Done <= '0';
      LatchX4 <= '0';
      -- pragma synthesis_off
      wait for 100 ns;
      while Done = '0' loop
        LatchX4 <= '0';
        wait until clk'Event AND clk = '1';
        wait until clk'Event AND clk = '1';
        LatchX4 <= '1';
        wait until clk'Event AND clk = '1';
      end loop;
      LX4Done <= '1';
      wait;
      -- pragma synthesis_on
    End Process;
    
    test_proc : Process
    Begin
      Done <= '0';
      RS <= '0';
      -- pragma synthesis_off
      wait for 4000 ns;
      wait until clk'Event AND clk = '1';
      RS <= '1';
      wait until clk'Event AND clk = '1';
      RS <= '0';
      wait for 4000 ns;
      Done <= '1';
      wait;
      -- pragma synthesis_on
    End Process;


END rtl;
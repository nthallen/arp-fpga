-- VHDL Entity idx_fpga_lib.StepClkGen.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:47:46 08/16/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

ENTITY StepClkGen IS
   PORT( 
      F8M     : IN     std_ulogic;
      StepEn  : IN     std_ulogic;
      rclk    : IN     std_ulogic;
      rst     : IN     std_logic;
      Running : OUT    std_ulogic;
      StepClk : OUT    std_ulogic
   );

-- Declarations

END StepClkGen ;

--
-- VHDL Architecture idx_fpga_lib.StepClkGen.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:47:46 08/16/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF StepClkGen IS

   -- Architecture Declarations
   SIGNAL OutEn : std_ulogic;  

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s0a,
      s4,
      s5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL Running_cld : std_ulogic ;
   SIGNAL StepClk_int : std_ulogic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= s0;
         ELSE
            current_state <= next_state;
            -- Registered output assignments
            StepClk <= StepClk_int;

            -- Combined Actions
            CASE current_state IS
               WHEN s0 => 
                  Running_cld <= '0' ;
                  OutEn <= '0' ;
               WHEN s1 => 
                  Running_cld <= '1' ;
               WHEN s2 => 
                  OutEn <= '1' ;
               WHEN s3 => 
                  OutEn <= '0' ;
               WHEN s0a => 
                  Running_cld <= '0' ;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      StepEn,
      current_state,
      rclk
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (rclk = '1' AND
                StepEn /= '1') THEN 
               next_state <= s0a;
            ELSIF (rclk = '1' AND
                   StepEn = '1') THEN 
               next_state <= s1;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (rclk = '1') THEN 
               next_state <= s1;
            ELSIF (rclk /= '1' AND
                   StepEn = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (StepEn /= '1'
                AND rclk /= '1') THEN 
               next_state <= s3;
            ELSIF (StepEn = '1' OR rclk = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            IF (rclk = '1') THEN 
               next_state <= s4;
            ELSIF (rclk /= '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s0a => 
            IF (rclk /= '1') THEN 
               next_state <= s0;
            ELSIF (rclk = '1') THEN 
               next_state <= s0a;
            ELSE
               next_state <= s0a;
            END IF;
         WHEN s4 => 
            IF (rclk = '1') THEN 
               next_state <= s4;
            ELSIF (rclk /= '1') THEN 
               next_state <= s5;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s5 => 
            IF (rclk = '1') THEN 
               next_state <= s0a;
            ELSIF (rclk /= '1') THEN 
               next_state <= s5;
            ELSE
               next_state <= s5;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   Running <= Running_cld;
   StepClk_int <= OutEn AND rclk ;
END fsm;

-- VHDL Entity idx_fpga_lib.adc_v1.symbol
--
-- Created:
--          by - nort.Domain Users (EASWHLPT3425080)
--          at - 14:31:40 04/09/15
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;


USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY adc_v1 IS
   GENERIC( 
      BASE_ADDR : std_logic_vector := X"0E80";
      N_ADC     : integer          := 2;
      NBITSHIFT : integer          := 1;
      RATE_DEF  : std_logic_vector := "11111"
   );
   PORT( 
      Addr   : IN     std_logic_vector (15 DOWNTO 0);
      ExpRd  : IN     std_ulogic;
      ExpWr  : IN     std_ulogic;
      F8M    : IN     std_logic;
      MISO   : IN     std_logic_vector (N_ADC-1 DOWNTO 0);
      rst    : IN     std_logic;
      CS_B   : OUT    std_logic_vector (N_ADC-1 DOWNTO 0);
      ExpAck : OUT    std_ulogic;
      MOSI   : OUT    std_logic_vector (N_ADC-1 DOWNTO 0);
      RData  : OUT    std_logic_vector (15 DOWNTO 0);
      SCLK   : OUT    std_logic_vector (N_ADC-1 DOWNTO 0)
   );

-- Declarations

END adc_v1 ;

--
-- VHDL Architecture idx_fpga_lib.adc_v1.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 13:50:16 06/29/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
-- 
--  VHDL Architecture idx_fpga_lib.adc_v1.struct
-- 
--  Created:
--           by - nort.Domain Users (NORT-XPS14)
--           at - 09:22:57 05/03/14
-- 
--  Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
-- 
-- 
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.All;


ARCHITECTURE struct OF adc_v1 IS

   -- Architecture declarations

   -- Internal signal declarations
   -- Architecture declarations

-- Internal signal declarations
   SIGNAL ACQ_OUT    : std_logic;
   SIGNAL ADC_EN     : std_logic_vector(N_ADC-1 DOWNTO 0);
   SIGNAL ADD_EN     : std_logic;
   SIGNAL ALL_EOC    : std_logic;
   SIGNAL BdEn       : std_ulogic;
   SIGNAL CLR        : std_logic;
   SIGNAL DATA_READY : std_logic;
   SIGNAL ERR        : std_logic_vector(N_ADC-1 DOWNTO 0);
   SIGNAL HighWord   : std_logic;
   SIGNAL INTS       : std_logic_vector(32*N_ADC-1 DOWNTO 0);
   SIGNAL OUT_ACK    : std_logic;
   SIGNAL RdEn       : std_ulogic;
   SIGNAL STATUS     : std_logic_vector(4 DOWNTO 0);
   SIGNAL STATUS_EN  : std_logic;
   SIGNAL WrEn       : std_ulogic;


---- Optional embedded configurations
--   -- pragma synthesis_off
--   FOR ALL : adc_data_ready USE ENTITY idx_fpga_lib.adc_data_ready;
--FOR ALL : adc_glue2 USE ENTITY idx_fpga_lib.adc_glue2;
--FOR ALL : adc_integrator USE ENTITY idx_fpga_lib.adc_integrator;
--FOR ALL : adc_nadc USE ENTITY idx_fpga_lib.adc_nadc;
--FOR ALL : adc_v1_addr USE ENTITY idx_fpga_lib.adc_v1_addr;
--FOR ALL : subbus_io USE ENTITY idx_fpga_lib.subbus_io;
--   -- pragma synthesis_on

   -- Component Declarations
   COMPONENT adc_data_ready
   PORT (
      ACQ_OUT    : IN     std_logic;
      ALL_EOC    : IN     std_logic;
      F8M        : IN     std_logic;
      OUT_ACK    : IN     std_logic;
      rst        : IN     std_logic;
      DATA_READY : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT adc_glue2
   GENERIC (
      N_ADC : integer range 4 downto 0 := 2
   );
   PORT (
      ADC_EN    : IN     std_logic_vector (N_ADC-1 DOWNTO 0);
      ERR       : IN     std_logic_vector (N_ADC-1 DOWNTO 0);
      F8M       : IN     std_ulogic;
      HighWord  : IN     std_logic;
      INTS      : IN     std_logic_vector (32*N_ADC-1 DOWNTO 0);
      RdEn      : IN     std_ulogic;
      STATUS    : IN     std_logic_vector (4 DOWNTO 0);
      STATUS_EN : IN     std_logic;
      WrEn      : IN     std_ulogic;
      RData     : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT adc_integrator
   PORT (
      IN_DATA_READY : IN     std_logic;
      READ_EN       : IN     std_logic;
      STATUS_EN     : IN     std_logic;
      clk           : IN     std_logic;
      rst           : IN     std_logic;
      ADD_EN        : OUT    std_logic;
      CLR           : OUT    std_logic;
      OUT_ACK       : OUT    std_logic;
      STATUS        : OUT    std_logic_vector (4 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT adc_nadc
   GENERIC (
      N_ADC     : integer range 4 downto 0      := 2;
      RATE_DEF  : std_logic_vector (4 DOWNTO 0) := "11111";
      NBITSHIFT : integer range 31 downto 0     := 1
   );
   PORT (
      ADD_EN    : IN     std_logic;
      CLR       : IN     std_logic;
      F8M       : IN     std_ulogic;
      MISO      : IN     std_logic_vector (N_ADC-1 DOWNTO 0);
      RdEn      : IN     std_ulogic;
      STATUS_EN : IN     std_logic;
      rst       : IN     std_logic;
      ACQ_OUT   : OUT    std_logic;
      ALL_EOC   : OUT    std_logic;
      CS_B      : OUT    std_logic_vector (N_ADC-1 DOWNTO 0);
      ERR       : OUT    std_logic_vector (N_ADC-1 DOWNTO 0);
      INTS      : OUT    std_logic_vector (32*N_ADC-1 DOWNTO 0);
      MOSI      : OUT    std_logic_vector (N_ADC-1 DOWNTO 0);
      SCLK      : OUT    std_logic_vector (N_ADC-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT adc_v1_addr
   GENERIC (
      BASE_ADDR : std_logic_vector(15 downto 0) := X"0E80";
      N_ADC     : integer range 4 downto 0      := 2
   );
   PORT (
      Addr      : IN     std_logic_vector (15 DOWNTO 0);
      ADC_EN    : OUT    std_logic_vector (N_ADC-1 DOWNTO 0);
      BdEn      : OUT    std_ulogic;
      HighWord  : OUT    std_logic;
      STATUS_EN : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT subbus_io
   PORT (
      ExpRd  : IN     std_ulogic ;
      ExpWr  : IN     std_ulogic ;
      ExpAck : OUT    std_ulogic ;
      F8M    : IN     std_ulogic ;
      RdEn   : OUT    std_ulogic ;
      WrEn   : OUT    std_ulogic ;
      BdEn   : IN     std_ulogic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : adc_data_ready USE ENTITY idx_fpga_lib.adc_data_ready;
   FOR ALL : adc_glue2 USE ENTITY idx_fpga_lib.adc_glue2;
   FOR ALL : adc_integrator USE ENTITY idx_fpga_lib.adc_integrator;
   FOR ALL : adc_nadc USE ENTITY idx_fpga_lib.adc_nadc;
   FOR ALL : adc_v1_addr USE ENTITY idx_fpga_lib.adc_v1_addr;
   FOR ALL : subbus_io USE ENTITY idx_fpga_lib.subbus_io;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   --  Instance port mappings.
   -- 
   U_4 : adc_data_ready
      PORT MAP (
         ACQ_OUT    => ACQ_OUT,
         ALL_EOC    => ALL_EOC,
         F8M        => F8M,
         OUT_ACK    => OUT_ACK,
         rst        => rst,
         DATA_READY => DATA_READY
      );
   U_3 : adc_glue2
      GENERIC MAP (
         N_ADC => N_ADC
      )
      PORT MAP (
         ADC_EN    => ADC_EN,
         ERR       => ERR,
         F8M       => F8M,
         HighWord  => HighWord,
         INTS      => INTS,
         RdEn      => RdEn,
         STATUS    => STATUS,
         STATUS_EN => STATUS_EN,
         WrEn      => WrEn,
         RData     => RData
      );
   U_2 : adc_integrator
      PORT MAP (
         IN_DATA_READY => DATA_READY,
         READ_EN       => RdEn,
         STATUS_EN     => STATUS_EN,
         clk           => F8M,
         rst           => rst,
         ADD_EN        => ADD_EN,
         CLR           => CLR,
         OUT_ACK       => OUT_ACK,
         STATUS        => STATUS
      );
   U_1 : adc_nadc
      GENERIC MAP (
         N_ADC     => N_ADC,
         RATE_DEF  => RATE_DEF,
         NBITSHIFT => NBITSHIFT
      )
      PORT MAP (
         ADD_EN    => ADD_EN,
         CLR       => CLR,
         F8M       => F8M,
         MISO      => MISO,
         RdEn      => RdEn,
         STATUS_EN => STATUS_EN,
         rst       => rst,
         ACQ_OUT   => ACQ_OUT,
         ALL_EOC   => ALL_EOC,
         CS_B      => CS_B,
         ERR       => ERR,
         INTS      => INTS,
         MOSI      => MOSI,
         SCLK      => SCLK
      );
   adc_addr : adc_v1_addr
      GENERIC MAP (
         BASE_ADDR => BASE_ADDR,
         N_ADC     => N_ADC
      )
      PORT MAP (
         Addr      => Addr,
         ADC_EN    => ADC_EN,
         BdEn      => BdEn,
         HighWord  => HighWord,
         STATUS_EN => STATUS_EN
      );
   U_0 : subbus_io
      PORT MAP (
         ExpRd  => ExpRd,
         ExpWr  => ExpWr,
         ExpAck => ExpAck,
         F8M    => F8M,
         RdEn   => RdEn,
         WrEn   => WrEn,
         BdEn   => BdEn
      );

END struct;

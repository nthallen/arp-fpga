-- VHDL Entity idx_fpga_lib.Limits.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:34:34 01/28/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

ENTITY Limits IS
   PORT( 
      DirOut   : IN     std_ulogic;
      F8M      : IN     std_ulogic;
      InLimit  : IN     std_ulogic;
      OutLimit : IN     std_ulogic;
      rst      : IN     std_ulogic;
      ArmZero  : OUT    std_ulogic;
      Limit    : OUT    std_ulogic
   );

-- Declarations

END Limits ;

--
-- VHDL Architecture idx_fpga_lib.Limits.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:34:35 01/28/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF Limits IS

   TYPE STATE_TYPE IS (
      unlimited,
      AtOutLimit,
      AtInLimit
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL Limit_int : std_ulogic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= unlimited;
         ELSE
            current_state <= next_state;
            -- Registered output assignments
            Limit <= Limit_int;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      DirOut,
      InLimit,
      OutLimit,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN unlimited => 
            IF (DirOut = '1' AND OutLimit = '1') THEN 
               next_state <= AtOutLimit;
            ELSIF (DirOut /= '1' AND InLimit = '1') THEN 
               next_state <= AtInLimit;
            ELSIF ((DirOut = '1' AND OutLimit /= '1') OR
                   ( DirOut /= '1' AND InLimit /= '1' )) THEN 
               next_state <= unlimited;
            ELSE
               next_state <= unlimited;
            END IF;
         WHEN AtOutLimit => 
            IF (DirOut /= '1' AND InLimit /= '1') THEN 
               next_state <= unlimited;
            ELSIF (DirOut /= '1' AND InLimit = '1') THEN 
               next_state <= AtInLimit;
            ELSIF (DirOut = '1') THEN 
               next_state <= AtOutLimit;
            ELSE
               next_state <= AtOutLimit;
            END IF;
         WHEN AtInLimit => 
            IF (DirOut = '1' AND OutLimit /= '1') THEN 
               next_state <= unlimited;
            ELSIF (DirOut = '1' AND OutLimit = '1') THEN 
               next_state <= AtOutLimit;
            ELSIF (DirOut /= '1') THEN 
               next_state <= AtInLimit;
            ELSE
               next_state <= AtInLimit;
            END IF;
         WHEN OTHERS =>
            next_state <= unlimited;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ArmZero <= '0';
      Limit_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN unlimited => 
            Limit_int <= '0' ;
            ArmZero <= '0' ;
         WHEN AtOutLimit => 
            Limit_int <= '1' ;
            ArmZero <= '0' ;
         WHEN AtInLimit => 
            Limit_int <= '1' ;
            ArmZero <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;

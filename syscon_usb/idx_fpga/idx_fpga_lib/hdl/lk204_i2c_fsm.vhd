-- VHDL Entity idx_fpga_lib.lk204_i2c.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:22:33 09/17/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY lk204_i2c IS
   GENERIC( 
      I2C_CLK_PRESCALE : std_logic_vector(15 DOWNTO 0) := X"000E"
   );
   PORT( 
      F8M       : IN     std_ulogic;
      I2Cwdata  : IN     std_logic_vector (7 DOWNTO 0);
      RdI2C     : IN     std_logic;
      Rst       : IN     std_logic;
      WrI2C     : IN     std_logic;
      WrStart   : IN     std_logic;
      WrStop    : IN     std_logic;
      wb_ack_o  : IN     std_logic;                      -- Bus cycle acknowledge output
      wb_dat_o  : IN     std_logic_vector (7 DOWNTO 0);  -- Databus output
      wb_inta_o : IN     std_logic;                      -- interrupt request output signal
      Done      : OUT    std_logic;
      Err       : OUT    std_logic;
      I2Crdata  : OUT    std_logic_vector (7 DOWNTO 0);
      arst_i    : OUT    std_logic;                      -- asynchronous reset
      wb_adr_i  : OUT    std_logic_vector (2 DOWNTO 0);  -- lower address bits
      wb_cyc_i  : OUT    std_logic;                      -- Valid bus cycle input
      wb_dat_i  : OUT    std_logic_vector (7 DOWNTO 0);  -- Databus input
      wb_stb_i  : OUT    std_logic;                      -- Strobe signals / core select signal
      wb_we_i   : OUT    std_logic                       -- Write enable input
   );

-- Declarations

END lk204_i2c ;

--
-- VHDL Architecture idx_fpga_lib.lk204_i2c.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:22:33 09/17/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF lk204_i2c IS

   -- Architecture Declarations
   SIGNAL RdReq : std_logic;  

   TYPE STATE_TYPE IS (
      top_0,
      top_1,
      top_4,
      top_3,
      top_2,
      i2ci_0,
      i2ci_1,
      i2ci_5,
      i2ci_2,
      i2ci_7,
      i2ci_4,
      i2ci_8,
      w_9,
      w_30,
      w_3,
      w_25,
      w_6,
      w_32,
      w_26,
      w_15,
      w_27,
      w_18,
      w_28,
      w_6a1,
      w_29,
      w_31,
      i2c_r19,
      i2c_r20,
      i2c_r21,
      i2c_r22,
      i2c_r23,
      i2c_r7
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(18 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(18 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_w_32 : std_logic;
   SIGNAL csm_to_i2c_r21 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL Done_cld : std_logic ;
   SIGNAL Err_cld : std_logic ;
   SIGNAL I2Crdata_cld : std_logic_vector (7 DOWNTO 0);
   SIGNAL wb_adr_i_cld : std_logic_vector (2 DOWNTO 0);-- lower address bits
   SIGNAL wb_cyc_i_cld : std_logic ;-- Valid bus cycle input
   SIGNAL wb_dat_i_cld : std_logic_vector (7 DOWNTO 0);-- Databus input
   SIGNAL wb_stb_i_cld : std_logic ;-- Strobe signals / core select signal
   SIGNAL wb_we_i_cld : std_logic ;-- Write enable input

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (Rst = '1') THEN
            current_state <= i2ci_0;
            csm_timer <= (OTHERS => '0');
            -- Default Reset Values
            Done_cld <= '0';
            Err_cld <= '0';
            I2Crdata_cld <= (others => '0');
            wb_adr_i_cld <= (others => '0');
            wb_cyc_i_cld <= '0';
            wb_dat_i_cld <= (others => '0');
            wb_stb_i_cld <= '0';
            wb_we_i_cld <= '0';
            RdReq <= '0';
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;

            -- Combined Actions
            CASE current_state IS
               WHEN top_0 => 
                  Done_cld <= '1';
               WHEN top_1 => 
                  RdReq <= RdI2C;
               WHEN top_2 => 
                  Done_cld <= '0';
                  Err_cld <= '0';
               WHEN i2ci_0 => 
                  Done_cld <= '0' ;
                   Err_cld <= '0' ;
               WHEN i2ci_1 => 
                  wb_adr_i_cld <= "000";
                  wb_dat_i_cld <=
                    I2C_CLK_PRESCALE(7 DOWNTO 0);
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2ci_7 => 
                  wb_adr_i_cld <= "010";
                  wb_dat_i_cld <= X"C0";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2ci_4 => 
                  wb_adr_i_cld <= "001";
                  wb_dat_i_cld <=
                    I2C_CLK_PRESCALE(15 DOWNTO 8);
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2ci_8 => 
                  Done_cld <= '1';
               WHEN w_9 => 
                  wb_adr_i_cld <= "100";
                  wb_we_i_cld <= '0' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1' AND 
                      wb_dat_o(7) /= '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  ELSIF (wb_ack_o = '1' AND
                         wb_dat_o(7) = '0' AND
                         wb_dat_o(5) = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  ELSIF (wb_ack_o = '1' AND
                         wb_dat_o(7) = '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_3 => 
                  wb_adr_i_cld <= "011";
                  wb_dat_i_cld <=
                     I2Cwdata;
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o
                         = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_26 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <= "01000001";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o
                         = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_15 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <=
                    WrStart & WrStop & "010001";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o
                         = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_29 => 
                  Err_cld <= '1';
               WHEN i2c_r19 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <=X"69";
                  wb_we_i_cld <= '1';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2c_r21 => 
                  IF (wb_inta_o
                        = '1') THEN 
                     wb_adr_i_cld <= "011";
                     wb_we_i_cld <= '0';
                     wb_cyc_i_cld <= '1' ;
                     wb_stb_i_cld <= '1' ;
                  ELSIF (csm_timeout = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                     Err_cld <= '1' ;
                  END IF;
               WHEN i2c_r22 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                     I2Crdata_cld(7 DOWNTO 0)
                        <= wb_dat_o;
                  END IF;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Err_cld,
      RdI2C,
      RdReq,
      WrI2C,
      csm_timeout,
      current_state,
      wb_ack_o,
      wb_dat_o,
      wb_inta_o
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_w_32 <= '0';
      csm_to_i2c_r21 <= '0';
      CASE current_state IS
         WHEN top_0 => 
            next_state <= top_1;
         WHEN top_1 => 
            IF (RdI2C = '1' OR
                WrI2C = '1') THEN 
               next_state <= top_2;
            ELSE
               next_state <= top_1;
            END IF;
         WHEN top_4 => 
            IF (Err_cld = '1') THEN 
               next_state <= top_1;
            ELSE
               next_state <= top_0;
            END IF;
         WHEN top_3 => 
            IF (Err_cld = '1') THEN 
               next_state <= top_1;
            ELSIF (RdReq = '1') THEN 
               next_state <= i2c_r19;
            ELSE
               next_state <= top_0;
            END IF;
         WHEN top_2 => 
            IF (RdI2C /= '1' AND WrI2C /= '1') THEN 
               next_state <= w_3;
            ELSE
               next_state <= top_2;
            END IF;
         WHEN i2ci_0 => 
            next_state <= i2ci_1;
         WHEN i2ci_1 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2ci_2;
            ELSE
               next_state <= i2ci_1;
            END IF;
         WHEN i2ci_5 => 
            IF (wb_ack_o = '0') THEN 
               next_state <= i2ci_7;
            ELSE
               next_state <= i2ci_5;
            END IF;
         WHEN i2ci_2 => 
            IF (wb_ack_o = '0') THEN 
               next_state <= i2ci_4;
            ELSE
               next_state <= i2ci_2;
            END IF;
         WHEN i2ci_7 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2ci_8;
            ELSE
               next_state <= i2ci_7;
            END IF;
         WHEN i2ci_4 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2ci_5;
            ELSE
               next_state <= i2ci_4;
            END IF;
         WHEN i2ci_8 => 
            IF (wb_ack_o = '0') THEN 
               next_state <= top_0;
            ELSE
               next_state <= i2ci_8;
            END IF;
         WHEN w_9 => 
            IF (wb_ack_o = '1' AND 
                wb_dat_o(7) /= '0') THEN 
               next_state <= w_25;
            ELSIF (wb_ack_o = '1' AND
                   wb_dat_o(7) = '0' AND
                   wb_dat_o(5) = '1') THEN 
               next_state <= w_32;
               csm_to_w_32 <= '1';
            ELSIF (wb_ack_o = '1' AND
                   wb_dat_o(7) = '0') THEN 
               next_state <= w_30;
            ELSE
               next_state <= w_9;
            END IF;
         WHEN w_30 => 
            IF (wb_ack_o
                   = '0') THEN 
               next_state <= top_3;
            ELSE
               next_state <= w_30;
            END IF;
         WHEN w_3 => 
            IF (wb_ack_o
                   = '1') THEN 
               next_state <= w_6;
            ELSE
               next_state <= w_3;
            END IF;
         WHEN w_25 => 
            IF (wb_ack_o
                   = '0') THEN 
               next_state <= w_26;
            ELSE
               next_state <= w_25;
            END IF;
         WHEN w_6 => 
            IF (wb_ack_o
                   = '0') THEN 
               next_state <= w_15;
            ELSE
               next_state <= w_6;
            END IF;
         WHEN w_32 => 
            IF (csm_timeout = '1') THEN 
               next_state <= w_29;
            ELSE
               next_state <= w_32;
            END IF;
         WHEN w_26 => 
            IF (wb_ack_o
                   = '1') THEN 
               next_state <= w_27;
            ELSE
               next_state <= w_26;
            END IF;
         WHEN w_15 => 
            IF (wb_ack_o
                   = '1') THEN 
               next_state <= w_18;
            ELSE
               next_state <= w_15;
            END IF;
         WHEN w_27 => 
            IF (wb_ack_o = '0' AND
                wb_inta_o = '0') THEN 
               next_state <= w_28;
            ELSE
               next_state <= w_27;
            END IF;
         WHEN w_18 => 
            IF (wb_ack_o = '0' AND
                wb_inta_o = '0') THEN 
               next_state <= w_6a1;
            ELSE
               next_state <= w_18;
            END IF;
         WHEN w_28 => 
            IF (wb_inta_o
                  = '1') THEN 
               next_state <= w_29;
            ELSE
               next_state <= w_28;
            END IF;
         WHEN w_6a1 => 
            IF (wb_inta_o
                  = '1') THEN 
               next_state <= w_9;
            ELSE
               next_state <= w_6a1;
            END IF;
         WHEN w_29 => 
            next_state <= w_31;
         WHEN w_31 => 
            next_state <= top_3;
         WHEN i2c_r19 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2c_r20;
            ELSE
               next_state <= i2c_r19;
            END IF;
         WHEN i2c_r20 => 
            IF (wb_inta_o = '0'
                AND
                wb_ack_o = '0') THEN 
               next_state <= i2c_r21;
               csm_to_i2c_r21 <= '1';
            ELSE
               next_state <= i2c_r20;
            END IF;
         WHEN i2c_r21 => 
            IF (wb_inta_o
                  = '1') THEN 
               next_state <= i2c_r22;
            ELSIF (csm_timeout = '1') THEN 
               next_state <= i2c_r7;
            ELSE
               next_state <= i2c_r21;
            END IF;
         WHEN i2c_r22 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2c_r23;
            ELSE
               next_state <= i2c_r22;
            END IF;
         WHEN i2c_r23 => 
            next_state <= top_4;
         WHEN i2c_r7 => 
            next_state <= top_4;
         WHEN OTHERS =>
            next_state <= i2ci_0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   -- Default Assignment
   arst_i <= '1';
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_w_32,
      csm_to_i2c_r21
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_w_32 = '1') THEN
         csm_next_timer <= "1001110000111111111"; -- no cycles(320000)-1=319999
      ELSIF (csm_to_i2c_r21 = '1') THEN
         csm_next_timer <= "0000000011000111111"; -- no cycles(1600)-1=1599
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   Done <= Done_cld;
   Err <= Err_cld;
   I2Crdata <= I2Crdata_cld;
   wb_adr_i <= wb_adr_i_cld;
   wb_cyc_i <= wb_cyc_i_cld;
   wb_dat_i <= wb_dat_i_cld;
   wb_stb_i <= wb_stb_i_cld;
   wb_we_i <= wb_we_i_cld;
END fsm;

-- VHDL Entity idx_fpga_lib.ptrh_i2c_sm.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 12:16:38 04/19/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;

ENTITY ptrh_i2c_sm IS
   PORT( 
      F8M       : IN     std_ulogic;
      Rd        : IN     std_logic;
      Rd3       : IN     std_logic;
      Wr        : IN     std_logic;
      WrStop    : IN     std_logic;
      i2c_addr  : IN     std_logic_vector (6 DOWNTO 0);
      i2c_wdata : IN     std_logic_vector (7 DOWNTO 0);
      rst       : IN     std_ulogic;
      wb_ack_o  : IN     std_logic;
      wb_dat_o  : IN     std_logic_vector (7 DOWNTO 0);
      wb_inta_o : IN     std_logic;
      Done      : OUT    std_logic;
      Err       : OUT    std_logic;
      i2c_rdata : OUT    std_logic_vector (23 DOWNTO 0);
      wb_adr_i  : OUT    std_logic_vector (2 DOWNTO 0);
      wb_cyc_i  : OUT    std_logic;
      wb_dat_i  : OUT    std_logic_vector (7 DOWNTO 0);
      wb_stb_i  : OUT    std_logic;
      wb_we_i   : OUT    std_logic
   );

-- Declarations

END ptrh_i2c_sm ;

--
-- VHDL Architecture idx_fpga_lib.ptrh_i2c_sm.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 12:16:38 04/19/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;
 
ARCHITECTURE fsm OF ptrh_i2c_sm IS

   -- Architecture Declarations
   SIGNAL Rd3_int : std_logic;  
   SIGNAL WrStop_int : std_logic;  

   TYPE STATE_TYPE IS (
      i2ci_0,
      i2ci_1,
      i2ci_2,
      i2ci_3,
      i2ci_4,
      i2ci_5,
      i2ci_6,
      i2ci_7,
      i2ci_8,
      i2ci_9,
      i2c_10,
      w_1,
      w_2,
      w_3,
      w_4,
      w_5,
      w_6,
      w_10,
      w_11,
      w_12,
      w_13,
      w_14,
      w_15,
      w_7,
      w_8,
      w_16,
      w_17,
      w_6a,
      w_15a,
      r_1,
      r_2,
      r_3,
      r_4,
      r_5,
      r_9,
      r_6,
      r_8,
      r_7,
      r_10,
      r_11,
      r_12,
      r_13,
      r_14,
      r_15,
      r_16,
      r_17,
      r_18,
      r_20,
      r_21,
      r_22,
      r_23,
      r_25,
      r_26,
      r_27,
      r_28,
      r_29,
      r_30,
      r_31,
      r_32
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL Done_cld : std_logic ;
   SIGNAL Err_cld : std_logic ;
   SIGNAL i2c_rdata_cld : std_logic_vector (23 DOWNTO 0);
   SIGNAL wb_adr_i_cld : std_logic_vector (2 DOWNTO 0);
   SIGNAL wb_cyc_i_cld : std_logic ;
   SIGNAL wb_dat_i_cld : std_logic_vector (7 DOWNTO 0);
   SIGNAL wb_stb_i_cld : std_logic ;
   SIGNAL wb_we_i_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= i2ci_0;
            -- Default Reset Values
            Done_cld <= '0';
            Err_cld <= '0';
            i2c_rdata_cld <= (others => '0');
            wb_adr_i_cld <= (others => '0');
            wb_cyc_i_cld <= '0';
            wb_dat_i_cld <= (others => '0');
            wb_stb_i_cld <= '0';
            wb_we_i_cld <= '0';
            Rd3_int <= '0';
            WrStop_int <= '0';
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN i2ci_0 => 
                  Done_cld <= '0' ;
                   Err_cld <= '0' ;
               WHEN i2ci_1 => 
                  wb_adr_i_cld <= "000";
                  wb_dat_i_cld <= X"0E";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN i2ci_2 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2ci_4 => 
                  wb_adr_i_cld <= "001";
                  wb_dat_i_cld <= X"00";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN i2ci_5 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2ci_7 => 
                  wb_adr_i_cld <= "010";
                  wb_dat_i_cld <= X"C0";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN i2ci_8 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN i2ci_9 => 
                  Done_cld <= '1';
               WHEN i2c_10 => 
                  IF (Wr = '1') THEN 
                     Done_cld <= '0' ;
                     Err_cld <= '0';
                     WrStop_int <=
                       WrStop;
                  ELSIF (Rd = '1') THEN 
                     Rd3_int <= Rd3 ;
                     Done_cld <= '0' ;
                     Err_cld <= '0';
                  END IF;
               WHEN w_1 => 
                  wb_adr_i_cld <= "011";
                  wb_dat_i_cld <= i2c_addr & '0';
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN w_2 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_4 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <= "10010001";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN w_5 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_10 => 
                  wb_adr_i_cld <= "011";
                  wb_dat_i_cld <= i2c_wdata ;
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN w_11 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_13 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <= '0'
                     & WrStop_int
                     & "010001";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN w_14 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN w_7 => 
                  wb_adr_i_cld <= "100";
                  wb_we_i_cld <= '0' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN w_8 => 
                  IF (wb_ack_o = '1' AND
                      wb_dat_o(7) = '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  ELSIF (wb_ack_o = '1' AND 
                         wb_dat_o(7) /= '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                     Err_cld <= '1' ;
                  END IF;
               WHEN w_16 => 
                  wb_adr_i_cld <= "100";
                  wb_we_i_cld <= '0' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN w_17 => 
                  IF (wb_ack_o = '1' AND
                      wb_dat_o(7) = '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                     Done_cld <= '1';
                  ELSIF (wb_ack_o = '1' AND 
                         wb_dat_o(7) /= '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                     Err_cld <= '1' ;
                  END IF;
               WHEN r_1 => 
                  wb_adr_i_cld <= "011";
                  wb_dat_i_cld <= i2c_addr & '1';
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN r_2 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_4 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <= X"91";
                  wb_we_i_cld <= '1' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN r_5 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_9 => 
                  IF (wb_ack_o = '1' AND
                      wb_dat_o(7) /= '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                     Err_cld <= '1' ;
                  ELSIF (wb_ack_o = '1' AND
                         wb_dat_o(7) = '0' AND
                         Rd3_int = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  ELSIF (wb_ack_o = '1' AND
                         wb_dat_o(7) = '0' AND
                         Rd3_int = '0') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_8 => 
                  wb_adr_i_cld <= "100";
                  wb_we_i_cld <= '0' ;
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN r_10 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <=X"21";
                  wb_we_i_cld <= '1';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN r_11 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_14 => 
                  wb_adr_i_cld <= "011";
                  wb_we_i_cld <= '0';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_15 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <=X"21";
                  wb_we_i_cld <= '1';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN r_16 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_20 => 
                  wb_adr_i_cld <= "100";
                  wb_dat_i_cld <=X"69";
                  wb_we_i_cld <= '1';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
               WHEN r_21 => 
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_25 => 
                  i2c_rdata_cld(23 DOWNTO 16)
                     <= wb_dat_o;
               WHEN r_27 => 
                  wb_adr_i_cld <= "011";
                  wb_we_i_cld <= '0';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_28 => 
                  i2c_rdata_cld(15 DOWNTO 8)
                     <= wb_dat_o;
               WHEN r_30 => 
                  wb_adr_i_cld <= "011";
                  wb_we_i_cld <= '0';
                  wb_cyc_i_cld <= '1' ;
                  wb_stb_i_cld <= '1' ;
                  IF (wb_ack_o = '1') THEN 
                     wb_cyc_i_cld <= '0' ;
                     wb_stb_i_cld <= '0' ;
                  END IF;
               WHEN r_31 => 
                  i2c_rdata_cld(7 DOWNTO 0)
                     <= wb_dat_o;
               WHEN r_32 => 
                  Done_cld <= '1';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Rd,
      Rd3_int,
      Wr,
      current_state,
      wb_ack_o,
      wb_dat_o,
      wb_inta_o
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN i2ci_0 => 
            next_state <= i2ci_1;
         WHEN i2ci_1 => 
            next_state <= i2ci_2;
         WHEN i2ci_2 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2ci_3;
            ELSE
               next_state <= i2ci_2;
            END IF;
         WHEN i2ci_3 => 
            next_state <= i2ci_4;
         WHEN i2ci_4 => 
            next_state <= i2ci_5;
         WHEN i2ci_5 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2ci_6;
            ELSE
               next_state <= i2ci_5;
            END IF;
         WHEN i2ci_6 => 
            next_state <= i2ci_7;
         WHEN i2ci_7 => 
            next_state <= i2ci_8;
         WHEN i2ci_8 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= i2ci_9;
            ELSE
               next_state <= i2ci_8;
            END IF;
         WHEN i2ci_9 => 
            next_state <= i2c_10;
         WHEN i2c_10 => 
            IF (Wr = '1') THEN 
               next_state <= w_1;
            ELSIF (Rd = '1') THEN 
               next_state <= r_1;
            ELSE
               next_state <= i2c_10;
            END IF;
         WHEN w_1 => 
            next_state <= w_2;
         WHEN w_2 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= w_3;
            ELSE
               next_state <= w_2;
            END IF;
         WHEN w_3 => 
            next_state <= w_4;
         WHEN w_4 => 
            next_state <= w_5;
         WHEN w_5 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= w_6;
            ELSE
               next_state <= w_5;
            END IF;
         WHEN w_6 => 
            IF (wb_inta_o = '0') THEN 
               next_state <= w_6a;
            ELSE
               next_state <= w_6;
            END IF;
         WHEN w_10 => 
            next_state <= w_11;
         WHEN w_11 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= w_12;
            ELSE
               next_state <= w_11;
            END IF;
         WHEN w_12 => 
            next_state <= w_13;
         WHEN w_13 => 
            next_state <= w_14;
         WHEN w_14 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= w_15;
            ELSE
               next_state <= w_14;
            END IF;
         WHEN w_15 => 
            IF (wb_inta_o = '0') THEN 
               next_state <= w_15a;
            ELSE
               next_state <= w_15;
            END IF;
         WHEN w_7 => 
            next_state <= w_8;
         WHEN w_8 => 
            IF (wb_ack_o = '1' AND
                wb_dat_o(7) = '0') THEN 
               next_state <= w_10;
            ELSIF (wb_ack_o = '1' AND 
                   wb_dat_o(7) /= '0') THEN 
               next_state <= i2c_10;
            ELSE
               next_state <= w_8;
            END IF;
         WHEN w_16 => 
            next_state <= w_17;
         WHEN w_17 => 
            IF (wb_ack_o = '1' AND
                wb_dat_o(7) = '0') THEN 
               next_state <= i2c_10;
            ELSIF (wb_ack_o = '1' AND 
                   wb_dat_o(7) /= '0') THEN 
               next_state <= i2c_10;
            ELSE
               next_state <= w_17;
            END IF;
         WHEN w_6a => 
            IF (wb_inta_o = '1') THEN 
               next_state <= w_7;
            ELSE
               next_state <= w_6a;
            END IF;
         WHEN w_15a => 
            IF (wb_inta_o = '1') THEN 
               next_state <= w_16;
            ELSE
               next_state <= w_15a;
            END IF;
         WHEN r_1 => 
            next_state <= r_2;
         WHEN r_2 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_3;
            ELSE
               next_state <= r_2;
            END IF;
         WHEN r_3 => 
            next_state <= r_4;
         WHEN r_4 => 
            next_state <= r_5;
         WHEN r_5 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_6;
            ELSE
               next_state <= r_5;
            END IF;
         WHEN r_9 => 
            IF (wb_ack_o = '1' AND
                wb_dat_o(7) /= '0') THEN 
               next_state <= i2c_10;
            ELSIF (wb_ack_o = '1' AND
                   wb_dat_o(7) = '0' AND
                   Rd3_int = '1') THEN 
               next_state <= r_10;
            ELSIF (wb_ack_o = '1' AND
                   wb_dat_o(7) = '0' AND
                   Rd3_int = '0') THEN 
               next_state <= r_15;
            ELSE
               next_state <= r_9;
            END IF;
         WHEN r_6 => 
            IF (wb_inta_o = '0') THEN 
               next_state <= r_7;
            ELSE
               next_state <= r_6;
            END IF;
         WHEN r_8 => 
            next_state <= r_9;
         WHEN r_7 => 
            IF (wb_inta_o = '1') THEN 
               next_state <= r_8;
            ELSE
               next_state <= r_7;
            END IF;
         WHEN r_10 => 
            next_state <= r_11;
         WHEN r_11 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_12;
            ELSE
               next_state <= r_11;
            END IF;
         WHEN r_12 => 
            IF (wb_inta_o = '0') THEN 
               next_state <= r_13;
            ELSE
               next_state <= r_12;
            END IF;
         WHEN r_13 => 
            IF (wb_inta_o = '1') THEN 
               next_state <= r_14;
            ELSE
               next_state <= r_13;
            END IF;
         WHEN r_14 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_25;
            ELSE
               next_state <= r_14;
            END IF;
         WHEN r_15 => 
            next_state <= r_16;
         WHEN r_16 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_17;
            ELSE
               next_state <= r_16;
            END IF;
         WHEN r_17 => 
            IF (wb_inta_o = '0') THEN 
               next_state <= r_18;
            ELSE
               next_state <= r_17;
            END IF;
         WHEN r_18 => 
            IF (wb_inta_o = '1') THEN 
               next_state <= r_27;
            ELSE
               next_state <= r_18;
            END IF;
         WHEN r_20 => 
            next_state <= r_21;
         WHEN r_21 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_22;
            ELSE
               next_state <= r_21;
            END IF;
         WHEN r_22 => 
            IF (wb_inta_o = '0') THEN 
               next_state <= r_23;
            ELSE
               next_state <= r_22;
            END IF;
         WHEN r_23 => 
            IF (wb_inta_o = '1') THEN 
               next_state <= r_30;
            ELSE
               next_state <= r_23;
            END IF;
         WHEN r_25 => 
            next_state <= r_26;
         WHEN r_26 => 
            next_state <= r_15;
         WHEN r_27 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_28;
            ELSE
               next_state <= r_27;
            END IF;
         WHEN r_28 => 
            next_state <= r_29;
         WHEN r_29 => 
            next_state <= r_20;
         WHEN r_30 => 
            IF (wb_ack_o = '1') THEN 
               next_state <= r_31;
            ELSE
               next_state <= r_30;
            END IF;
         WHEN r_31 => 
            next_state <= r_32;
         WHEN r_32 => 
            next_state <= i2c_10;
         WHEN OTHERS =>
            next_state <= i2ci_0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   Done <= Done_cld;
   Err <= Err_cld;
   i2c_rdata <= i2c_rdata_cld;
   wb_adr_i <= wb_adr_i_cld;
   wb_cyc_i <= wb_cyc_i_cld;
   wb_dat_i <= wb_dat_i_cld;
   wb_stb_i <= wb_stb_i_cld;
   wb_we_i <= wb_we_i_cld;
END fsm;

--
-- VHDL Test Bench idx_fpga_lib.bench_Digo_Conn.Digo_Conn_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 14:44:10 09/22/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_DigIO_Conn IS
END bench_DigIO_Conn;


LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ALL;


ARCHITECTURE rtl OF bench_DigIO_Conn IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL D      : std_logic_vector(7 DOWNTO 0);
   SIGNAL IO     : std_logic_vector(23 DOWNTO 0);
   SIGNAL Dir    : std_logic_vector(2 DOWNTO 0);
   SIGNAL RdEn   : std_ulogic;
   SIGNAL WrEn   : std_ulogic;
   SIGNAL ConnEn : std_ulogic;
   SIGNAL PortEn : std_ulogic_vector(3 DOWNTO 0);
   SIGNAL RS     : std_ulogic;
   SIGNAL RA     : std_ulogic;
   SIGNAL Clk    : std_ulogic;


   -- Component declarations
   COMPONENT Digio_Conn
      PORT (
         D      : INOUT  std_logic_vector(7 DOWNTO 0);
         IO     : INOUT  std_logic_vector(23 DOWNTO 0);
         Dir    : OUT    std_logic_vector(2 DOWNTO 0);
         RdEn   : IN     std_ulogic;
         WrEn   : IN     std_ulogic;
         ConnEn : IN     std_ulogic;
         PortEn : IN     std_ulogic_vector(3 DOWNTO 0);
         RS     : IN     std_ulogic;
         RA     : IN     std_ulogic;
         Clk    : IN     std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_Digo_Conn : Digio_Conn USE ENTITY idx_fpga_lib.Digio_Conn;
   -- pragma synthesis_on

BEGIN

         DUT_Digo_Conn : Digio_Conn
            PORT MAP (
               D      => D,
               IO     => IO,
               Dir    => Dir,
               RdEn   => RdEn,
               WrEn   => WrEn,
               ConnEn => ConnEn,
               PortEn => PortEn,
               RS     => RS,
               RA     => RA,
               Clk    => Clk
            );

  clock : Process
  Begin
    for i in 0 to 40 loop
      Clk <= '0';
      -- pragma synthesis_off
      wait for 62.5 ns;
      Clk <= '1';
      wait for 62.5 ns;
      -- pragma synthesis_on
    end loop;
    -- pragma synthesis_off
    wait;
    -- pragma synthesis_on
  End Process;

  test_proc : Process
    procedure write_conn ( Din : std_logic_vector (7 DOWNTO 0);
      PE : std_ulogic_vector (3 DOWNTO 0);
      RSin : std_ulogic;
      RAin : std_ulogic ) is
    Begin
      -- pragma synthesis_off
      for i in 0 to 7 loop
        assert D(i) = 'Z' report "D not floating on write" severity error;
      end loop;
      wait for 40 ns;
      D <= Din;
      ConnEn <= '1';
      PortEn <= PE;
      RS <= RSin;
      RA <= RAin;
      wait until Clk'Event AND Clk = '1';
      WrEn <= '1';
      wait until Clk'Event AND Clk = '1';
      WrEn <= '0';
      D <= (others => 'Z');
      PortEn <= "0000";
      ConnEn <= '0';
      RA <= '0';
      RS <= '0';
      wait for 40 ns;
      --pragma synthesis_on
      return;
    End Procedure;
    
    procedure check_out ( IO1in : std_logic_vector (7 DOWNTO 0);
        IO2in : std_logic_vector (7 DOWNTO 0);
        IO3in : std_logic_vector (7 DOWNTO 0);
        Dirs : std_logic_vector ( 2 DOWNTO 0) ) is
    Begin
      --pragma synthesis_off
      assert IO(7 DOWNTO 0) = IO1in report "IO1 not correct" severity error;
      assert IO(15 DOWNTO 8) = IO2in report "IO2 not correct" severity error;
      assert IO(23 DOWNTO 16) = IO3in report "IO3 not correct" severity error;
      assert Dir = Dirs report "Dirs not correct" severity error;
      --pragma synthesis_on
      return;
    End Procedure;
    procedure check_in ( 
      PE : std_ulogic_vector (3 DOWNTO 0);
      Din : std_logic_vector (7 DOWNTO 0) ) is
    Begin
      --pragma synthesis_off
      assert D = "ZZZZZZZZ" report "D no Z on read" severity error;
      PortEn <= PE;
      ConnEn <= '1';
      wait for 40 ns;
      RdEn <= '1';
      wait for 125 ns;
      assert D = Din report "D value incorrect on read" severity error;
      RdEn <= '0';
      ConnEn <= '0';
      PortEn <= "0000";
      wait for 40 ns;
      --pragma synthesis_on
      return;
    End Procedure;
        
  Begin
    D <= (others => 'Z');
    IO <= (others => 'Z');
    RdEn <= '0';
    WrEn <= '0';
    ConnEn <= '0';
    PortEn <= "0000";
    RS <= '0';
    RA <= '0';
    -- pragma synthesis_off
    wait for 40 ns;
    write_conn( X"00", "0000", '1', '0' );
    check_out( "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "000" );
    write_conn( X"13", "1000", '0', '0' );
    check_out( X"00", X"00", X"00", "111" );
    write_conn( X"55", "0001", '0', '0' );
    check_out( X"55", X"00", X"00", "111" );
    write_conn( X"AA", "0010", '0', '0' );
    check_out( X"55", X"AA", X"00", "111" );
    write_conn( X"12", "1000", '0', '0' );
    check_out( X"55", X"AA", "ZZZZZZZZ", "011" );
    IO(23 DOWNTO 16) <= X"37";
    check_in( "0100", X"37" );
    wait;
    -- pragma synthesis_on
  End Process; 

END rtl;
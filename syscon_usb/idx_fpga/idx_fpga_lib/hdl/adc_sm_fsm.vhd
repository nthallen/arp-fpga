-- VHDL Entity idx_fpga_lib.adc_sm.symbol
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 14:40:01 05/05/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY adc_sm IS
   GENERIC( 
      RATE_DEF : std_logic_vector(4 downto 0) := "01001"
   );
   PORT( 
      ACQ       : IN     std_logic;
      CLK       : IN     std_ulogic;
      MISO      : IN     std_logic;
      READ_EN   : IN     std_logic;
      STATUS_EN : IN     std_logic;
      rst       : IN     std_logic;
      CS_B      : OUT    std_logic;
      EOC       : OUT    std_logic;
      ERR       : OUT    std_logic;
      INTENSITY : OUT    std_logic_vector (31 DOWNTO 0);
      MOSI      : OUT    std_logic;
      SCLK      : OUT    std_logic
   );

-- Declarations

END adc_sm ;

--
-- VHDL Architecture idx_fpga_lib.adc_sm.fsm
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 21:11:14 05/05/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF adc_sm IS

   -- Architecture Declarations
   SIGNAL ACC : std_logic_vector(31 DOWNTO 0);  
   SIGNAL COUNT : std_logic_vector(4 DOWNTO 0);  
   SIGNAL OSR : std_logic_vector(4 DOWNTO 0);  
   SIGNAL SAWEOC : std_logic;  

   TYPE STATE_TYPE IS (
      init,
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12,
      s13
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(2 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(2 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s1 : std_logic;
   SIGNAL csm_to_s2 : std_logic;
   SIGNAL csm_to_s3 : std_logic;
   SIGNAL csm_to_s9 : std_logic;
   SIGNAL csm_to_s10 : std_logic;
   SIGNAL csm_to_s11 : std_logic;
   SIGNAL csm_to_s12 : std_logic;
   SIGNAL csm_to_s13 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL CS_B_cld : std_logic ;
   SIGNAL EOC_cld : std_logic ;
   SIGNAL ERR_cld : std_logic ;
   SIGNAL INTENSITY_cld : std_logic_vector (31 DOWNTO 0);
   SIGNAL MOSI_cld : std_logic ;
   SIGNAL SCLK_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK
   )
   -----------------------------------------------------------------
   BEGIN
      IF (CLK'EVENT AND CLK = '1') THEN
         IF (rst = '1') THEN
            current_state <= init;
            csm_timer <= (OTHERS => '0');
            -- Default Reset Values
            CS_B_cld <= '1';
            EOC_cld <= '0';
            ERR_cld <= '0';
            INTENSITY_cld <= (others => '0');
            MOSI_cld <= '0';
            SCLK_cld <= '0';
            ACC <= (others => '0');
            COUNT <= (others => '0');
            OSR <= (others => '0');
            SAWEOC <= '0';
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;

            -- Combined Actions
            CASE current_state IS
               WHEN s0 => 
                  CS_B_cld <= '0';
                  COUNT <= (others => '0');
                  OSR <= RATE_DEF;
                  MOSI_cld <= OSR(4);
               WHEN s1 => 
                  IF (csm_timeout = '1') THEN 
                     SCLK_cld <=  '1';
                     ACC <= ACC(30 downto 0) & MISO;
                     COUNT <= COUNT + 1;
                     OSR <= OSR(3 downto 0) & '0';
                  END IF;
               WHEN s2 => 
                  IF (csm_timeout = '1' AND (COUNT /= 0)) THEN 
                     SCLK_cld <= '0';
                     MOSI_cld <= OSR(4);
                  ELSIF (csm_timeout = '1' AND (COUNT = 0)) THEN 
                     SCLK_cld <= '0';
                  END IF;
               WHEN s3 => 
                  EOC_cld <= '0';
                  INTENSITY_cld <= ACC;
               WHEN s4 => 
                  SAWEOC <= '0';
                  ERR_cld <= '0';
               WHEN s6 => 
                  EOC_cld <= '1';
                  SAWEOC <= '1';
               WHEN s8 => 
                  ERR_cld <= '1';
                  EOC_cld <= '0';
                  COUNT <= (others => '0');
                  SCLK_cld <= '0';
               WHEN s9 => 
                  CS_B_cld <= '1';
               WHEN s10 => 
                  IF (csm_timeout = '1') THEN 
                     COUNT <= COUNT+1;
                     SCLK_cld <= '1';
                  END IF;
               WHEN s11 => 
                  IF (csm_timeout = '1' AND (COUNT < 5)) THEN 
                     SCLK_cld <= '0';
                  ELSIF (csm_timeout = '1' AND (COUNT >= 5)) THEN 
                     SCLK_cld <= '0';
                  END IF;
               WHEN s12 => 
                  IF (csm_timeout = '1') THEN 
                     CS_B_cld <= '1';
                  END IF;
               WHEN s13 => 
                  IF (csm_timeout = '1') THEN 
                     CS_B_cld <= '0';
                  END IF;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ACQ,
      COUNT,
      MISO,
      READ_EN,
      SAWEOC,
      STATUS_EN,
      csm_timeout,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s1 <= '0';
      csm_to_s2 <= '0';
      csm_to_s3 <= '0';
      csm_to_s9 <= '0';
      csm_to_s10 <= '0';
      csm_to_s11 <= '0';
      csm_to_s12 <= '0';
      csm_to_s13 <= '0';
      CASE current_state IS
         WHEN init => 
            next_state <= s0;
         WHEN s0 => 
            IF (MISO = '0') THEN 
               next_state <= s6;
            ELSIF (READ_EN = '1' AND 
                   STATUS_EN = '1' AND 
                   SAWEOC = '1') THEN 
               next_state <= s4;
            ELSIF (READ_EN = '1' AND 
                   STATUS_EN = '1' AND
                   SAWEOC = '0') THEN 
               next_state <= s8;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s2;
               csm_to_s2 <= '1';
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (csm_timeout = '1' AND (COUNT /= 0)) THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSIF (csm_timeout = '1' AND (COUNT = 0)) THEN 
               next_state <= s3;
               csm_to_s3 <= '1';
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s9;
               csm_to_s9 <= '1';
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            IF (READ_EN = '0' OR 
                STATUS_EN = '0') THEN 
               next_state <= s0;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s5 => 
            IF (READ_EN = '1' AND 
                STATUS_EN = '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s5;
            END IF;
         WHEN s6 => 
            IF (ACQ = '1') THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSE
               next_state <= s6;
            END IF;
         WHEN s7 => 
            IF (MISO = '0') THEN 
               next_state <= s5;
            ELSIF (STATUS_EN = '1' AND
                   READ_EN = '1') THEN 
               next_state <= s8;
            ELSE
               next_state <= s7;
            END IF;
         WHEN s8 => 
            IF (READ_EN = '0' AND
                STATUS_EN = '0') THEN 
               next_state <= s10;
               csm_to_s10 <= '1';
            ELSE
               next_state <= s8;
            END IF;
         WHEN s9 => 
            IF (csm_timeout = '1' AND (ACQ = '0')) THEN 
               next_state <= s0;
            ELSE
               next_state <= s9;
            END IF;
         WHEN s10 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s11;
               csm_to_s11 <= '1';
            ELSE
               next_state <= s10;
            END IF;
         WHEN s11 => 
            IF (csm_timeout = '1' AND (COUNT < 5)) THEN 
               next_state <= s10;
               csm_to_s10 <= '1';
            ELSIF (csm_timeout = '1' AND (COUNT >= 5)) THEN 
               next_state <= s12;
               csm_to_s12 <= '1';
            ELSE
               next_state <= s11;
            END IF;
         WHEN s12 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s13;
               csm_to_s13 <= '1';
            ELSE
               next_state <= s12;
            END IF;
         WHEN s13 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s7;
            ELSE
               next_state <= s13;
            END IF;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s1,
      csm_to_s2,
      csm_to_s3,
      csm_to_s9,
      csm_to_s10,
      csm_to_s11,
      csm_to_s12,
      csm_to_s13
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s1 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s2 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s3 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s9 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s10 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s11 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s12 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSIF (csm_to_s13 = '1') THEN
         csm_next_timer <= "011"; -- no cycles(4)-1=3
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   CS_B <= CS_B_cld;
   EOC <= EOC_cld;
   ERR <= ERR_cld;
   INTENSITY <= INTENSITY_cld;
   MOSI <= MOSI_cld;
   SCLK <= SCLK_cld;
END fsm;

--
-- VHDL Test Bench idx_fpga_lib.bench_ao.ao_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:53:03 02/ 2/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY bench_ao IS
END bench_ao;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;

ARCHITECTURE rtl OF bench_ao IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Addr      : std_logic_vector(15 DOWNTO 0);
   SIGNAL DA_CLR_B  : std_logic;
   SIGNAL DA_CS_B   : std_logic_vector(1 DOWNTO 0);
   SIGNAL DA_LDAC_B : std_logic;
   SIGNAL DA_SCK    : std_logic;
   SIGNAL DA_SDI    : std_logic;
   SIGNAL Data      : std_logic_vector(15 DOWNTO 0);
   SIGNAL ExpAck    : std_ulogic;
   SIGNAL ExpRd     : std_ulogic;
   SIGNAL ExpWr     : std_ulogic;
   SIGNAL F66M      : std_logic;
   SIGNAL F8M       : std_ulogic;
   SIGNAL rst       : std_ulogic;
   SIGNAL Done      : std_ulogic;
   SIGNAL Read_Result: std_logic_vector(15 DOWNTO 0);


   -- Component declarations
   COMPONENT ao
      PORT (
         Addr      : IN     std_logic_vector(15 DOWNTO 0);
         DA_CLR_B  : OUT    std_logic;
         DA_CS_B   : OUT    std_logic_vector(1 DOWNTO 0);
         DA_LDAC_B : OUT    std_logic;
         DA_SCK    : OUT    std_logic;
         DA_SDI    : OUT    std_logic;
         Data      : INOUT  std_logic_vector(15 DOWNTO 0);
         ExpAck    : OUT    std_ulogic;
         ExpRd     : IN     std_ulogic;
         ExpWr     : IN     std_ulogic;
         F66M      : IN     std_logic;
         F8M       : IN     std_ulogic;
         rst       : IN     std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT_ao : ao USE ENTITY idx_fpga_lib.ao;
   -- pragma synthesis_on

BEGIN

         DUT_ao : ao
            PORT MAP (
               Addr      => Addr,
               DA_CLR_B  => DA_CLR_B,
               DA_CS_B   => DA_CS_B,
               DA_LDAC_B => DA_LDAC_B,
               DA_SCK    => DA_SCK,
               DA_SDI    => DA_SDI,
               Data      => Data,
               ExpAck    => ExpAck,
               ExpRd     => ExpRd,
               ExpWr     => ExpWr,
               F66M      => F66M,
               F8M       => F8M,
               rst       => rst
            );

    -- Approximately 66.6 MHz
    clock : Process
    Begin
      F66M <= '0';
      -- pragma synthesis_off
      wait for 40 ns;
      while Done = '0' loop
        F66M <= '0';
        wait for 7 ns;
        F66M <= '1';
        wait for 8 ns;
      end loop;
      wait;
      -- pragma synthesis_on
    End Process;

    -- 8 MHz
    clock8 : Process
    Begin
      F8M <= '0';
      -- pragma synthesis_off
      wait for 40 ns;
      while Done = '0' loop
        F8M <= '0';
        wait for 62 ns;
        F8M <= '1';
        wait for 63 ns;
      end loop;
      wait;
      -- pragma synthesis_on
    End Process;

  test_proc : Process Is
  
    procedure sbrd( addr_in : std_logic_vector (15 DOWNTO 0) ) is
    begin
      Addr <= addr_in;
      -- pragma synthesis_off
      wait for 125 ns;
      ExpRd <= '1';
      wait for 1 us;
      assert ExpAck = '1' report "No Acknowledge on read" severity error;
      Read_Result <= Data;
      ExpRd <= '0';
      wait for 125 ns;
      -- pragma synthesis_on
      return;
    end procedure sbrd;
    
    procedure sbwr( Addr_In : IN std_logic_vector (15 downto 0);
                    Data_In : IN std_logic_vector (15 downto 0) ) is
    begin
      Addr <= Addr_In;
      Data <= Data_in;
      -- pragma synthesis_off
      wait for 40 ns;
      ExpWr <= '1';
      wait for 1 us;
      assert ExpAck = '1' report "No acknowledge on write" severity error;
      ExpWr <= '0';
      wait for 250 ns;
      Data <= (others => 'Z');
      -- pragma synthesis_on
      return;
    end procedure sbwr;
    
    procedure check_read( Addr_In : IN std_logic_vector(15 downto 0);
                          Chk_Data : IN std_logic_vector(15 downto 0) ) is
    begin
      sbrd(Addr_In);
      assert Read_Result = Chk_Data
        report "Readback data incorrect"
        severity error;
      return;
    end procedure;
Begin
    Done <= '0';
    rst <= '1';
    Addr <= X"0000";
    Data <= X"0000";
    ExpWr <= '0';
    ExpRd <= '0';
    -- pragma synthesis_off
    wait until F8M'Event AND F8M = '1';
    wait until F8M'Event AND F8M = '1';
    rst <= '0';
    wait until F8M'Event AND F8M = '1';
    sbwr( X"0406", X"55AA" );
    wait for 1 us;
    sbwr( X"0414", X"AA55" );
    wait for 1 us;
    check_read(X"0406", X"55AA");
    check_read(X"0415", X"AA55");
    check_read(X"0400", X"0000");
    Done <= '1';
    wait;
    -- pragma synthesis_on
  End Process;

END rtl;
-- VHDL Entity idx_fpga_lib.qclic_ser.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:57:53 01/27/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;

ENTITY qclic_ser IS
   GENERIC( 
      HPER : natural := 64
   );
   PORT( 
      F8M      : IN     std_logic;
      QNBsy    : IN     std_logic;
      RdSer    : IN     std_logic;
      WDataS   : IN     std_logic_vector (15 DOWNTO 0);
      WrSer    : IN     std_logic;
      qsclk_i  : IN     std_ulogic;
      qsdata_i : IN     std_ulogic;
      rst      : IN     std_logic;
      Busy     : OUT    std_logic;
      QSync    : OUT    std_ulogic;
      RDataS   : OUT    std_logic_vector (15 DOWNTO 0);
      RdAck    : OUT    std_logic;
      qsclk_o  : OUT    std_ulogic;
      qsdata_o : OUT    std_ulogic
   );

-- Declarations

END qclic_ser ;

--
-- VHDL Architecture idx_fpga_lib.qclic_ser.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 15:57:53 01/27/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF qclic_ser IS

   -- Architecture Declarations
   function HPERdly ( diff : integer )
   return std_logic_vector IS
   BEGIN
     return conv_std_logic_vector(HPER-diff,7);
   END function HPERdly;
   
   function QPERdly ( diff : integer )
   return std_logic_vector IS
   BEGIN
     return conv_std_logic_vector(HPER/2-diff,7);
   END function QPERdly;
   SIGNAL Bit : std_logic;  
   SIGNAL SCnt : std_logic_vector(4 DOWNTO 0);  
   SIGNAL SData : std_logic_vector(15 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      qs_idle,
      qs_w0,
      qs_w2,
      qs_w3,
      qs_w1,
      qs_w4,
      qs_w5,
      qs_w6,
      qs_w0a,
      qs_r0,
      qs_r1,
      qs_r2,
      qs_r3,
      qs_r5,
      qs_r6,
      qs_r8,
      qs_w7
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(6 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(6 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_qs_w3 : std_logic;
   SIGNAL csm_to_qs_w1 : std_logic;
   SIGNAL csm_to_qs_w5 : std_logic;
   SIGNAL csm_to_qs_r1 : std_logic;
   SIGNAL csm_to_qs_w7 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL Busy_cld : std_logic ;
   SIGNAL QSync_cld : std_ulogic ;
   SIGNAL RDataS_cld : std_logic_vector (15 DOWNTO 0);
   SIGNAL RdAck_cld : std_logic ;
   SIGNAL qsclk_o_cld : std_ulogic ;
   SIGNAL qsdata_o_cld : std_ulogic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= qs_idle;
            csm_timer <= (OTHERS => '0');
            -- Default Reset Values
            Busy_cld <= '0';
            QSync_cld <= '1';
            RDataS_cld <= (others => '0');
            RdAck_cld <= '0';
            qsclk_o_cld <= '0';
            qsdata_o_cld <= '0';
            Bit <= '0';
            SCnt <= (others => '0');
            SData <= (others => '0');
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;

            -- Combined Actions
            CASE current_state IS
               WHEN qs_idle => 
                  IF (WrSer = '1' AND
                      qsclk_i = '0' AND
                      qsdata_i = '0' AND
                      QNBsy = '1') THEN 
                     SData <= WDataS;
                     Busy_cld <= '1';
                     SCnt <= "10001";
                  ELSIF (RdSer = '1' AND
                         qsclk_i = '0' AND
                         qsdata_i = '0' AND
                         QNBsy = '1') THEN 
                     QSync_cld <= '0';
                     Busy_cld <= '1';
                     SData <= (others => '0');
                  END IF;
               WHEN qs_w2 => 
                  qsdata_o_cld <= SData(15);
                  SData(15 DOWNTO 1) <=
                     SData(14 DOWNTO 0);
                  SData(0) <= '0';
                  SCnt <= SCnt - 1;
               WHEN qs_w3 => 
                  IF (csm_timeout = '1' AND (SCnt /= 0)) THEN 
                  ELSIF (csm_timeout = '1') THEN 
                     QSync_cld <= '1';
                  END IF;
               WHEN qs_w4 => 
                  qsclk_o_cld <= '1';
               WHEN qs_w6 => 
                  qsclk_o_cld <= '0';
               WHEN qs_w0a => 
                  QSync_cld <= '0';
               WHEN qs_r1 => 
                  IF (RdSer = '0') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  ELSIF (csm_timeout = '1') THEN 
                     QSync_cld <= '1';
                  END IF;
               WHEN qs_r2 => 
                  IF (RdSer = '0') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  END IF;
               WHEN qs_r3 => 
                  IF (RdSer = '0') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  ELSIF (QNBsy = '1') THEN 
                     RDataS_cld <= SData;
                     RdAck_cld <= '1';
                  ELSIF (qsclk_i = '1') THEN 
                     Bit <= qsdata_i;
                  END IF;
               WHEN qs_r5 => 
                  SData(15 DOWNTO 1) <=
                    SData(14 DOWNTO 0);
                  SData(0) <= Bit;
                  IF (RdSer = '0') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  END IF;
               WHEN qs_r6 => 
                  IF (RdSer = '0') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  END IF;
               WHEN qs_r8 => 
                  IF (RdSer = '0') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  END IF;
               WHEN qs_w7 => 
                  IF (csm_timeout = '1') THEN 
                     Busy_cld <= '0';
                     RdAck_cld <= '0';
                     QSync_cld <= '1';
                     qsclk_o_cld <= '0';
                     qsdata_o_cld <= '0';
                  END IF;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      QNBsy,
      RdSer,
      SCnt,
      WrSer,
      csm_timeout,
      current_state,
      qsclk_i,
      qsdata_i
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_qs_w3 <= '0';
      csm_to_qs_w1 <= '0';
      csm_to_qs_w5 <= '0';
      csm_to_qs_r1 <= '0';
      csm_to_qs_w7 <= '0';
      CASE current_state IS
         WHEN qs_idle => 
            IF (WrSer = '1' AND
                qsclk_i = '0' AND
                qsdata_i = '0' AND
                QNBsy = '1') THEN 
               next_state <= qs_w0;
            ELSIF (RdSer = '1' AND
                   qsclk_i = '0' AND
                   qsdata_i = '0' AND
                   QNBsy = '1') THEN 
               next_state <= qs_r0;
            ELSE
               next_state <= qs_idle;
            END IF;
         WHEN qs_w0 => 
            IF (WrSer = '0') THEN 
               next_state <= qs_w0a;
            ELSE
               next_state <= qs_w0;
            END IF;
         WHEN qs_w2 => 
            next_state <= qs_w3;
            csm_to_qs_w3 <= '1';
         WHEN qs_w3 => 
            IF (csm_timeout = '1' AND (SCnt /= 0)) THEN 
               next_state <= qs_w4;
            ELSIF (csm_timeout = '1') THEN 
               next_state <= qs_w7;
               csm_to_qs_w7 <= '1';
            ELSE
               next_state <= qs_w3;
            END IF;
         WHEN qs_w1 => 
            IF (csm_timeout = '1') THEN 
               next_state <= qs_w2;
            ELSE
               next_state <= qs_w1;
            END IF;
         WHEN qs_w4 => 
            next_state <= qs_w5;
            csm_to_qs_w5 <= '1';
         WHEN qs_w5 => 
            IF (csm_timeout = '1') THEN 
               next_state <= qs_w6;
            ELSE
               next_state <= qs_w5;
            END IF;
         WHEN qs_w6 => 
            next_state <= qs_w1;
            csm_to_qs_w1 <= '1';
         WHEN qs_w0a => 
            next_state <= qs_w1;
            csm_to_qs_w1 <= '1';
         WHEN qs_r0 => 
            next_state <= qs_r1;
            csm_to_qs_r1 <= '1';
         WHEN qs_r1 => 
            IF (RdSer = '0') THEN 
               next_state <= qs_idle;
            ELSIF (csm_timeout = '1') THEN 
               next_state <= qs_r2;
            ELSE
               next_state <= qs_r1;
            END IF;
         WHEN qs_r2 => 
            IF (RdSer = '0') THEN 
               next_state <= qs_idle;
            ELSIF (QNBsy = '0') THEN 
               next_state <= qs_r3;
            ELSE
               next_state <= qs_r2;
            END IF;
         WHEN qs_r3 => 
            IF (RdSer = '0') THEN 
               next_state <= qs_idle;
            ELSIF (QNBsy = '1') THEN 
               next_state <= qs_r6;
            ELSIF (qsclk_i = '1') THEN 
               next_state <= qs_r8;
            ELSE
               next_state <= qs_r3;
            END IF;
         WHEN qs_r5 => 
            IF (RdSer = '0') THEN 
               next_state <= qs_idle;
            ELSE
               next_state <= qs_r3;
            END IF;
         WHEN qs_r6 => 
            IF (RdSer = '0') THEN 
               next_state <= qs_idle;
            ELSE
               next_state <= qs_r6;
            END IF;
         WHEN qs_r8 => 
            IF (RdSer = '0') THEN 
               next_state <= qs_idle;
            ELSIF (qsclk_i = '0') THEN 
               next_state <= qs_r5;
            ELSE
               next_state <= qs_r8;
            END IF;
         WHEN qs_w7 => 
            IF (csm_timeout = '1') THEN 
               next_state <= qs_idle;
            ELSE
               next_state <= qs_w7;
            END IF;
         WHEN OTHERS =>
            next_state <= qs_idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_qs_w3,
      csm_to_qs_w1,
      csm_to_qs_w5,
      csm_to_qs_r1,
      csm_to_qs_w7
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_qs_w3 = '1') THEN
         csm_next_timer <= QPERdly(1) - 1;
      ELSIF (csm_to_qs_w1 = '1') THEN
         csm_next_timer <= QPERdly(1) - 1;
      ELSIF (csm_to_qs_w5 = '1') THEN
         csm_next_timer <= HPERdly(1) - 1;
      ELSIF (csm_to_qs_r1 = '1') THEN
         csm_next_timer <= HPERdly(1) - 1;
      ELSIF (csm_to_qs_w7 = '1') THEN
         csm_next_timer <= HPERdly(0) - 1;
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   Busy <= Busy_cld;
   QSync <= QSync_cld;
   RDataS <= RDataS_cld;
   RdAck <= RdAck_cld;
   qsclk_o <= qsclk_o_cld;
   qsdata_o <= qsdata_o_cld;
END fsm;

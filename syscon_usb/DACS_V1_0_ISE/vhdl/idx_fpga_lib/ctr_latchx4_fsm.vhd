-- VHDL Entity idx_fpga_lib.ctr_latchx4.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 11:47:27 07/27/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ctr_latchx4 IS
  PORT( 
    LatchX4 : IN     std_logic;
    RS      : IN     std_logic;
    clk     : IN     std_logic;
    Latch   : OUT    std_logic
  );

-- Declarations

END ENTITY ctr_latchx4 ;

--
-- VHDL Architecture idx_fpga_lib.ctr_latchx4.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 11:47:27 07/27/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
--  Machine             :  "csm", synchronous
--  Encoding            :  none
--  Style               :  case, 3 processes
--  Clock               :  "clk", rising 
--  Asynchronous Reset  :  "RS", asynchronous, active high
--  Enable              :  "LatchX4", high
--  State variable type :  [auto]
--  Default state assignment disabled
--  State actions registered on current state
--  
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF ctr_latchx4 IS

  TYPE STATE_TYPE IS (
    Reset,
    L3,
    L0,
    L1,
    L2
  );
 
  -- Declare current and next state signals
  SIGNAL current_state : STATE_TYPE;
  SIGNAL next_state : STATE_TYPE;

  -- Declare any pre-registered internal signals
  SIGNAL Latch_cld : std_logic ;

BEGIN

  -----------------------------------------------------------------
  clocked_proc : PROCESS ( 
    clk,
    RS
  )
  -----------------------------------------------------------------
  BEGIN
    IF (RS = '1') THEN
      current_state <= Reset;
      -- Default Reset Values
      Latch_cld <= '0';
    ELSIF (clk'EVENT AND clk = '1') THEN
      IF (LatchX4 = '1') THEN
        current_state <= next_state;

        -- Combined Actions
        CASE current_state IS
          WHEN Reset => 
            Latch_cld <= '0' ;
          WHEN L0 => 
            Latch_cld <= '1' ;
          WHEN L1 => 
            Latch_cld <= '0' ;
          WHEN OTHERS =>
            NULL;
        END CASE;
      END IF;
    END IF;
  END PROCESS clocked_proc;
 
  -----------------------------------------------------------------
  nextstate_proc : PROCESS ( 
    current_state
  )
  -----------------------------------------------------------------
  BEGIN
    CASE current_state IS
      WHEN Reset => 
        next_state <= L3;
      WHEN L3 => 
        next_state <= L0;
      WHEN L0 => 
        next_state <= L1;
      WHEN L1 => 
        next_state <= L2;
      WHEN L2 => 
        next_state <= L3;
      WHEN OTHERS =>
        next_state <= Reset;
    END CASE;
  END PROCESS nextstate_proc;
 
  -- Concurrent Statements
  -- Clocked output assignments
  Latch <= Latch_cld;
END ARCHITECTURE fsm;

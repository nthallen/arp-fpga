-- VHDL Entity idx_fpga_lib.ctr_latch.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 16:24:13 10/ 1/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ctr_latch IS
   PORT( 
      clk    : IN     std_logic;
      latch  : IN     std_logic;
      rst    : IN     std_logic;
      cntclr : OUT    std_logic;
      cnten  : OUT    std_logic;
      regen  : OUT    std_logic
   );

-- Declarations

END ctr_latch ;

--
-- VHDL Architecture idx_fpga_lib.ctr_latch.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 16:24:14 10/ 1/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF ctr_latch IS

   TYPE STATE_TYPE IS (
      cl0,
      cl1,
      cl2,
      cl3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL cntclr_cld : std_logic ;
   SIGNAL cnten_cld : std_logic ;
   SIGNAL regen_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk
   )
   -----------------------------------------------------------------
   BEGIN
      IF (clk'EVENT AND clk = '1') THEN
         IF (rst = '1') THEN
            current_state <= cl2;
            -- Default Reset Values
            cntclr_cld <= '0';
            cnten_cld <= '1';
            regen_cld <= '0';
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN cl0 => 
                  cnten_cld <= '1' ;
                  regen_cld <= '0' ;
                  cntclr_cld <= '0' ;
               WHEN cl1 => 
                  cnten_cld <= '1' ;
                  regen_cld <= '0' ;
                  cntclr_cld <= '0' ;
                  IF (latch /= '1') THEN 
                  ELSIF (latch = '1') THEN 
                     cnten_cld <= '0' ;
                     regen_cld <= '1' ;
                     cntclr_cld <= '0' ;
                  END IF;
               WHEN cl2 => 
                  cnten_cld <= '0' ;
                  regen_cld <= '0' ;
                  cntclr_cld <= '1' ;
               WHEN cl3 => 
                  cnten_cld <= '1' ;
                  regen_cld <= '0' ;
                  cntclr_cld <= '0' ;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      latch
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN cl0 => 
            IF (latch /= '1') THEN 
               next_state <= cl1;
            ELSIF (latch = '1') THEN 
               next_state <= cl0;
            END IF;
         WHEN cl1 => 
            IF (latch /= '1') THEN 
               next_state <= cl1;
            ELSIF (latch = '1') THEN 
               next_state <= cl2;
            ELSE
               next_state <= cl1;
            END IF;
         WHEN cl2 => 
            next_state <= cl3;
         WHEN cl3 => 
            next_state <= cl0;
         WHEN OTHERS =>
            next_state <= cl0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   cntclr <= cntclr_cld;
   cnten <= cnten_cld;
   regen <= regen_cld;
END fsm;

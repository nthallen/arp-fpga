-- VHDL Entity idx_fpga_lib.adc_data_ready.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 17:00:26 05/01/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.All;

ENTITY adc_data_ready IS
   PORT( 
      ACQ_OUT    : IN     std_logic;
      ALL_EOC    : IN     std_logic;
      F8M        : IN     std_logic;
      OUT_ACK    : IN     std_logic;
      rst        : IN     std_logic;
      DATA_READY : OUT    std_logic
   );

-- Declarations

END adc_data_ready ;

--
-- VHDL Architecture idx_fpga_lib.adc_data_ready.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 17:00:26 05/01/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.All;
 
ARCHITECTURE fsm OF adc_data_ready IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      init,
      s3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL DATA_READY_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= init;
            -- Default Reset Values
            DATA_READY_cld <= '0';
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN s1 => 
                  DATA_READY_cld <= '1';
               WHEN s2 => 
                  DATA_READY_cld <= '0';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ACQ_OUT,
      ALL_EOC,
      OUT_ACK,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (ALL_EOC = '0') THEN 
               next_state <= s1;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (OUT_ACK = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (OUT_ACK = '0') THEN 
               next_state <= s3;
            ELSE
               next_state <= s2;
            END IF;
         WHEN init => 
            next_state <= s3;
         WHEN s3 => 
            IF (ACQ_OUT = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s3;
            END IF;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   DATA_READY <= DATA_READY_cld;
END fsm;

-- VHDL Entity idx_fpga_lib.ptrhm_acquire.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:46:06 09/17/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ptrhm.all;

ENTITY ptrhm_acquire IS
   GENERIC( 
      N_PTRH      : integer range 16 downto 1 := 8;
      N_ISBITS    : integer range 8 downto 1  := 4;
      ESID        : ESID_array                := ( 3, 2, 1, 0, 0, 0, 0, 0 );
      ESwitchBit  : ESB_array                 := ( 0, 0, 0, 4, 3, 2, 1, 0 );
      ESwitchAddr : ESA_array                 := ( "0000000", "0000000", "0000000", "1110000" );
      ISwitchBit  : ISB_array                 := ( 3, 2, 1, 0 )
   );
   PORT( 
      Addr   : IN     std_logic_vector (15 DOWNTO 0);
      ExpRd  : IN     std_ulogic;
      ExpWr  : IN     std_ulogic;
      F8M    : IN     std_ulogic;
      rst    : IN     std_logic;
      ExpAck : OUT    std_ulogic;
      rData  : OUT    std_logic_vector (15 DOWNTO 0);
      scl    : INOUT  std_logic_vector (N_ISBITS-1 DOWNTO 0);
      sda    : INOUT  std_logic_vector (N_ISBITS-1 DOWNTO 0)
   );

-- Declarations

END ptrhm_acquire ;

--
-- VHDL Architecture idx_fpga_lib.ptrhm_acquire.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 13:46:07 09/17/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
--  Copyright 2011 President and Fellows of Harvard College
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ptrhm.all;
USE idx_fpga_lib.All;


ARCHITECTURE struct OF ptrhm_acquire IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BdEn         : std_ulogic;
   SIGNAL ISwitch      : std_ulogic_vector(N_ISBITS-1 DOWNTO 0);
   SIGNAL PTRHEn       : std_ulogic_vector(N_PTRH-1 DOWNTO 0);
   SIGNAL RdEn         : std_ulogic;
   SIGNAL RegEn        : std_logic_vector(12 DOWNTO 0);
   SIGNAL WrEn         : std_logic_vector(12 DOWNTO 0);
   SIGNAL WrPTRHEn     : std_ulogic_vector(N_PTRH-1 DOWNTO 0);
   SIGNAL arst_i       : std_logic;
   SIGNAL cmd          : ptrhm_i2c_op;
   SIGNAL done         : std_ulogic;
   SIGNAL err          : std_ulogic;
   SIGNAL i2c_addr     : std_ulogic_vector(6 DOWNTO 0);
   SIGNAL i2c_rdata    : std_logic_vector(23 DOWNTO 0);
   SIGNAL i2c_wdata    : std_logic_vector(7 DOWNTO 0);
   SIGNAL scl_pad_i    : std_logic;
   SIGNAL scl_pad_o    : std_logic;
   SIGNAL scl_padoen_o : std_logic;
   SIGNAL sda_pad_i    : std_logic;
   SIGNAL sda_pad_o    : std_logic;
   SIGNAL sda_padoen_o : std_logic;
   SIGNAL sw_addr      : std_ulogic_vector(6 DOWNTO 0);
   SIGNAL sw_cmd       : ptrhm_i2c_op;
   SIGNAL sw_done      : std_ulogic;
   SIGNAL sw_err       : std_ulogic;
   SIGNAL sw_rdata     : std_logic_vector(23 DOWNTO 0);
   SIGNAL sw_wdata     : std_logic_vector(7 DOWNTO 0);
   SIGNAL wData        : std_logic_vector(23 DOWNTO 0);
   SIGNAL wb_ack_o     : std_logic;
   SIGNAL wb_adr_i     : std_logic_vector(2 DOWNTO 0);
   SIGNAL wb_cyc_i     : std_logic;
   SIGNAL wb_dat_i     : std_logic_vector(7 DOWNTO 0);
   SIGNAL wb_dat_o     : std_logic_vector(7 DOWNTO 0);
   SIGNAL wb_inta_o    : std_logic;
   SIGNAL wb_stb_i     : std_logic;
   SIGNAL wb_we_i      : std_logic;


   -- Component Declarations
   COMPONENT i2c_half_switch
   GENERIC (
      N_ISBITS : integer range 20 downto 1 := 4
   );
   PORT (
      En       : IN     std_ulogic_vector (N_ISBITS-1 DOWNTO 0);
      pad_o    : IN     std_logic ;
      padoen_o : IN     std_logic ;
      pad_i    : OUT    std_logic ;
      pad      : INOUT  std_logic_vector (N_ISBITS-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT i2c_master_top
   GENERIC (
      ARST_LVL : std_logic := '0'      -- asynchronous reset level
   );
   PORT (
      -- wishbone signals
      wb_clk_i     : IN     std_logic ;                    -- master clock input
      wb_rst_i     : IN     std_logic  := '0';             -- synchronous active high reset
      arst_i       : IN     std_logic  := not ARST_LVL;    -- asynchronous reset
      wb_adr_i     : IN     std_logic_vector (2 DOWNTO 0); -- lower address bits
      wb_dat_i     : IN     std_logic_vector (7 DOWNTO 0); -- Databus input
      wb_dat_o     : OUT    std_logic_vector (7 DOWNTO 0); -- Databus output
      wb_we_i      : IN     std_logic ;                    -- Write enable input
      wb_stb_i     : IN     std_logic ;                    -- Strobe signals / core select signal
      wb_cyc_i     : IN     std_logic ;                    -- Valid bus cycle input
      wb_ack_o     : OUT    std_logic ;                    -- Bus cycle acknowledge output
      wb_inta_o    : OUT    std_logic ;                    -- interrupt request output signal
      -- i2c lines
      scl_pad_i    : IN     std_logic ;                    -- i2c clock line input
      scl_pad_o    : OUT    std_logic ;                    -- i2c clock line output
      scl_padoen_o : OUT    std_logic ;                    -- i2c clock line output enable, active low
      sda_pad_i    : IN     std_logic ;                    -- i2c data line input
      sda_pad_o    : OUT    std_logic ;                    -- i2c data line output
      sda_padoen_o : OUT    std_logic                      -- i2c data line output enable, active low
   );
   END COMPONENT;
   COMPONENT ptrhm_acq_sm
   GENERIC (
      N_PTRH : integer range 16 downto 1 := 8
   );
   PORT (
      F8M      : IN     std_ulogic ;
      rst      : IN     std_logic ;
      sw_done  : IN     std_ulogic ;
      sw_err   : IN     std_ulogic ;
      sw_rdata : IN     std_logic_vector (23 DOWNTO 0);
      WrEn     : OUT    std_logic_vector (12 DOWNTO 0);
      WrPTRHEn : OUT    std_ulogic_vector (N_PTRH-1 DOWNTO 0);
      sw_addr  : OUT    std_ulogic_vector (6 DOWNTO 0);
      sw_cmd   : OUT    ptrhm_i2c_op ;
      sw_wdata : OUT    std_logic_vector (7 DOWNTO 0);
      wData    : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ptrhm_addr
   GENERIC (
      BASE_ADDR : std_logic_vector(15 DOWNTO 0) := X"0200";
      -- Extending N_PTRH beyond 8 requires changes below
      N_PTRH    : integer range 16 downto 2     := 2
   );
   PORT (
      Addr   : IN     std_logic_vector (15 DOWNTO 0);
      BdEn   : OUT    std_ulogic;
      PTRHEn : OUT    std_ulogic_vector (N_PTRH-1 DOWNTO 0);
      RegEn  : OUT    std_logic_vector (12 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ptrhm_dprams
   GENERIC (
      N_PTRH : integer range 20 downto 1 := 2
   );
   PORT (
      F8M      : IN     std_ulogic;
      PTRHEn   : IN     std_ulogic_vector (N_PTRH-1 DOWNTO 0);
      RdEn     : IN     std_ulogic;
      RegEn    : IN     std_logic_vector (12 DOWNTO 0);
      WrEn     : IN     std_logic_vector (12 DOWNTO 0);
      WrPTRHEn : IN     std_ulogic_vector (N_PTRH-1 DOWNTO 0);
      rst      : IN     std_ulogic;
      wData    : IN     std_logic_vector (23 DOWNTO 0);
      rData    : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ptrhm_i2c_sm
   PORT (
      F8M       : IN     std_ulogic ;
      cmd       : IN     ptrhm_i2c_op ;
      i2c_addr  : IN     std_ulogic_vector (6 DOWNTO 0);
      i2c_wdata : IN     std_logic_vector (7 DOWNTO 0);
      rst       : IN     std_ulogic ;
      wb_ack_o  : IN     std_logic ;
      wb_dat_o  : IN     std_logic_vector (7 DOWNTO 0);
      wb_inta_o : IN     std_logic ;
      arst_i    : OUT    std_logic ;
      done      : OUT    std_ulogic ;
      err       : OUT    std_ulogic ;
      i2c_rdata : OUT    std_logic_vector (23 DOWNTO 0);
      wb_adr_i  : OUT    std_logic_vector (2 DOWNTO 0);
      wb_cyc_i  : OUT    std_logic ;
      wb_dat_i  : OUT    std_logic_vector (7 DOWNTO 0);
      wb_stb_i  : OUT    std_logic ;
      wb_we_i   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ptrhm_sw_sm
   GENERIC (
      N_PTRH      : integer range 16 downto 1 := 8;
      N_ISBITS    : integer range 8 downto 1  := 4;
      ESID        : ESID_array                := ( 3, 2, 1, 0, 0, 0, 0, 0 );
      ESwitchBit  : ESB_array                 := ( 0, 0, 0, 4, 3, 2, 1, 0 );
      ESwitchAddr : ESA_array                 := ( "0000000", "0000000", "0000000", "1110000" );
      ISwitchBit  : ISB_array                 := ( 3, 2, 1, 0 )
   );
   PORT (
      clk       : IN     std_logic ;
      done      : IN     std_ulogic ;
      err       : IN     std_ulogic ;
      i2c_rdata : IN     std_logic_vector (23 DOWNTO 0);
      rst       : IN     std_logic ;
      sw_addr   : IN     std_ulogic_vector (6 DOWNTO 0);
      sw_cmd    : IN     ptrhm_i2c_op ;
      sw_wdata  : IN     std_logic_vector (7 DOWNTO 0);
      ISwitch   : OUT    std_ulogic_vector (N_ISBITS-1 DOWNTO 0);
      cmd       : OUT    ptrhm_i2c_op ;
      i2c_addr  : OUT    std_ulogic_vector (6 DOWNTO 0);
      i2c_wdata : OUT    std_logic_vector (7 DOWNTO 0);
      sw_done   : OUT    std_ulogic ;
      sw_err    : OUT    std_ulogic ;
      sw_rdata  : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT subbus_io
   PORT (
      ExpRd  : IN     std_ulogic ;
      ExpWr  : IN     std_ulogic ;
      ExpAck : OUT    std_ulogic ;
      F8M    : IN     std_ulogic ;
      RdEn   : OUT    std_ulogic ;
      WrEn   : OUT    std_ulogic ;
      BdEn   : IN     std_ulogic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : i2c_half_switch USE ENTITY idx_fpga_lib.i2c_half_switch;
   FOR ALL : i2c_master_top USE ENTITY idx_fpga_lib.i2c_master_top;
   FOR ALL : ptrhm_acq_sm USE ENTITY idx_fpga_lib.ptrhm_acq_sm;
   FOR ALL : ptrhm_addr USE ENTITY idx_fpga_lib.ptrhm_addr;
   FOR ALL : ptrhm_dprams USE ENTITY idx_fpga_lib.ptrhm_dprams;
   FOR ALL : ptrhm_i2c_sm USE ENTITY idx_fpga_lib.ptrhm_i2c_sm;
   FOR ALL : ptrhm_sw_sm USE ENTITY idx_fpga_lib.ptrhm_sw_sm;
   FOR ALL : subbus_io USE ENTITY idx_fpga_lib.subbus_io;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   iswitch_scl : i2c_half_switch
      GENERIC MAP (
         N_ISBITS => N_ISBITS
      )
      PORT MAP (
         En       => ISwitch,
         pad_o    => scl_pad_o,
         padoen_o => scl_padoen_o,
         pad_i    => scl_pad_i,
         pad      => scl
      );
   iswitch_sda : i2c_half_switch
      GENERIC MAP (
         N_ISBITS => N_ISBITS
      )
      PORT MAP (
         En       => ISwitch,
         pad_o    => sda_pad_o,
         padoen_o => sda_padoen_o,
         pad_i    => sda_pad_i,
         pad      => sda
      );
   i2c_master : i2c_master_top
      GENERIC MAP (
         ARST_LVL => '0'         -- asynchronous reset level
      )
      PORT MAP (
         wb_clk_i     => F8M,
         wb_rst_i     => rst,
         arst_i       => arst_i,
         wb_adr_i     => wb_adr_i,
         wb_dat_i     => wb_dat_i,
         wb_dat_o     => wb_dat_o,
         wb_we_i      => wb_we_i,
         wb_stb_i     => wb_stb_i,
         wb_cyc_i     => wb_cyc_i,
         wb_ack_o     => wb_ack_o,
         wb_inta_o    => wb_inta_o,
         scl_pad_i    => scl_pad_i,
         scl_pad_o    => scl_pad_o,
         scl_padoen_o => scl_padoen_o,
         sda_pad_i    => sda_pad_i,
         sda_pad_o    => sda_pad_o,
         sda_padoen_o => sda_padoen_o
      );
   acq_sm : ptrhm_acq_sm
      GENERIC MAP (
         N_PTRH => N_PTRH
      )
      PORT MAP (
         F8M      => F8M,
         rst      => rst,
         sw_done  => sw_done,
         sw_err   => sw_err,
         sw_rdata => sw_rdata,
         WrEn     => WrEn,
         WrPTRHEn => WrPTRHEn,
         sw_addr  => sw_addr,
         sw_cmd   => sw_cmd,
         sw_wdata => sw_wdata,
         wData    => wData
      );
   pt_addr : ptrhm_addr
      GENERIC MAP (
         BASE_ADDR => X"0200",
         -- Extending N_PTRH beyond 8 requires changes below
         N_PTRH    => N_PTRH
      )
      PORT MAP (
         Addr   => Addr,
         BdEn   => BdEn,
         PTRHEn => PTRHEn,
         RegEn  => RegEn
      );
   dprams : ptrhm_dprams
      GENERIC MAP (
         N_PTRH => N_PTRH
      )
      PORT MAP (
         F8M      => F8M,
         rst      => rst,
         RdEn     => RdEn,
         RegEn    => RegEn,
         PTRHEn   => PTRHEn,
         WrEn     => WrEn,
         WrPTRHEn => WrPTRHEn,
         wData    => wData,
         rData    => rData
      );
   m_i2c_sm : ptrhm_i2c_sm
      PORT MAP (
         F8M       => F8M,
         cmd       => cmd,
         i2c_addr  => i2c_addr,
         i2c_wdata => i2c_wdata,
         rst       => rst,
         wb_ack_o  => wb_ack_o,
         wb_dat_o  => wb_dat_o,
         wb_inta_o => wb_inta_o,
         arst_i    => arst_i,
         done      => done,
         err       => err,
         i2c_rdata => i2c_rdata,
         wb_adr_i  => wb_adr_i,
         wb_cyc_i  => wb_cyc_i,
         wb_dat_i  => wb_dat_i,
         wb_stb_i  => wb_stb_i,
         wb_we_i   => wb_we_i
      );
   m_sw_sm : ptrhm_sw_sm
      GENERIC MAP (
         N_PTRH      => N_PTRH,
         N_ISBITS    => N_ISBITS,
         ESID        => ESID,
         ESwitchBit  => ESwitchBit,
         ESwitchAddr => ESwitchAddr,
         ISwitchBit  => ISwitchBit
      )
      PORT MAP (
         clk       => F8M,
         done      => done,
         err       => err,
         i2c_rdata => i2c_rdata,
         rst       => rst,
         sw_addr   => sw_addr,
         sw_cmd    => sw_cmd,
         sw_wdata  => sw_wdata,
         ISwitch   => ISwitch,
         cmd       => cmd,
         i2c_addr  => i2c_addr,
         i2c_wdata => i2c_wdata,
         sw_done   => sw_done,
         sw_err    => sw_err,
         sw_rdata  => sw_rdata
      );
   io : subbus_io
      PORT MAP (
         ExpRd  => ExpRd,
         ExpWr  => ExpWr,
         ExpAck => ExpAck,
         F8M    => F8M,
         RdEn   => RdEn,
         WrEn   => OPEN,
         BdEn   => BdEn
      );

END struct;

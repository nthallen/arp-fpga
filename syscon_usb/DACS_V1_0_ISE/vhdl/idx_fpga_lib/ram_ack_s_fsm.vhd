-- VHDL Entity idx_fpga_lib.RAM_Ack_S.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 16:56:45 02/16/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY RAM_Ack_S IS
   PORT( 
      ExpAck  : IN     std_ulogic;
      ExpRd   : IN     std_ulogic;
      F8M     : IN     std_ulogic;
      RAM_Ack : IN     std_logic;
      rst     : IN     std_ulogic;
      AckOut  : OUT    std_logic
   );

-- Declarations

END RAM_Ack_S ;

--
-- VHDL Architecture idx_fpga_lib.RAM_Ack_S.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 16:56:45 02/16/2011
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF RAM_Ack_S IS

   TYPE STATE_TYPE IS (
      EA_Idle,
      EA_Wr,
      EA_Rd,
      EA_RdAck
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL AckOut_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= EA_Idle;
            -- Default Reset Values
            AckOut_cld <= '0';
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN EA_Idle => 
                  AckOut_cld <= '0' ;
                  IF (ExpAck = '1' AND ExpRd = '0') THEN 
                     AckOut_cld <= '1' ;
                  END IF;
               WHEN EA_Wr => 
                  IF (ExpAck = '0') THEN 
                     AckOut_cld <= '0' ;
                  END IF;
               WHEN EA_Rd => 
                  IF (RAM_Ack = '1') THEN 
                     AckOut_cld <= '1' ;
                  END IF;
               WHEN EA_RdAck => 
                  IF (ExpAck = '0') THEN 
                     AckOut_cld <= '0' ;
                  END IF;
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ExpAck,
      ExpRd,
      RAM_Ack,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN EA_Idle => 
            IF (ExpAck = '1' AND ExpRd = '0') THEN 
               next_state <= EA_Wr;
            ELSIF (ExpAck = '1' AND ExpRd = '1') THEN 
               next_state <= EA_Rd;
            ELSE
               next_state <= EA_Idle;
            END IF;
         WHEN EA_Wr => 
            IF (ExpAck = '0') THEN 
               next_state <= EA_Idle;
            ELSE
               next_state <= EA_Wr;
            END IF;
         WHEN EA_Rd => 
            IF (RAM_Ack = '1') THEN 
               next_state <= EA_RdAck;
            ELSIF (ExpAck = '0') THEN 
               next_state <= EA_Idle;
            ELSE
               next_state <= EA_Rd;
            END IF;
         WHEN EA_RdAck => 
            IF (ExpAck = '0') THEN 
               next_state <= EA_Idle;
            ELSE
               next_state <= EA_RdAck;
            END IF;
         WHEN OTHERS =>
            next_state <= EA_Idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   AckOut <= AckOut_cld;
END fsm;

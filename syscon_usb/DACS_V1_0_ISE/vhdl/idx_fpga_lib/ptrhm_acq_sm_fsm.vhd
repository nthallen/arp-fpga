-- VHDL Entity idx_fpga_lib.ptrhm_acq_sm.symbol
--
-- Created:
--          by - nort.UNKNOWN (EASWHLPT3425080)
--          at - 18:28:17 01/13/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ptrhm.all;

ENTITY ptrhm_acq_sm IS
   GENERIC( 
      N_PTRH : integer range 16 downto 1 := 8
   );
   PORT( 
      F8M      : IN     std_ulogic;
      rst      : IN     std_logic;
      sw_done  : IN     std_ulogic;
      sw_err   : IN     std_ulogic;
      sw_rdata : IN     std_logic_vector (23 DOWNTO 0);
      WrEn     : OUT    std_logic_vector (12 DOWNTO 0);
      WrPTRHEn : OUT    std_ulogic_vector (N_PTRH-1 DOWNTO 0);
      sw_addr  : OUT    std_ulogic_vector (6 DOWNTO 0);
      sw_cmd   : OUT    ptrhm_i2c_op;
      sw_wdata : OUT    std_logic_vector (7 DOWNTO 0);
      wData    : OUT    std_logic_vector (23 DOWNTO 0)
   );

-- Declarations

END ptrhm_acq_sm ;

--
-- VHDL Architecture idx_fpga_lib.ptrhm_acq_sm.fsm
--
-- Created:
--          by - nort.UNKNOWN (EASWHLPT3425080)
--          at - 18:28:17 01/13/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY idx_fpga_lib;
USE idx_fpga_lib.ptrhm.all;
USE idx_fpga_lib.All;
 
ARCHITECTURE fsm OF ptrhm_acq_sm IS

   -- Architecture Declarations
   type stat_array_t is array (integer range N_PTRH-1 downto 0) of std_logic_vector (15 downto 0);
   SIGNAL CfgWd : std_logic_vector(2 DOWNTO 0);  
   SIGNAL PTRHn : std_logic_vector(3 DOWNTO 0);  
   SIGNAL all_cfg_set : std_logic_vector(N_PTRH-1 DOWNTO 0);  
   SIGNAL all_cfgs_set : std_logic;  
   SIGNAL ms_ack : std_logic;  
   SIGNAL sht_ack : std_logic;  
   SIGNAL stat_array : stat_array_t;  

   TYPE STATE_TYPE IS (
      ma0,
      ma1,
      ma2,
      ma3,
      ma4,
      ma5,
      ma9,
      ma10,
      ma6,
      ma7,
      ma8,
      ma11,
      ma12,
      ma13,
      ma14,
      ma15,
      mar1,
      mar2,
      mar3,
      mar4,
      mar5,
      mar15,
      mar6,
      mar14,
      mar8,
      mar9,
      mar12,
      mar7,
      mar10,
      mar13,
      mar11,
      ma1_21,
      ma1_9,
      ma1_12,
      ma1_1,
      ma1_13,
      ma1_22,
      ma1_23,
      ma1_10,
      ma1_2,
      ma1_14,
      ma1_3,
      ma1_24,
      ma1_10a,
      ma1_15,
      ma1_17,
      ma1_25,
      ma1_26,
      ma1_4,
      ma1_5,
      ma1_11,
      ma1_27,
      ma1_16,
      ma1_6,
      ma1_28,
      ma1_19,
      ma1_18,
      ma1_7,
      ma1_8,
      ma1_20,
      ma2_21,
      ma2_9,
      ma2_12,
      ma2_1,
      ma2_13,
      ma2_22,
      ma2_23,
      ma2_10,
      ma2_2,
      ma2_14,
      ma2_3,
      ma2_10a,
      ma2_24,
      ma2_15,
      ma2_17,
      ma2_26,
      ma2_25,
      ma2_4,
      ma2_5,
      ma2_11,
      ma2_27,
      ma2_16,
      ma2_6,
      ma2_28,
      ma2_19,
      ma2_18,
      ma2_7,
      ma2_8,
      ma2_20,
      ma1_29,
      ma2_29
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(19 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(19 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_ma15 : std_logic;
   SIGNAL csm_to_ma1_10a : std_logic;
   SIGNAL csm_to_ma2_10a : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL WrEn_cld : std_logic_vector (12 DOWNTO 0);
   SIGNAL WrPTRHEn_cld : std_ulogic_vector (N_PTRH-1 DOWNTO 0);
   SIGNAL sw_addr_cld : std_ulogic_vector (6 DOWNTO 0);
   SIGNAL sw_cmd_cld : ptrhm_i2c_op ;
   SIGNAL sw_wdata_cld : std_logic_vector (7 DOWNTO 0);
   SIGNAL wData_cld : std_logic_vector (23 DOWNTO 0);

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      F8M
   )
   -----------------------------------------------------------------
   BEGIN
      IF (F8M'EVENT AND F8M = '1') THEN
         IF (rst = '1') THEN
            current_state <= ma0;
            csm_timer <= (OTHERS => '0');
            -- Default Reset Values
            WrEn_cld <= (others => '0');
            WrPTRHEn_cld <= (others => '0');
            sw_addr_cld <= (others => '0');
            sw_cmd_cld <= Init;
            sw_wdata_cld <= (others => '0');
            wData_cld <= (others => '0');
            CfgWd <= (others => '0');
            PTRHn <= (others => '0');
            all_cfg_set <= (others => '0');
            all_cfgs_set <= '0';
            ms_ack <= '0';
            sht_ack <= '0';
            stat_array <= (others => X"0000");
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;

            -- Combined Actions
            CASE current_state IS
               WHEN ma0 => 
                  stat_array <= (others => X"0000");
               WHEN ma1 => 
                  sw_cmd_cld <= NOP;
               WHEN ma2 => 
                  WrEn_cld <= (others => '1');
                  WrPTRHEn_cld <= (others => '1');
                  wData_cld <= (others => '0');
               WHEN ma3 => 
                  WrEn_cld <= (others => '0');
                  WrPTRHEn_cld <= (others => '0');
                  sw_cmd_cld <= SelectAll;
               WHEN ma4 => 
                  sw_cmd_cld <= NOP;
               WHEN ma5 => 
                  sw_cmd_cld <= Write;
                  sw_addr_cld <= "1000000";
                  sw_wdata_cld <= X"FE";
               WHEN ma9 => 
                  sw_cmd_cld <= NOP;
               WHEN ma10 => 
                  sw_cmd_cld <= Write;
                  sw_addr_cld <= "1110111";
                  sw_wdata_cld <= X"1E";
               WHEN ma6 => 
                  for i in N_PTRH-1 DOWNTO 0 loop
                    stat_array(i)(0) <= '1';
                  end loop;
               WHEN ma7 => 
                  WrEn_cld(6) <= '1';
                  WrPTRHEn_cld <=
                    (others => '1');
                  wData_cld(15 downto 0) <=
                    stat_array(0);
               WHEN ma8 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld <=
                    (others => '0');
               WHEN ma11 => 
                  for i in N_PTRH-1 DOWNTO 0 loop
                    stat_array(i)(1) <= '1';
                  end loop;
               WHEN ma12 => 
                  WrEn_cld(6) <= '1';
                  WrPTRHEn_cld <=
                    (others => '1');
                  wData_cld(15 downto 0) <=
                    stat_array(0);
               WHEN ma13 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld <=
                    (others => '0');
               WHEN ma14 => 
                  sw_cmd_cld <= NOP;
               WHEN mar1 => 
                  all_cfgs_set <= '1';
                  sw_cmd_cld <=
                    DeselectAll;
               WHEN mar2 => 
                  sw_cmd_cld <= NOP;
                  PTRHn <= (others => '0');
               WHEN mar4 => 
                  sw_cmd_cld <= SelectOne;
                  sw_wdata_cld <= (others => '0');
                  sw_wdata_cld(3 downto 0) <=
                    PTRHn;
                  all_cfg_set(conv_integer(PTRHn)) <= '1';
               WHEN mar5 => 
                  sw_cmd_cld <= NOP;
                  stat_array(conv_integer(PTRHn))(12) <=
                    '0';
                  CfgWd <= "001";
               WHEN mar15 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '0';
                  PTRHn <= PTRHn+1;
               WHEN mar6 => 
                  sw_cmd_cld <= NOP;
                  all_cfg_set(conv_integer(PTRHn)) <= '0';
                  all_cfgs_set <= '0';
                  stat_array(conv_integer(PTRHn))(12) <= '1';
               WHEN mar14 => 
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  WrEn_cld(6) <= '1';
                  wdata_cld(15 downto 0) <=
                    stat_array(conv_integer(PTRHn));
               WHEN mar9 => 
                  sw_cmd_cld <= WriteRead2;
                  sw_addr_cld <= "1110111";
                  sw_wdata_cld(7 downto 4) <= "1010";
                  sw_wdata_cld(3 downto 1) <= CfgWd;
                  sw_wdata_cld(0) <= '0';
               WHEN mar12 => 
                  WrEn_cld(conv_integer(CfgWd)-1) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '0';
                  CfgWd <= CfgWd+1;
               WHEN mar10 => 
                  sw_cmd_cld <= NOP;
               WHEN mar13 => 
                  sw_cmd_cld <= NOP;
                  all_cfg_set(conv_integer(PTRHn)) <= '0';
                  all_cfgs_set <= '0';
               WHEN mar11 => 
                  stat_array(conv_integer(PTRHn))(conv_integer(CfgWd)+1) <= '1';
                  WrEn_cld(conv_integer(CfgWd)-1) <= '1';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld <= sw_rdata;
               WHEN ma1_9 => 
                  sw_cmd_cld <= DeselectAll;
               WHEN ma1_12 => 
                  sw_cmd_cld <= SelectOne;
                  sw_wdata_cld <=
                    conv_std_logic_vector(conv_integer(PTRHn),8);
               WHEN ma1_1 => 
                  sw_cmd_cld <= SelectAll;
               WHEN ma1_13 => 
                  sw_cmd_cld <= NOP;
                  stat_array(conv_integer(PTRHn))(12) <= '0';
               WHEN ma1_22 => 
                  sw_cmd_cld <= WriteRead3;
                  sw_addr_cld <= "1110111";
                  sw_wdata_cld <= X"00";
               WHEN ma1_23 => 
                  stat_array(conv_integer(PTRHn))(10) <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma1_10 => 
                  sw_cmd_cld <= NOP;
                  PTRHn <= (others => '0');
               WHEN ma1_2 => 
                  sw_cmd_cld <= NOP;
               WHEN ma1_3 => 
                  sw_cmd_cld <= Write;
                  sw_addr_cld <= "1000000";
                  sw_wdata_cld <= X"F3";
               WHEN ma1_24 => 
                  sw_cmd_cld <= NOP;
               WHEN ma1_15 => 
                  sw_cmd_cld <= Read2;
                  sw_addr_cld <= "1000000";
               WHEN ma1_17 => 
                  stat_array(conv_integer(PTRHn))(8) <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma1_25 => 
                  WrEn_cld(6) <= '1';
                  WrEn_cld(9) <= '0';
                  WrEn_cld(10) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld(15 downto 0) <=
                    stat_array(conv_integer(PTRHn));
               WHEN ma1_26 => 
                  WrEn_cld(9) <= '1';
                  WrEn_cld(10) <= '1';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld <= sw_rdata;
                  stat_array(conv_integer(PTRHn))(10) <= '1';
               WHEN ma1_4 => 
                  sht_ack <= '1';
                  sw_cmd_cld <= NOP;
               WHEN ma1_5 => 
                  sht_ack <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma1_27 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '0';
               WHEN ma1_16 => 
                  sw_cmd_cld <= NOP;
               WHEN ma1_6 => 
                  sw_cmd_cld <= Write;
                  sw_addr_cld <= "1110111";
                  sw_wdata_cld <= X"48";
               WHEN ma1_28 => 
                  PTRHn <= PTRHn + 1;
               WHEN ma1_19 => 
                  WrEn_cld(6) <= '1';
                  WrEn_cld(7) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld(15 downto 0) <=
                    stat_array(conv_integer(PTRHn));
               WHEN ma1_18 => 
                  WrEn_cld(7) <= '1';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld <= sw_rdata;
                  stat_array(conv_integer(PTRHn))(8) <= '1';
               WHEN ma1_7 => 
                  ms_ack <= '1';
                  sw_cmd_cld <= NOP;
               WHEN ma1_8 => 
                  ms_ack <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma1_20 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '0';
               WHEN ma2_9 => 
                  sw_cmd_cld <= DeselectAll;
               WHEN ma2_12 => 
                  sw_cmd_cld <= SelectOne;
                  sw_wdata_cld <=
                    conv_std_logic_vector(
                       conv_integer(PTRHn),8);
               WHEN ma2_1 => 
                  sw_cmd_cld <= SelectAll;
               WHEN ma2_13 => 
                  sw_cmd_cld <= NOP;
                  stat_array(conv_integer(PTRHn))(12)
                    <= '0';
               WHEN ma2_22 => 
                  sw_cmd_cld <= WriteRead3;
                  sw_addr_cld <= "1110111";
                  sw_wdata_cld <= X"00";
               WHEN ma2_23 => 
                  stat_array(conv_integer(PTRHn))(11) <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma2_10 => 
                  sw_cmd_cld <= NOP;
                  PTRHn <= (others => '0');
               WHEN ma2_2 => 
                  sw_cmd_cld <= NOP;
               WHEN ma2_3 => 
                  sw_cmd_cld <= Write;
                  sw_addr_cld <= "1000000";
                  sw_wdata_cld <= X"F5";
               WHEN ma2_24 => 
                  sw_cmd_cld <= NOP;
               WHEN ma2_15 => 
                  sw_cmd_cld <= Read2;
                  sw_addr_cld <= "1000000";
               WHEN ma2_17 => 
                  stat_array(conv_integer(PTRHn))(9)
                    <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma2_26 => 
                  WrEn_cld(6) <= '1';
                  WrEn_cld(11) <= '0';
                  WrEn_cld(12) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld(15 downto 0) <=
                    stat_array(conv_integer(PTRHn));
               WHEN ma2_25 => 
                  WrEn_cld(11) <= '1';
                  WrEn_cld(12) <= '1';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld <= sw_rdata;
                  stat_array(conv_integer(PTRHn))(11) <= '1';
               WHEN ma2_4 => 
                  sht_ack <= '1';
                  sw_cmd_cld <= NOP;
               WHEN ma2_5 => 
                  sht_ack <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma2_27 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '0';
               WHEN ma2_16 => 
                  sw_cmd_cld <= NOP;
               WHEN ma2_6 => 
                  sw_cmd_cld <= Write;
                  sw_addr_cld <= "1110111";
                  sw_wdata_cld <= X"58";
               WHEN ma2_28 => 
                  PTRHn <= PTRHn + 1;
               WHEN ma2_19 => 
                  WrEn_cld(6) <= '1';
                  WrEn_cld(8) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld(15 downto 0) <=
                    stat_array(conv_integer(PTRHn));
               WHEN ma2_18 => 
                  WrEn_cld(8) <= '1';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '1';
                  wData_cld <= sw_rdata;
                  stat_array(conv_integer(PTRHn))(9) <= '1';
               WHEN ma2_7 => 
                  ms_ack <= '1';
                  sw_cmd_cld <= NOP;
               WHEN ma2_8 => 
                  ms_ack <= '0';
                  sw_cmd_cld <= NOP;
               WHEN ma2_20 => 
                  WrEn_cld(6) <= '0';
                  WrPTRHEn_cld(conv_integer(PTRHn)) <= '0';
               WHEN ma1_29 => 
                  stat_array(conv_integer(PTRHn))(8) <= '0';
                  stat_array(conv_integer(PTRHn))(12) <= '1';
                  sw_cmd_cld <= NOP;
               WHEN ma2_29 => 
                  sw_cmd_cld <= NOP;
                  stat_array(conv_integer(PTRHn))(12)
                    <= '1';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CfgWd,
      PTRHn,
      all_cfg_set,
      all_cfgs_set,
      csm_timeout,
      current_state,
      ms_ack,
      sht_ack,
      stat_array,
      sw_done,
      sw_err
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_ma15 <= '0';
      csm_to_ma1_10a <= '0';
      csm_to_ma2_10a <= '0';
      CASE current_state IS
         WHEN ma0 => 
            IF (sw_done = '1' OR
                sw_err = '1') THEN 
               next_state <= ma1;
            ELSE
               next_state <= ma0;
            END IF;
         WHEN ma1 => 
            IF (sw_done = '0' AND
                sw_err = '0') THEN 
               next_state <= ma2;
            ELSE
               next_state <= ma1;
            END IF;
         WHEN ma2 => 
            next_state <= ma3;
         WHEN ma3 => 
            IF (sw_done = '1') THEN 
               next_state <= ma4;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma1;
            ELSE
               next_state <= ma3;
            END IF;
         WHEN ma4 => 
            IF (sw_done = '0') THEN 
               next_state <= ma5;
            ELSE
               next_state <= ma4;
            END IF;
         WHEN ma5 => 
            IF (sw_done = '1') THEN 
               next_state <= ma6;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma9;
            ELSE
               next_state <= ma5;
            END IF;
         WHEN ma9 => 
            IF (sw_done = '0') THEN 
               next_state <= ma10;
            ELSE
               next_state <= ma9;
            END IF;
         WHEN ma10 => 
            IF (sw_done = '1') THEN 
               next_state <= ma11;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma14;
            ELSE
               next_state <= ma10;
            END IF;
         WHEN ma6 => 
            next_state <= ma7;
         WHEN ma7 => 
            next_state <= ma8;
         WHEN ma8 => 
            next_state <= ma9;
         WHEN ma11 => 
            next_state <= ma12;
         WHEN ma12 => 
            next_state <= ma13;
         WHEN ma13 => 
            next_state <= ma14;
         WHEN ma14 => 
            IF (sw_done = '0') THEN 
               next_state <= ma15;
               csm_to_ma15 <= '1';
            ELSE
               next_state <= ma14;
            END IF;
         WHEN ma15 => 
            IF (csm_timeout = '1') THEN 
               next_state <= mar1;
            ELSE
               next_state <= ma15;
            END IF;
         WHEN mar1 => 
            IF (sw_done = '1'
                  OR
                sw_err = '1') THEN 
               next_state <= mar2;
            ELSE
               next_state <= mar1;
            END IF;
         WHEN mar2 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= mar3;
            ELSE
               next_state <= mar2;
            END IF;
         WHEN mar3 => 
            IF (PTRHn >= N_PTRH) THEN 
               next_state <= ma1_1;
            ELSIF (all_cfg_set(conv_integer(PTRHn)) /= '1') THEN 
               next_state <= mar4;
            ELSE
               next_state <= mar15;
            END IF;
         WHEN mar4 => 
            IF (sw_done = '1') THEN 
               next_state <= mar5;
            ELSIF (sw_err = '1') THEN 
               next_state <= mar6;
            ELSE
               next_state <= mar4;
            END IF;
         WHEN mar5 => 
            IF (sw_done = '0') THEN 
               next_state <= mar7;
            ELSE
               next_state <= mar5;
            END IF;
         WHEN mar15 => 
            next_state <= mar3;
         WHEN mar6 => 
            IF (sw_err = '0') THEN 
               next_state <= mar14;
            ELSE
               next_state <= mar6;
            END IF;
         WHEN mar14 => 
            next_state <= mar15;
         WHEN mar8 => 
            IF (stat_array(conv_integer(PTRHn))(conv_integer(CfgWd)+1)
                  /= '1') THEN 
               next_state <= mar9;
            ELSE
               next_state <= mar12;
            END IF;
         WHEN mar9 => 
            IF (sw_done = '1') THEN 
               next_state <= mar10;
            ELSIF (sw_err = '1') THEN 
               next_state <= mar13;
            ELSE
               next_state <= mar9;
            END IF;
         WHEN mar12 => 
            next_state <= mar7;
         WHEN mar7 => 
            IF (CfgWd <= 6) THEN 
               next_state <= mar8;
            ELSE
               next_state <= mar14;
            END IF;
         WHEN mar10 => 
            IF (sw_done = '0') THEN 
               next_state <= mar11;
            ELSE
               next_state <= mar10;
            END IF;
         WHEN mar13 => 
            IF (sw_err = '0') THEN 
               next_state <= mar14;
            ELSE
               next_state <= mar13;
            END IF;
         WHEN mar11 => 
            next_state <= mar12;
         WHEN ma1_21 => 
            IF (ms_ack = '1') THEN 
               next_state <= ma1_22;
            ELSE
               next_state <= ma1_23;
            END IF;
         WHEN ma1_9 => 
            IF (sw_done = '1'
                  OR
                sw_err = '1') THEN 
               next_state <= ma1_10;
            ELSE
               next_state <= ma1_9;
            END IF;
         WHEN ma1_12 => 
            IF (sw_done = '1') THEN 
               next_state <= ma1_13;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma1_29;
            ELSE
               next_state <= ma1_12;
            END IF;
         WHEN ma1_1 => 
            IF (sw_done = '1'
                  OR
                sw_err = '1') THEN 
               next_state <= ma1_2;
            ELSE
               next_state <= ma1_1;
            END IF;
         WHEN ma1_13 => 
            IF (sw_done = '0') THEN 
               next_state <= ma1_14;
            ELSE
               next_state <= ma1_13;
            END IF;
         WHEN ma1_22 => 
            IF (sw_done = '1') THEN 
               next_state <= ma1_24;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma1_23;
            ELSE
               next_state <= ma1_22;
            END IF;
         WHEN ma1_23 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma1_25;
            ELSE
               next_state <= ma1_23;
            END IF;
         WHEN ma1_10 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma1_10a;
               csm_to_ma1_10a <= '1';
            ELSE
               next_state <= ma1_10;
            END IF;
         WHEN ma1_2 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma1_3;
            ELSE
               next_state <= ma1_2;
            END IF;
         WHEN ma1_14 => 
            IF (sht_ack = '1') THEN 
               next_state <= ma1_15;
            ELSE
               next_state <= ma1_17;
            END IF;
         WHEN ma1_3 => 
            IF (sw_done = '1') THEN 
               next_state <= ma1_4;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma1_5;
            ELSE
               next_state <= ma1_3;
            END IF;
         WHEN ma1_24 => 
            IF (sw_done = '0') THEN 
               next_state <= ma1_26;
            ELSE
               next_state <= ma1_24;
            END IF;
         WHEN ma1_10a => 
            IF (csm_timeout = '1') THEN 
               next_state <= ma1_11;
            ELSE
               next_state <= ma1_10a;
            END IF;
         WHEN ma1_15 => 
            IF (sw_done = '1') THEN 
               next_state <= ma1_16;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma1_17;
            ELSE
               next_state <= ma1_15;
            END IF;
         WHEN ma1_17 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma1_19;
            ELSE
               next_state <= ma1_17;
            END IF;
         WHEN ma1_25 => 
            next_state <= ma1_27;
         WHEN ma1_26 => 
            next_state <= ma1_25;
         WHEN ma1_4 => 
            IF (sw_done = '0') THEN 
               next_state <= ma1_6;
            ELSE
               next_state <= ma1_4;
            END IF;
         WHEN ma1_5 => 
            IF (sw_err = '0') THEN 
               next_state <= ma1_6;
            ELSE
               next_state <= ma1_5;
            END IF;
         WHEN ma1_11 => 
            IF (PTRHn >= N_PTRH) THEN 
               next_state <= ma2_1;
            ELSE
               next_state <= ma1_12;
            END IF;
         WHEN ma1_27 => 
            next_state <= ma1_28;
         WHEN ma1_16 => 
            IF (sw_done = '0') THEN 
               next_state <= ma1_18;
            ELSE
               next_state <= ma1_16;
            END IF;
         WHEN ma1_6 => 
            IF (sw_done = '1') THEN 
               next_state <= ma1_7;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma1_8;
            ELSE
               next_state <= ma1_6;
            END IF;
         WHEN ma1_28 => 
            next_state <= ma1_11;
         WHEN ma1_19 => 
            next_state <= ma1_20;
         WHEN ma1_18 => 
            next_state <= ma1_19;
         WHEN ma1_7 => 
            IF (sw_done = '0') THEN 
               next_state <= ma1_9;
            ELSE
               next_state <= ma1_7;
            END IF;
         WHEN ma1_8 => 
            IF (sw_err = '0') THEN 
               next_state <= ma1_9;
            ELSE
               next_state <= ma1_8;
            END IF;
         WHEN ma1_20 => 
            next_state <= ma1_21;
         WHEN ma2_21 => 
            IF (ms_ack = '1') THEN 
               next_state <= ma2_22;
            ELSE
               next_state <= ma2_23;
            END IF;
         WHEN ma2_9 => 
            IF (sw_done = '1'
                  OR
                sw_err = '1') THEN 
               next_state <= ma2_10;
            ELSE
               next_state <= ma2_9;
            END IF;
         WHEN ma2_12 => 
            IF (sw_done = '1') THEN 
               next_state <= ma2_13;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma2_29;
            ELSE
               next_state <= ma2_12;
            END IF;
         WHEN ma2_1 => 
            IF (sw_done = '1'
                  OR
                sw_err = '1') THEN 
               next_state <= ma2_2;
            ELSE
               next_state <= ma2_1;
            END IF;
         WHEN ma2_13 => 
            IF (sw_done = '0') THEN 
               next_state <= ma2_14;
            ELSE
               next_state <= ma2_13;
            END IF;
         WHEN ma2_22 => 
            IF (sw_done = '1') THEN 
               next_state <= ma2_24;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma2_23;
            ELSE
               next_state <= ma2_22;
            END IF;
         WHEN ma2_23 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma2_26;
            ELSE
               next_state <= ma2_23;
            END IF;
         WHEN ma2_10 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma2_10a;
               csm_to_ma2_10a <= '1';
            ELSE
               next_state <= ma2_10;
            END IF;
         WHEN ma2_2 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma2_3;
            ELSE
               next_state <= ma2_2;
            END IF;
         WHEN ma2_14 => 
            IF (sht_ack = '1') THEN 
               next_state <= ma2_15;
            ELSE
               next_state <= ma2_17;
            END IF;
         WHEN ma2_3 => 
            IF (sw_done = '1') THEN 
               next_state <= ma2_4;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma2_5;
            ELSE
               next_state <= ma2_3;
            END IF;
         WHEN ma2_10a => 
            IF (csm_timeout = '1') THEN 
               next_state <= ma2_11;
            ELSE
               next_state <= ma2_10a;
            END IF;
         WHEN ma2_24 => 
            IF (sw_done = '0') THEN 
               next_state <= ma2_25;
            ELSE
               next_state <= ma2_24;
            END IF;
         WHEN ma2_15 => 
            IF (sw_done = '1') THEN 
               next_state <= ma2_16;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma2_17;
            ELSE
               next_state <= ma2_15;
            END IF;
         WHEN ma2_17 => 
            IF (sw_done = '0'
                  AND
                sw_err = '0') THEN 
               next_state <= ma2_19;
            ELSE
               next_state <= ma2_17;
            END IF;
         WHEN ma2_26 => 
            next_state <= ma2_27;
         WHEN ma2_25 => 
            next_state <= ma2_26;
         WHEN ma2_4 => 
            IF (sw_done = '0') THEN 
               next_state <= ma2_6;
            ELSE
               next_state <= ma2_4;
            END IF;
         WHEN ma2_5 => 
            IF (sw_err = '0') THEN 
               next_state <= ma2_6;
            ELSE
               next_state <= ma2_5;
            END IF;
         WHEN ma2_11 => 
            IF ((PTRHn >= N_PTRH) AND (all_cfgs_set /= '1')) THEN 
               next_state <= mar1;
            ELSIF (PTRHn >= N_PTRH) THEN 
               next_state <= ma1_1;
            ELSE
               next_state <= ma2_12;
            END IF;
         WHEN ma2_27 => 
            next_state <= ma2_28;
         WHEN ma2_16 => 
            IF (sw_done = '0') THEN 
               next_state <= ma2_18;
            ELSE
               next_state <= ma2_16;
            END IF;
         WHEN ma2_6 => 
            IF (sw_done = '1') THEN 
               next_state <= ma2_7;
            ELSIF (sw_err = '1') THEN 
               next_state <= ma2_8;
            ELSE
               next_state <= ma2_6;
            END IF;
         WHEN ma2_28 => 
            next_state <= ma2_11;
         WHEN ma2_19 => 
            next_state <= ma2_20;
         WHEN ma2_18 => 
            next_state <= ma2_19;
         WHEN ma2_7 => 
            IF (sw_done = '0') THEN 
               next_state <= ma2_9;
            ELSE
               next_state <= ma2_7;
            END IF;
         WHEN ma2_8 => 
            IF (sw_err = '0') THEN 
               next_state <= ma2_9;
            ELSE
               next_state <= ma2_8;
            END IF;
         WHEN ma2_20 => 
            next_state <= ma2_21;
         WHEN ma1_29 => 
            next_state <= ma1_23;
         WHEN ma2_29 => 
            next_state <= ma2_23;
         WHEN OTHERS =>
            next_state <= ma0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_ma15,
      csm_to_ma1_10a,
      csm_to_ma2_10a
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_ma15 = '1') THEN
         csm_next_timer <= "00000101011101111111"; -- no cycles(22400)-1=22399
      ELSIF (csm_to_ma1_10a = '1') THEN
         csm_next_timer <= "10100110000000111111"; -- no cycles(680000)-1=679999
      ELSIF (csm_to_ma2_10a = '1') THEN
         csm_next_timer <= "00111000101000111111"; -- no cycles(232000)-1=231999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   WrEn <= WrEn_cld;
   WrPTRHEn <= WrPTRHEn_cld;
   sw_addr <= sw_addr_cld;
   sw_cmd <= sw_cmd_cld;
   sw_wdata <= sw_wdata_cld;
   wData <= wData_cld;
END fsm;

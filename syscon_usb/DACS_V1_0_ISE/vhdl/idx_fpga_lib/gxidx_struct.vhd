-- VHDL Entity idx_fpga_lib.gxidx.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 10:39:01 02/ 1/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY gxidx IS
   GENERIC( 
      N_CHANNELS : integer range 15 downto 1 := 2;
      BASE_ADDR : std_logic_vector (15 DOWNTO 0) := X"0A00"
   );
   PORT( 
      rst         : IN     std_ulogic;
      Addr        : IN     std_logic_vector (15 DOWNTO 0);
      CMDENBL     : IN     std_ulogic;
      ExpRd       : IN     std_ulogic;
      ExpWr       : IN     std_ulogic;
      INTA        : IN     std_ulogic;
      F8M         : IN     std_ulogic;
      KillA       : IN     std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      KillB       : IN     std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      LimI        : IN     std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      LimO        : IN     std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      ZR          : IN     std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      ExpAck      : OUT    std_ulogic;
      BdIntr      : OUT    std_ulogic;
      Dir         : OUT    std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      Run         : OUT    std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      Step        : OUT    std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
      WData       : IN     std_logic_vector (15 DOWNTO 0);
      RData       : OUT    std_logic_vector (15 DOWNTO 0)
   );

-- Declarations

END gxidx ;

--
-- VHDL Architecture idx_fpga_lib.gxidx.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-NBX200T)
--          at - 10:39:01 02/ 1/2010
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY idx_fpga_lib;

ARCHITECTURE struct OF gxidx IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Chan    : std_ulogic_vector(N_CHANNELS-1 DOWNTO 0);
   SIGNAL F4M     : std_ulogic;
   SIGNAL OpCd    : std_logic_vector(2 DOWNTO 0);
   SIGNAL RdEn    : std_ulogic;
   SIGNAL WrEn    : std_ulogic;
   SIGNAL Ireq    : std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
   SIGNAL Running_int : std_ulogic_vector (N_CHANNELS-1 DOWNTO 0);
   SIGNAL BdEn        : std_ulogic;
   SIGNAL iRData      : std_logic_vector((N_CHANNELS-1)*16+15 DOWNTO 0);


   -- Component Declarations
   COMPONENT channel
      PORT (
         CMDENBL  : IN     std_ulogic;
         ChanSel  : IN     std_ulogic;
         F4M      : IN     std_ulogic;
         F8M      : IN     std_ulogic;
         INTA     : IN     std_ulogic;
         KillA    : IN     std_ulogic;
         KillB    : IN     std_ulogic;
         LimI     : IN     std_ulogic;
         LimO     : IN     std_ulogic;
         OpCd     : IN     std_logic_vector(2 DOWNTO 0);
         RdEn     : IN     std_ulogic;
         WrEn     : IN     std_ulogic;
         ZR       : IN     std_ulogic;
         rst      : IN     std_logic;
         Dir      : OUT    std_ulogic;
         Ireq     : OUT    std_ulogic;
         Run      : OUT    std_ulogic;
         Running  : OUT    std_ulogic;
         Step     : OUT    std_ulogic;
         WData    : IN     std_logic_vector ( 15 DOWNTO 0 );
         RData    : OUT    std_logic_vector (15 DOWNTO 0)
      );
   END COMPONENT;
   
   COMPONENT subbus_io
      PORT (
         ExpRd  : IN     std_ulogic;
         ExpWr  : IN     std_ulogic;
         ExpAck : OUT    std_ulogic;
         F8M    : IN     std_ulogic;
         RdEn   : OUT    std_ulogic;
         WrEn   : OUT    std_ulogic;
         BdEn   : IN     std_ulogic
      );
   END COMPONENT;

   COMPONENT idx_addr
      GENERIC (
         N_CHANNELS : integer range 15 downto 1      := 1;
         BASE_ADDR  : std_logic_vector (15 DOWNTO 0) := X"0A00"
      );
      PORT (
         Addr    : IN     std_logic_vector(15 DOWNTO 0);
         BdEn    : OUT    std_ulogic;
         Chan    : OUT    std_ulogic_vector(N_CHANNELS-1 DOWNTO 0);
         OpCd    : OUT    std_logic_vector(2 DOWNTO 0);
         Ireq    : IN     std_ulogic_vector(N_CHANNELS-1 DOWNTO 0);
         BdIntr  : OUT    std_ulogic;
         Running : IN     std_ulogic_vector(N_CHANNELS-1 DOWNTO 0);
         RData   : OUT    std_logic_vector(15 DOWNTO 0);
         iRData  : IN     std_logic_vector((N_CHANNELS-1)*16+15 DOWNTO 0);
         RdEn    : IN     std_ulogic;
         WData5  : IN     std_logic;
         WrEn    : IN     std_ulogic;
         F8M     : IN     std_ulogic;
         F4M     : OUT    std_ulogic;
         rst     : IN     std_ulogic
      );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : channel USE ENTITY idx_fpga_lib.channel;
   FOR ALL : subbus_io USE ENTITY idx_fpga_lib.subbus_io;
   FOR ALL : idx_addr USE ENTITY idx_fpga_lib.idx_addr;
   -- pragma synthesis_on

BEGIN

  idx_addr_i : idx_addr
     GENERIC MAP (
        N_CHANNELS => N_CHANNELS,
        BASE_ADDR  => BASE_ADDR
     )
     PORT MAP (
        Addr    => Addr,
        BdEn    => BdEn,
        Chan    => Chan,
        OpCd    => OpCd,
        Ireq    => Ireq,
        BdIntr  => BdIntr,
        Running => Running_int,
        RData   => RData,
        iRData  => iRData,
        RdEn    => RdEn,
        WData5  => WData(5),
        WrEn    => WrEn,
        F8M     => F8M,
        F4M     => F4M,
        rst     => rst
     );
     
  idx_io : subbus_io
     PORT MAP (
        ExpRd  => ExpRd,
        ExpWr  => ExpWr,
        ExpAck => ExpAck,
        F8M    => F8M,
        RdEn   => RdEn,
        WrEn   => WrEn,
        BdEn   => BdEn
     );
    
  channels : for chno in 0 to N_CHANNELS-1 generate
    Ch : channel
      PORT MAP (
         CMDENBL => CMDENBL,
         ChanSel => Chan(chno),
         INTA    => INTA,
         F4M     => F4M,
         F8M     => F8M,
         KillA   => KillA(chno),
         KillB   => KillB(chno),
         LimI    => LimI(chno),
         LimO    => LimO(chno),
         OpCd    => OpCd,
         RdEn    => RdEn,
         WrEn    => WrEn,
         ZR      => ZR(chno),
         rst     => rst,
         Dir     => Dir(chno),
         Ireq    => Ireq(chno),
         Run     => Run(chno),
         Running => Running_int(chno),
         Step    => Step(chno),
         WData   => WData,
         RData   => iRData(chno*16+15 DOWNTO chno*16)
      );
  end generate;

  --Run <= Run_int;
  
END struct;
